<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Hexo • Posts by &#34;计算机网络&#34; tag</title>
        <link>http://example.com</link>
        <description></description>
        <language>en</language>
        <pubDate>Tue, 18 Jun 2024 20:27:43 +0800</pubDate>
        <lastBuildDate>Tue, 18 Jun 2024 20:27:43 +0800</lastBuildDate>
        <category>C++</category>
        <category>架构和设计模式</category>
        <category>操作系统</category>
        <category>DragonOS</category>
        <category>计算机网络</category>
        <category>vue</category>
        <category>编译原理</category>
        <item>
            <guid isPermalink="true">http://example.com/2024/06/18/%E8%AE%A1%E7%BD%91IP%E5%B1%82/</guid>
            <title>计网IP层</title>
            <link>http://example.com/2024/06/18/%E8%AE%A1%E7%BD%91IP%E5%B1%82/</link>
            <category>计算机网络</category>
            <pubDate>Tue, 18 Jun 2024 20:27:43 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;hierarchical-routing&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#hierarchical-routing&#34;&gt;#&lt;/a&gt; Hierarchical Routing&lt;/h2&gt;
&lt;h3 id=&#34;1-hot-potato-routing&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-hot-potato-routing&#34;&gt;#&lt;/a&gt; 1 Hot-Potato routing&lt;/h3&gt;
&lt;p&gt;理念：a router send the packet to the gateway router that has the smallest router-to-gateway cost among all gateways with a path to the destination.&lt;/p&gt;
&lt;h2 id=&#34;routing-in-the-internet&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#routing-in-the-internet&#34;&gt;#&lt;/a&gt; Routing in the Internet&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;autonomous system（AS）：在同一个行政和技术管理下的 router 集合，在这些 routers 之间执行相同的 routing protocol&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;1-intra-as-routing-in-the-internet-rip&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-intra-as-routing-in-the-internet-rip&#34;&gt;#&lt;/a&gt; 1 Intra-AS Routing in the Internet : RIP&lt;/h3&gt;
&lt;p&gt;在 autonomous system 里如何 routing？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RIP：routing information protocol&lt;/li&gt;
&lt;li&gt;OSPF：Open Shortest Path First&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;11-rip&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#11-rip&#34;&gt;#&lt;/a&gt; 1.1 RIP&lt;/h4&gt;
&lt;p&gt;RIP 也是一种 DV 协议，但在 RIP 中边架设在路由器以及它的目标 subnet 之间，边的 cost 使用&lt;strong&gt; hop&lt;/strong&gt; 来衡量，hop 是从路由器以及它的目标 subnet 的最短路径上穿过的 subnet 数。hop 值小于 15 是 AS 系统使用 RIP 的限制&lt;br&gt;
和 DV 一样，RIP 也需要定期更新 hop 矩阵表，RIP 使用&lt;strong&gt; RIP response message 和 RIP advertisement&lt;/strong&gt; 来更新矩阵表。每一个 router 有 RIP table（routing table）路由表有三列：&lt;strong&gt;destination subnet、the next router along the shortest path（源 router 下一个跳转的 router）、number of hop&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;routingtable.png&#34; alt=&#34;routingtable&#34;&gt;&lt;/p&gt;
&lt;p&gt;现在考虑存在 hop 发生变化的情况，当一个路由器的路由表发生变化，会发出 advertisement，收到消息的路由器根据这个 advertisement 携带的信息对自身的路由表进行修改，默认这个消息的最小消息是正确的。&lt;/p&gt;
&lt;p&gt;现在来考虑如何实现 RIP 协议。如果超过 180s 没收到来自相邻路由的 advertisement 会认为这个 router 不可到达，需要重新修改 routing table 并发送 advertisement。可以使用 RIP request message 主动请求信息，这些 message 使用 UDP 协议。拿 UNIX 系统来举例，RIP 程序运行在 routed 进程中，这个进程负责维护 routing information 和邻居 router 的 routed 进程交换信息，也就是 request 和 advertisement 的过程。&lt;/p&gt;
&lt;p&gt;重点是修改路由表这一部分！！！&lt;/p&gt;
&lt;h4 id=&#34;12-ospf&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#12-ospf&#34;&gt;#&lt;/a&gt; 1.2 OSPF&lt;/h4&gt;
&lt;p&gt;OSPF 部署在 upper-tier ISPs，RIP 部署在 lower-tier ISPs。OSPF 是使用 link-state 信息流和 Dijkstra 算法的 link-state 协议。OSPF 协议把整个 AS 系统看成一个图。其中的任何一个 router 会运行算法得到一个 shortest-path tree to 所有的 subnets，自己是根节点。OSPF 不会强行更改 link weight，但使用 link weight 提供决定最小开销路径的 routing。和 RIP 不同，router 传播 information 到所有的 routers in AS, 甚至 router 会定期传播 link-state information，哪怕没改变。&lt;/p&gt;
&lt;p&gt;OSPF 的优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Security：路由器之间交换 link information 可以要求认证，受信任的路由器才可以参与 OSPF 协议在 AS 中。两种认证方式：simple 和 MD5 。simple 就是简单的密码认证，MD5 是密钥认证。&lt;/li&gt;
&lt;li&gt;Integrated support for unicast and multicast routing&lt;/li&gt;
&lt;li&gt;Support for hierarchy within a single routing domain：构建最短路径树也就是划分了层次！层次化可以带来很多的好处&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;area border router：负责 routing packet outside the area&lt;/p&gt;
&lt;p&gt;backnone area：AS 中一个 OSPF 区域被配置为骨干区域。负责在 AS 中的不同区域 route traffic&lt;/p&gt;
&lt;h4 id=&#34;13-inter-as-routingbgp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#13-inter-as-routingbgp&#34;&gt;#&lt;/a&gt; 1.3 Inter-AS Routing：BGP&lt;/h4&gt;
&lt;p&gt;Board Gateway Protocol，在 AS 之间 routing&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;持有相邻 ASs 可达性的信息&lt;/li&gt;
&lt;li&gt;在 AS 内部的所有 router 中传播可达性信息&lt;/li&gt;
&lt;li&gt;根据可达性信息和 AS policy 决定 good router&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;BGP 知道 internet 中的 AS 中的所有的 subnet 并且知道怎么到达该地方&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;BGP Basic&lt;/strong&gt;&lt;br&gt;
BGP 在 IP 层中是非常非常重要的！！！下面会非常详细的介绍 BGP 协议。这个协议把网络层中所有的事物都 glue 在一起。不管是 AS 内部的 routers 之间还是不同 AS 的 router 之间可以建立 semipermanent TCP connect。这是 BGP 的基础。现在遇到我们的第一个概念 BGP peers，TCP connect 连接的两端的 router 称为 BGP peers。用来传送 BGP messages 的 TCP 连接称为 BGP session。之前介绍过，TCP 连接分内部连接和不同 AS 之间的外部连接，所以 BGP session 也分为 external BGP session 和 internal BGP session。BGP 协议中，AS 可以通过相邻 AS 了解目的地的可达性。在 BGP 中，注意目的地不再是 host，而是 CIDRized prefixes，代表一个 subnet 或者和 subnet 的集合。&lt;/p&gt;
&lt;p&gt;现在了解了 BGP 中新出现的概念，我们来接着看 BGP 如何 distribute prefix 可达性信息通过 BGP sessions。假如 AS3 想要传播从 AS3 出发可达的 prefix，把这些 prefix 打包成 BGP message，然后在 gate way routers 之间建立 BGP session 发送给 AS1，然后 AS1 也会发送自己的 prefix 给 AS3，然后 AS1 也对自己的邻居 AS2 发送 。eBGP  session 收到别的 AS 的信息后会使用 iBGP session 向内部路由器进行传播。当一个 gate router 的信息传送给 AS 中的另外一个 gate router 时，又会把这个信息传递出去，这样 AS2 也知道 AS3 的信息了。当一个 router 收到新的 prefix 时，就会在 forwarding table 中新建一个 entry。&lt;/p&gt;
&lt;p&gt;recall：forwarding table 由 entry（x,I）x 是收到的从什么什么 AS 可以到达的 prefix（subnet） x； I 是 AS 中收到该消息的 gateway router 的 interface（这个 interface 是对内部的！！！！！！）；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Path Attributes and BGP Routes&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;再来了解一些概念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ASN autonomous system number：在 BGP 中标识该 AS 的编码，就像接口的 IP 地址一样。&lt;/li&gt;
&lt;li&gt;route：router 广播一个 prefix 时，会带上表示 BGP attribute 的 number。prefix 带上 attribute number 就是 route。&lt;/li&gt;
&lt;li&gt;BGP attribute：
&lt;ul&gt;
&lt;li&gt;AS-PATH&lt;br&gt;
 传播一个 prefix 时，经过的 AS。一个 prefix 是从 AS2 传到 AS1 的，那么 AS1 要传播这个 prefix 时会带上 AS-PATH：AS2AS1，这样就能知道这个 prefix 的传播路径，也可以用来预防 looping advertisements&lt;/li&gt;
&lt;li&gt;NEXT-HOP：AS-PATH 的开始的第一个 router interface，可以用来计算 gateway router 选择哪个 interface 来得到传输到 internal router 的最小路径的开始，并作为（x，I）中的 I 存入该 internal router 的 forwarding table entry，这里会使用&lt;strong&gt; hot-potato routing&lt;/strong&gt; 来决定是哪个接口&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;非常重要的一张图，用来确定 router 的 forwarding table&lt;/strong&gt;&lt;br&gt;
&lt;img data-src=&#34;howforwarding.png&#34; alt=&#34;howforwarding&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;先使用 inter-AS 协议对节点可以到达 x 的 gateway routes，然后使用 intra-AS 算法决定各个 gateway router 的最小消耗和对应路径，使用 Hot Potato 来决定最终的 I 是哪个&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当 gateway route 收到 route advertisements 时，会使用 import policy 来拒绝某些 route 或者设置某些 route 的优先级&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;BGP Route Selection&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通过分发，路由器可能知道一个 prefix 的不同 route，需要做出选择。选择的原则如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;routes 被赋值了一个 local preference value as attribute。优先级。&lt;/li&gt;
&lt;li&gt;（local preference value 一样的情况下）最短的 AS-PATH 被选择&lt;/li&gt;
&lt;li&gt;（local preference value 和 AS-PATH 的长度一样的情况下）有着最近的 NEXT-HOP router 的 route 被选择，这里最近的概念是 intra-as 算法决定的最小的 cost，这个过程就是 hot-potato routing&lt;/li&gt;
&lt;li&gt;如果还有，使用了 BGP identifiers 的被选中&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Routing Policy&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;stub network：末节 network&lt;/p&gt;
&lt;p&gt;multihomed stub network：有多个连接的末节 network&lt;/p&gt;
&lt;h2 id=&#34;子网掩码的确定子网的划分&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#子网掩码的确定子网的划分&#34;&gt;#&lt;/a&gt; 子网掩码的确定，子网的划分！！！&lt;/h2&gt;
&lt;p&gt;步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;把要划分的子网数目转换为 2 的 m 次方（m 是要划分的子网数）&lt;/li&gt;
&lt;li&gt;取上述要划分的子网数的 m 值&lt;/li&gt;
&lt;li&gt;将确定的 m 值按高序占用主机地址 m 位后转换为十进制&lt;/li&gt;
&lt;li&gt;如 m=3 则是 11100000，转换为十进制就是 244&lt;/li&gt;
&lt;li&gt;如果是 A 类网，子网掩码为 255.244.0.0，B 类网，子网掩码为 255.255.244.0，C 类网，子网掩码为 255.255.255.244&lt;/li&gt;
&lt;li&gt;m=3，故向主机号借用 3 位作为网络号，其他 5 位作为主机号&lt;/li&gt;
&lt;li&gt;确定各个子网的网络号和&lt;strong&gt;广播地址&lt;/strong&gt;，它们之间就是子网可用的 ip&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;公式：在得到网络号的基础上，将网络号右边的表示 IP 地址的主机部分的二进制位全部填上 1，再将得到的二进制数转换为十进制数就可以得到广播地址&lt;/p&gt;
&lt;p&gt;** 主机号全为 1 为广播地址，不能分配 ip，分配 ip 时，先确认广播地址和子网掩码，中间的就是能够 **&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2024/06/16/%E9%93%BE%E8%B7%AF%E5%B1%82/</guid>
            <title>链路层</title>
            <link>http://example.com/2024/06/16/%E9%93%BE%E8%B7%AF%E5%B1%82/</link>
            <category>计算机网络</category>
            <pubDate>Sun, 16 Jun 2024 15:46:26 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;1-edc-error-detection-and-correction-tech&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-edc-error-detection-and-correction-tech&#34;&gt;#&lt;/a&gt; 1 EDC Error Detection and Correction tech&lt;/h1&gt;
&lt;p&gt;有三个检测错误的技术：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Parity Checks 奇偶校验&lt;/li&gt;
&lt;li&gt;Checksum Methods&lt;/li&gt;
&lt;li&gt;Cyclic Redundancy Check&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;11-parity-checks&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#11-parity-checks&#34;&gt;#&lt;/a&gt; 1.1 Parity Checks&lt;/h2&gt;
&lt;p&gt;思想：&lt;/p&gt;
&lt;p&gt;在 d 位的 data 位后一位设置为 Parity bit。如何设置这个 Parity bit 呢？如果 d 位 data 中有偶数位 1 则 P bit 赋值为 0；否则赋值为 1；跟随 packet 一起发送到目标地址。目标主机接收 packet 后会对接收到的 data 进行重新的 Parity bit 计算，并比较和发送过来的 Parity bit，如果不同则说明发生了错误。&lt;/p&gt;
&lt;p&gt;问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不能保证发送过来的 Parity bit 没有发生腐化&lt;/li&gt;
&lt;li&gt;如果发生了偶数次相同的位变化，Parity bit 没有变化但是实际上已经发生了错误&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;改进：使用二维矩阵改进&lt;/p&gt;
&lt;p&gt;原本的 data 为一个向量，现在把它划分为一个 ixj 的矩阵，每一行每一列计算它的 Parity bit，使得这个矩阵扩展为 i+1 x j+1 的矩阵，打包进 packet 发送出去。接收端和之前一样计算所有的 Parity bits 进行比较，如果有一个出现不同则发生了错误。&lt;/p&gt;
&lt;h2 id=&#34;12-checksum&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#12-checksum&#34;&gt;#&lt;/a&gt; 1.2 Checksum&lt;/h2&gt;
&lt;p&gt;思想：&lt;/p&gt;
&lt;p&gt;同样是有一个 data 向量，将这 k 位 data 当成一个个 int 整数，把这些整数相加得到一个数，取其补码作为这个 data 向量的 checksum。接收端接收到 packet 后，重新对 k 位 data 进行求和，得到的数和 checksum 相加看看是不是等于 0，如果是则说明没有出错，如果不是说明出现错误。&lt;/p&gt;
&lt;h2 id=&#34;13-cycling-redundancy-check-循环冗沉检测&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#13-cycling-redundancy-check-循环冗沉检测&#34;&gt;#&lt;/a&gt; 1.3 Cycling Redundancy Check 循环冗沉检测&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;CRC.png&#34; alt=&#34;CRC&#34;&gt;&lt;br&gt;
 如何计算 R？&lt;/p&gt;
&lt;p&gt;R=remainder D * 2 的 r 次方 / G（就是用左移 r 位的 D 除以 G，R 是余数）&lt;/p&gt;
&lt;p&gt;这个 G 是人为设定的，通常是四位，比如 1001&lt;/p&gt;
&lt;p&gt;接收端如何检测：收到的 CRC 码（DR）除以 G，如果余数为 0，没有错误；否则出现错误。&lt;/p&gt;
&lt;h1 id=&#34;2-arp-mav翻译成ip&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-arp-mav翻译成ip&#34;&gt;#&lt;/a&gt; 2 ARP MAV 翻译成 IP&lt;/h1&gt;
&lt;h2 id=&#34;21-mac&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#21-mac&#34;&gt;#&lt;/a&gt; 2.1 MAC&lt;/h2&gt;
&lt;p&gt;作用：用来在局域网内寻址&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;6 个字节组成，一共 48 位&lt;/li&gt;
&lt;li&gt;每个网卡在制作出厂时就具有全球唯一的 MAC，IEEE 决定前 24 位，制造厂商决定后 24 位&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;22-实现mac-ip-arp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#22-实现mac-ip-arp&#34;&gt;#&lt;/a&gt; 2.2 实现 MAC-&amp;gt;IP ARP&lt;/h2&gt;
&lt;p&gt;ARP module 接收 IP 地址作为输入，输出局域网内该 ip 的网卡的 MAC。注意：&lt;strong&gt;ARC 只为局域网内的 router 和 host 服务&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;每一个 host 和 router 有一个 ARP table，作为哈希表储存着 IP 和 MAC 的键值对。也具有 TTL 表式这个映射的有效期，因为局域网内的 ip 不是长期有效的。&lt;/p&gt;
&lt;p&gt;举个例子：现在，有个 sender222.222.222.220 想要向 222.222.222.222 发送 datagram。sender 如何查询 222.222.222.222 的 MAC 呢&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;sender 构建特殊的 packet 叫做 ARP packet，包含源 ip 和 mac，目的地 ip 和 mac（暂时是乱写的），称为 ARP query packet。ARP query packet 的目的是查询所有的局域网内的其他 host 和 router 的 MAC 地址根据提供的 IP 地址&lt;/li&gt;
&lt;li&gt;sender 会向 adapter 发送这个 query packet，adapter 识别到后会把 FF-FF-FF-FF-FF-FF 这个最大的 MAC 地址和 query packet 封装进 frame 发送出去。这个 MAC 具有特殊作用，它可以被子网内的所有 host 和 router 接收，其他的 host 或 router 接收到后，检查 query packet 里的目标 ip 是否是自己，如果是查询自己的 ARP table，把正确的 mapper 写入一个 response packet 发送回 sender。&lt;/li&gt;
&lt;li&gt;sender 接收到 response packet，就实现了 ip 向 mac 的翻译。&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2024/06/16/%E5%8F%AF%E9%9D%A0%E4%BC%A0%E8%BE%93/</guid>
            <title>可靠传输</title>
            <link>http://example.com/2024/06/16/%E5%8F%AF%E9%9D%A0%E4%BC%A0%E8%BE%93/</link>
            <category>计算机网络</category>
            <pubDate>Sun, 16 Jun 2024 12:09:00 +0800</pubDate>
            <description><![CDATA[ &lt;hr&gt;
&lt;h2 id=&#34;title-rdtprinciplesdate-2024-06-14-213706tags计算机网络&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#title-rdtprinciplesdate-2024-06-14-213706tags计算机网络&#34;&gt;#&lt;/a&gt; title: RDTPrinciples&lt;br&gt;
date: 2024-06-14 21:37:06&lt;br&gt;
tags：计算机网络&lt;/h2&gt;
&lt;h2 id=&#34;重点principles-of-reliable-data-transfer&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#重点principles-of-reliable-data-transfer&#34;&gt;#&lt;/a&gt; 重点：Principles of Reliable Data Transfer&lt;/h2&gt;
&lt;h3 id=&#34;1-可靠数据传输服务模型搭建和服务实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-可靠数据传输服务模型搭建和服务实现&#34;&gt;#&lt;/a&gt; 1 可靠数据传输服务模型搭建和服务实现&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;提供服务：主机通过应用层在某个进程发送数据到传输层，数据通过可靠的通道 channel 到达另一个主机的应用层的某个接收进程。&lt;/li&gt;
&lt;li&gt;服务实现：主机发送进程调用 rdt_send () 发送数据到传输层，传输层通过可靠的数据传输协议，使用 udt_send () 发送到链路层，经过不可靠的链路传输到目标主机下的传输层然后调用 rdt_rcv () 进入传输层，最终进入应用层进程。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;reliable data transfer protocol&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;上面提到的可靠的数据传输协议，就是实现上述的服务的过程。比如 TCP 就是一种可靠的数据传输协议。&lt;/p&gt;
&lt;h3 id=&#34;2-建立一个可靠的数据传输协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-建立一个可靠的数据传输协议&#34;&gt;#&lt;/a&gt; 2 建立一个可靠的数据传输协议&lt;/h3&gt;
&lt;p&gt;这里我们会循序渐进的介绍几种 rdt，每一种都是前一种的完善和升级。&lt;/p&gt;
&lt;h4 id=&#34;21-rdt10&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#21-rdt10&#34;&gt;#&lt;/a&gt; 2.1 rdt1.0&lt;/h4&gt;
&lt;p&gt;发送端和接送端各有一个只有一个状态的 FSM，当接收到应用层发送来的数据时，打包成 package 发送到链路层；接收端从链路层接收到 package 解包成 data 发送给上层应用层。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;rdt1.0.png&#34; alt=&#34;rdt1.0&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;22-rdt20&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#22-rdt20&#34;&gt;#&lt;/a&gt; 2.2 rdt2.0&lt;/h4&gt;
&lt;p&gt;rdt1.0 是建立在链路层的传输通道不会发生丢包的基础上的，这是不可能的事情，包传递的过程中发生位错误是非常常见的。&lt;/p&gt;
&lt;p&gt;rdt2.0 是建立在发送的 package 一定会被接收到但是允许发生 bit 错误。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;positive acknowledgements：确认收到消息&lt;/li&gt;
&lt;li&gt;negative acknowledgements：未收到请求重发消息&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用这两个信息可以使得 sender 针对这两个情况进行不同的动作，这是 rdt2.0 中非常重要的基础。这种可能重传的机制被称为 ARQ&lt;/p&gt;
&lt;p&gt;ARQ 协议需要三个额外的协议来处理位错误的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Error detection 错误检测&lt;/li&gt;
&lt;li&gt;Receiver feedback 接收端反馈&lt;/li&gt;
&lt;li&gt;Retransmission 重传&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来正式介绍 rdt2.0，首先来看他的 FSM，与 rdt1.0 不同的是，rdt2.0 的 sender side 的 FSM 有两个状态，receiver side 的 FSM 只有一个状态&lt;/p&gt;
&lt;p&gt;先看 sender side：两个状态分别为 wait for call from above（1） 和 wait for ack or nak（2）。当处于 1 状态时，当 rdt_send (data) 消息到来时，执行  &lt;code&gt;sndpkt = make_pkg(data, checksum); udt_send(sndpkt);&lt;/code&gt;  进入状态 2；当处于状态 2 时，如果收到 rdt_rcv (rcvpkt) &amp;amp;&amp;amp; isNAK (rcvpkt), 执行 &lt;code&gt;udt_send(sndpkt)&lt;/code&gt;  重新发包；如果收到 rdt_rcv (rcvpkt) &amp;amp;&amp;amp; isACK (rcvpkt), 进入状态（1）&lt;/p&gt;
&lt;p&gt;再看 receiver side：检查到包损坏，发送 NAK；检查到包完好，发送 ACK 并把 package 解包的 data 发送到应用层。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;rdt2.0.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt;
&lt;p&gt;看上去没什么问题，但实际上有个致命的错误！我们无法保证 ACK 或者 NAK 的位上没有发生损坏。所以我们仍然需要在包含 ACK 后 NAK 的包上添加 checksum。如果确认损坏，我们又该如何处理这种情况呢？&lt;/p&gt;
&lt;p&gt;解决方法：&lt;br&gt;
在 data package 中添加 sequence number 序列号，这样 receiver 就可以知道接收的包是不是重发的。&lt;/p&gt;
&lt;p&gt;举个例子：stop-and-wait protocol，接收的 package 的 sn 之前遇到过则是重发的，不一样或者增加则是新发的&lt;/p&gt;
&lt;p&gt;应用这个解决方法，rdt2.1 产生了，能够很好的解决 ACKNAK 消息丢失的问题。&lt;/p&gt;
&lt;h4 id=&#34;221-rdt21&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#221-rdt21&#34;&gt;#&lt;/a&gt; 2.2.1 rdt2.1&lt;/h4&gt;
&lt;p&gt;sender side：&lt;br&gt;
&lt;img data-src=&#34;rdt2.1.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt;
&lt;p&gt;初始状态是 wait for call 0 from above，接收到上层发来的 data，和 0（sn）、checksum 一起打包发送给链路层，进入状态 wait for ACK or NAK 0。&lt;/p&gt;
&lt;p&gt;如果接收到反馈的 package，查看发生了损坏或者是 NAK package 重发包；如果没有发生损坏或者是 ACK 进入下一个状态：wait for call 1 from above。&lt;/p&gt;
&lt;p&gt;接收到上层发来的 data，和&lt;strong&gt; 1&lt;/strong&gt;（sn）、checksum 一起打包发送给链路层，进入状态 wait for ACK or NAK 1。&lt;/p&gt;
&lt;p&gt;如果接收到反馈的 package，查看发生了损坏或者是 NAK package 重发包；如果没有发生损坏或者是 ACK 进入下一个状态：wait for call 0 from above。完成闭环。&lt;/p&gt;
&lt;p&gt;这个 FSM 用到的 sn 码只有 0 和 1。&lt;/p&gt;
&lt;p&gt;receiver side：&lt;br&gt;
&lt;img data-src=&#34;rdt2.1.1.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt;
&lt;p&gt;只有两个状态。&lt;/p&gt;
&lt;p&gt;初始状态是 wait for 0 from below，接收到链路层发来的包，检查包没有发生错误并且 sn 是 0，解压包把 data 向上层传递。把 ACK 消息&lt;strong&gt;和 checksum&lt;/strong&gt; 打包发送给 sender side，进入下一个状态 wait for 1 from below；&lt;/p&gt;
&lt;p&gt;如果接收到链路层发来的包，检查包发生错误，则把 NAK 和 checksum 打包发送给 receiver side； 如果接收到链路层发来的包，检查包没错误但是是序号为 1 的包，把 ACK 和 checksum 打包发送给 sender side。状态没有发生变化；&lt;/p&gt;
&lt;p&gt;状态是 wait for 1 from below 时，处理流程和上面是完全对称的。&lt;/p&gt;
&lt;h4 id=&#34;222-rdt22&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#222-rdt22&#34;&gt;#&lt;/a&gt; 2.2.2 rdt2.2&lt;/h4&gt;
&lt;p&gt;rdt2.2，与 rdt2.1 不同的是：接收端必须包括被 ACK 消息确认的 packet 的 sequence number，sender 必须检查被接收的 ACK 消息确认的 package 的 sn。也就是说接收端返回的 ACK 和 NAK 消息也带有 sn 序列号，只有符合当前状态的 sn 才可以做出 rdt2.1 的反应。也就是处于状态 1 时收到序号为 0 的包会发送 ACK 但不会把 data 接收而是丢弃了&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;rdt2.2.1.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;rdt2.2.2.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;23-rdt30&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#23-rdt30&#34;&gt;#&lt;/a&gt; 2.3 rdt3.0&lt;/h4&gt;
&lt;p&gt;现在要开始考虑链路层的传输会有丢包的情况，这是最可能发生的事情，所以现在的应用大多是 rdt3.0 的协议。&lt;/p&gt;
&lt;p&gt;伴随着这个问题产生的还有两个顾虑：如何检测丢包以及当丢包时需要做出的反应&lt;/p&gt;
&lt;p&gt;我们会把检测丢包和恢复重发的任务放在 sender side&lt;/p&gt;
&lt;p&gt;那么如何检测丢包呢？sender side 在一段固定的时间内没有收到发送的 package 的 ACK，就可以认为这个包丢失了，开始重传。如果发送的 package 没有丢失，只是在链路层中遭遇了拥塞导致延迟时间超过设定的 timeout，也会触发重发，这样就会导致 duplicate data packets。幸运的是，可以采用 rdt2.2 的序号机制来无视多余的重发包。&lt;/p&gt;
&lt;p&gt;具体流程可以看 FSM&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;rdt3.0sender.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-pipelined-reliable-data-transfer-protocols&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-pipelined-reliable-data-transfer-protocols&#34;&gt;#&lt;/a&gt; 3 Pipelined Reliable Data Transfer Protocols&lt;/h3&gt;
&lt;p&gt;stop-and-wait 类型的协议性能无法满足需求，使用流水线 rdt 协议能提高性能。&lt;/p&gt;
&lt;p&gt;流水线模式 sender 和 receiver 都可以发送多个 packet，不需要等待 ACK。为了实现这样的特性采用流水线技术。&lt;/p&gt;
&lt;p&gt;实现方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;sequence number 的范围可以增长，且每一个在传输的 packet 都有一个独特的 sn。&lt;/li&gt;
&lt;li&gt;sender 和 receiver 设立 buffer 用来发送或者接收多个包。sender 必须设立 buffer 来缓存没有 ACK 的包用来重发。receiver 也需要为接收的 packet 设立 buffer 来缓存&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;4-go-back-n-gbn&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-go-back-n-gbn&#34;&gt;#&lt;/a&gt; 4 Go-Back-N GBN&lt;/h3&gt;
&lt;p&gt;首先确定一点，GBN 协议是一个流水线 RDT 协议。但是，GBN 协议中 sender 会限制 buffer 中未 ACK 的 packet 的数量为 N。&lt;br&gt;
&lt;img data-src=&#34;GBN.png&#34; alt=&#34;alt text&#34;&gt;&lt;br&gt;
sn 的范围分为三部分。一是已经发送且 ACK 的 sn [0~base-1]，二是已经发送但是没有 ACK 的 sn [ base~nextseqnum-1]，第三是未发送的待分配的 sn [ nextseqnum~n-1]。第二和第三部分之和为 N。&lt;/p&gt;
&lt;p&gt;N 也被称为 window size；GBN 也被称为 sliding-window protocol。window size 是可以变化的，比如在 tcp 协议中，发生 congest 时会减小。sn 码在实际操作中是被封装在 section 中的，有位数限制。k 位的 sn 码最大为 2 的 k 次方 - 1。tcp 的 sn 码一共 32bits&lt;/p&gt;
&lt;p&gt;GBN 协议的 FSM 表示如下：&lt;br&gt;
&lt;img data-src=&#34;GBNsender.png&#34; alt=&#34;alt text&#34;&gt;&lt;br&gt;
sender 在 timeout 后，会从 base 开始重新一轮发包；如果某个 ACK 没收到，那么后面收到的 ACK 是不会更新 base 的，所以就会导致发了很多冗余的 packet。这是个问题。&lt;br&gt;
&lt;img data-src=&#34;GBNreceiver.png&#34; alt=&#34;alt text&#34;&gt;&lt;br&gt;
&lt;img data-src=&#34;GBNOp.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;4-selective-repeat-sr&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-selective-repeat-sr&#34;&gt;#&lt;/a&gt; 4 Selective Repeat SR&lt;/h3&gt;
&lt;p&gt;GBN 协议也是存在缺陷的，一个 GBN 协议包的出错或导致大量的包重发活动。SR 协议能够避免不必要的包重发通过让 sender 只重发那些被发送端认为是出错的丢包的 packet。&lt;/p&gt;
&lt;p&gt;为解决这个问题，SR 升级了 sn 码的属性，在【base~nextseqnum 中允许存在 ack 的 sn 并且做上标记】。SR 的 receiver 会承认 out-order 的 packet 并且发送 ACK，sender 也会接收这些 ACK。但是 receiver 的 buffer 仍然会保留这些被接受的 packet 直到比他的 sn 小的 miss 的 packet 都被接收到才不保留。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;SRsn.png&#34; alt=&#34;alt text&#34;&gt;&lt;br&gt;
rcv_base 取决于期望接收到的 packet 的 sn，也就是被接受且发送 ack 的下一个 sn&lt;br&gt;
&lt;img data-src=&#34;SRsendereventandactor.png&#34; alt=&#34;alt text&#34;&gt;&lt;br&gt;
&lt;img data-src=&#34;SRreceivereventandactor.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt;
&lt;p&gt;SR 和 GNB 的不同在于，所有的接收到 packet 都会被打上 ack，base 会跳跃到最小的未被接收到的 sn 上，可能一跳一大段！但是 GBN 就不行，他没有处理 out-order 的 packet 所以一旦丢包 base 就会卡住，并且 timeout 后又从 base 开始发包一步一步的递增。SR 的 base 是具有跳跃性的！&lt;/p&gt;
&lt;h4 id=&#34;42-todosr的lack&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#42-todosr的lack&#34;&gt;#&lt;/a&gt; 4.2 TODO：SR 的 lack&lt;/h4&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2024/06/07/%E8%AE%A1%E7%BD%91--%E4%BC%A0%E8%BE%93%E5%B1%82%E9%87%8D%E7%82%B9%E5%A4%8D%E4%B9%A0/</guid>
            <title>计网--传输层重点复习</title>
            <link>http://example.com/2024/06/07/%E8%AE%A1%E7%BD%91--%E4%BC%A0%E8%BE%93%E5%B1%82%E9%87%8D%E7%82%B9%E5%A4%8D%E4%B9%A0/</link>
            <category>计算机网络</category>
            <pubDate>Fri, 07 Jun 2024 10:48:31 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;重点principles-of-reliable-data-transfer&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#重点principles-of-reliable-data-transfer&#34;&gt;#&lt;/a&gt; 重点：Principles of Reliable Data Transfer&lt;/h2&gt;
&lt;h3 id=&#34;1-可靠数据传输服务模型搭建和服务实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-可靠数据传输服务模型搭建和服务实现&#34;&gt;#&lt;/a&gt; 1 可靠数据传输服务模型搭建和服务实现&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;提供服务：主机通过应用层在某个进程发送数据到传输层，数据通过可靠的通道 channel 到达另一个主机的应用层的某个接收进程。&lt;/li&gt;
&lt;li&gt;服务实现：主机发送进程调用 rdt_send () 发送数据到传输层，传输层通过可靠的数据传输协议，使用 udt_send () 发送到链路层，经过不可靠的链路传输到目标主机下的传输层然后调用 rdt_rcv () 进入传输层，最终进入应用层进程。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;reliable data transfer protocol&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;上面提到的可靠的数据传输协议，就是实现上述的服务的过程。比如 TCP 就是一种可靠的数据传输协议。&lt;/p&gt;
&lt;h3 id=&#34;2-建立一个可靠的数据传输协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-建立一个可靠的数据传输协议&#34;&gt;#&lt;/a&gt; 2 建立一个可靠的数据传输协议&lt;/h3&gt;
&lt;p&gt;这里我们会循序渐进的介绍几种 rdt，每一种都是前一种的完善和升级。&lt;/p&gt;
&lt;h4 id=&#34;21-rdt10&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#21-rdt10&#34;&gt;#&lt;/a&gt; 2.1 rdt1.0&lt;/h4&gt;
&lt;p&gt;发送端和接送端各有一个只有一个状态的 FSM，当接收到应用层发送来的数据时，打包成 package 发送到链路层；接收端从链路层接收到 package 解包成 data 发送给上层应用层。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;rdt1.0.png&#34; alt=&#34;rdt1.0&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;22-rdt20&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#22-rdt20&#34;&gt;#&lt;/a&gt; 2.2 rdt2.0&lt;/h4&gt;
&lt;p&gt;rdt1.0 是建立在链路层的传输通道不会发生丢包的基础上的，这是不可能的事情，包传递的过程中发生位错误是非常常见的。&lt;/p&gt;
&lt;p&gt;rdt2.0 是建立在发送的 package 一定会被接收到但是允许发生 bit 错误。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;positive acknowledgements：确认收到消息&lt;/li&gt;
&lt;li&gt;negative acknowledgements：未收到请求重发消息&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用这两个信息可以使得 sender 针对这两个情况进行不同的动作，这是 rdt2.0 中非常重要的基础。这种可能重传的机制被称为 ARQ&lt;/p&gt;
&lt;p&gt;ARQ 协议需要三个额外的协议来处理位错误的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Error detection 错误检测&lt;/li&gt;
&lt;li&gt;Receiver feedback 接收端反馈&lt;/li&gt;
&lt;li&gt;Retransmission 重传&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来正式介绍 rdt2.0，首先来看他的 FSM，与 rdt1.0 不同的是，rdt2.0 的 sender side 的 FSM 有两个状态，receiver side 的 FSM 只有一个状态&lt;/p&gt;
&lt;p&gt;先看 sender side：两个状态分别为 wait for call from above（1） 和 wait for ack or nak（2）。当处于 1 状态时，当 rdt_send (data) 消息到来时，执行  &lt;code&gt;sndpkt = make_pkg(data, checksum); udt_send(sndpkt);&lt;/code&gt;  进入状态 2；当处于状态 2 时，如果收到 rdt_rcv (rcvpkt) &amp;amp;&amp;amp; isNAK (rcvpkt), 执行 &lt;code&gt;udt_send(sndpkt)&lt;/code&gt;  重新发包；如果收到 rdt_rcv (rcvpkt) &amp;amp;&amp;amp; isACK (rcvpkt), 进入状态（1）&lt;/p&gt;
&lt;p&gt;再看 receiver side：检查到包损坏，发送 NAK；检查到包完好，发送 ACK 并把 package 解包的 data 发送到应用层。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;rdt2.0.png&#34; alt=&#34;rdt2.0&#34;&gt;&lt;/p&gt;
&lt;p&gt;看上去没什么问题，但实际上有个致命的错误！我们无法保证 ACK 或者 NAK 的位上没有发生损坏。所以我们仍然需要在包含 ACK 后 NAK 的包上添加 checksum。如果确认损坏，我们又该如何处理这种情况呢？&lt;/p&gt;
&lt;p&gt;解决方法：&lt;br&gt;
在 data package 中添加 sequence number 序列号，这样 receiver 就可以知道接收的包是不是重发的。&lt;/p&gt;
&lt;p&gt;举个例子：stop-and-wait protocol，接收的 package 的 sn 之前遇到过则是重发的，不一样或者增加则是新发的&lt;/p&gt;
&lt;p&gt;应用这个解决方法，rdt2.1 产生了，能够很好的解决 ACKNAK 消息丢失的问题。&lt;/p&gt;
&lt;h4 id=&#34;221-rdt21&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#221-rdt21&#34;&gt;#&lt;/a&gt; 2.2.1 rdt2.1&lt;/h4&gt;
&lt;p&gt;sender side：&lt;br&gt;
&lt;img data-src=&#34;rdt2.1.png&#34; alt=&#34;rdt2.1&#34;&gt;&lt;/p&gt;
&lt;p&gt;初始状态是 wait for call 0 from above，接收到上层发来的 data，和 0（sn）、checksum 一起打包发送给链路层，进入状态 wait for ACK or NAK 0。&lt;/p&gt;
&lt;p&gt;如果接收到反馈的 package，查看发生了损坏或者是 NAK package 重发包；如果没有发生损坏或者是 ACK 进入下一个状态：wait for call 1 from above。&lt;/p&gt;
&lt;p&gt;接收到上层发来的 data，和&lt;strong&gt; 1&lt;/strong&gt;（sn）、checksum 一起打包发送给链路层，进入状态 wait for ACK or NAK 1。&lt;/p&gt;
&lt;p&gt;如果接收到反馈的 package，查看发生了损坏或者是 NAK package 重发包；如果没有发生损坏或者是 ACK 进入下一个状态：wait for call 0 from above。完成闭环。&lt;/p&gt;
&lt;p&gt;这个 FSM 用到的 sn 码只有 0 和 1。&lt;/p&gt;
&lt;p&gt;receiver side：&lt;br&gt;
&lt;img data-src=&#34;rdt2.1.1.png&#34; alt=&#34;rdt2.1.1&#34;&gt;&lt;/p&gt;
&lt;p&gt;只有两个状态。&lt;/p&gt;
&lt;p&gt;初始状态是 wait for 0 from below，接收到链路层发来的包，检查包没有发生错误并且 sn 是 0，解压包把 data 向上层传递。把 ACK 消息&lt;strong&gt;和 checksum&lt;/strong&gt; 打包发送给 sender side，进入下一个状态 wait for 1 from below；&lt;/p&gt;
&lt;p&gt;如果接收到链路层发来的包，检查包发生错误，则把 NAK 和 checksum 打包发送给 receiver side； 如果接收到链路层发来的包，检查包没错误但是是序号为 1 的包，把 ACK 和 checksum 打包发送给 sender side。状态没有发生变化；&lt;/p&gt;
&lt;p&gt;状态是 wait for 1 from below 时，处理流程和上面是完全对称的。&lt;/p&gt;
&lt;h4 id=&#34;222-rdt22&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#222-rdt22&#34;&gt;#&lt;/a&gt; 2.2.2 rdt2.2&lt;/h4&gt;
&lt;p&gt;rdt2.2，与 rdt2.1 不同的是：接收端必须包括被 ACK 消息确认的 packet 的 sequence number，sender 必须检查被接收的 ACK 消息确认的 package 的 sn。也就是说接收端返回的 ACK 和 NAK 消息也带有 sn 序列号，只有符合当前状态的 sn 才可以做出 rdt2.1 的反应。也就是处于状态 1 时收到序号为 0 的包会发送 ACK 但不会把 data 接收而是丢弃了&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;rdt2.2.1.png&#34; alt=&#34;rdt2.2.1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;rdt2.2.2.png&#34; alt=&#34;rdt2.2.2&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;23-rdt30&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#23-rdt30&#34;&gt;#&lt;/a&gt; 2.3 rdt3.0&lt;/h4&gt;
&lt;p&gt;现在要开始考虑链路层的传输会有丢包的情况，这是最可能发生的事情，所以现在的应用大多是 rdt3.0 的协议。&lt;/p&gt;
&lt;p&gt;伴随着这个问题产生的还有两个顾虑：如何检测丢包以及当丢包时需要做出的反应&lt;/p&gt;
&lt;p&gt;我们会把检测丢包和恢复重发的任务放在 sender side&lt;/p&gt;
&lt;p&gt;那么如何检测丢包呢？sender side 在一段固定的时间内没有收到发送的 package 的 ACK，就可以认为这个包丢失了，开始重传。如果发送的 package 没有丢失，只是在链路层中遭遇了拥塞导致延迟时间超过设定的 timeout，也会触发重发，这样就会导致 duplicate data packets。幸运的是，可以采用 rdt2.2 的序号机制来无视多余的重发包。&lt;/p&gt;
&lt;p&gt;具体流程可以看 FSM&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;rdt3.0sender.png&#34; alt=&#34;rdt3.0sender&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-pipelined-reliable-data-transfer-protocols&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-pipelined-reliable-data-transfer-protocols&#34;&gt;#&lt;/a&gt; 3 Pipelined Reliable Data Transfer Protocols&lt;/h3&gt;
&lt;p&gt;stop-and-wait 类型的协议性能无法满足需求，使用流水线 rdt 协议能提高性能。&lt;/p&gt;
&lt;p&gt;流水线模式 sender 和 receiver 都可以发送多个 packet，不需要等待 ACK。为了实现这样的特性采用流水线技术。&lt;/p&gt;
&lt;p&gt;实现方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;sequence number 的范围可以增长，且每一个在传输的 packet 都有一个独特的 sn。&lt;/li&gt;
&lt;li&gt;sender 和 receiver 设立 buffer 用来发送或者接收多个包。sender 必须设立 buffer 来缓存没有 ACK 的包用来重发。receiver 也需要为接收的 packet 设立 buffer 来缓存&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;4-go-back-n-gbn&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-go-back-n-gbn&#34;&gt;#&lt;/a&gt; 4 Go-Back-N GBN&lt;/h3&gt;
&lt;p&gt;首先确定一点，GBN 协议是一个流水线 RDT 协议。但是，GBN 协议中 sender 会限制 buffer 中未 ACK 的 packet 的数量为 N。&lt;br&gt;
&lt;img data-src=&#34;GBN.png&#34; alt=&#34;GBN&#34;&gt;&lt;br&gt;
sn 的范围分为三部分。一是已经发送且 ACK 的 sn [0~base-1]，二是已经发送但是没有 ACK 的 sn [ base~nextseqnum-1]，第三是未发送的待分配的 sn [ nextseqnum~n-1]。第二和第三部分之和为 N。&lt;/p&gt;
&lt;p&gt;N 也被称为 window size；GBN 也被称为 sliding-window protocol。window size 是可以变化的，比如在 tcp 协议中，发生 congest 时会减小。sn 码在实际操作中是被封装在 section 中的，有位数限制。k 位的 sn 码最大为 2 的 k 次方 - 1。tcp 的 sn 码一共 32bits&lt;/p&gt;
&lt;p&gt;GBN 协议的 FSM 表示如下：&lt;br&gt;
&lt;img data-src=&#34;GBNsender.png&#34; alt=&#34;GBNsender&#34;&gt;&lt;br&gt;
sender 在 timeout 后，会从 base 开始重新一轮发包；如果某个 ACK 没收到，那么后面收到的 ACK 是不会更新 base 的，所以就会导致发了很多冗余的 packet。这是个问题。&lt;br&gt;
&lt;img data-src=&#34;GBNreceiver.png&#34; alt=&#34;GBNreceiver&#34;&gt;&lt;br&gt;
&lt;img data-src=&#34;GBNOp.png&#34; alt=&#34;GBNOp&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;4-selective-repeat-sr&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-selective-repeat-sr&#34;&gt;#&lt;/a&gt; 4 Selective Repeat SR&lt;/h3&gt;
&lt;p&gt;GBN 协议也是存在缺陷的，一个 GBN 协议包的出错或导致大量的包重发活动。SR 协议能够避免不必要的包重发通过让 sender 只重发那些被发送端认为是出错的丢包的 packet。&lt;/p&gt;
&lt;p&gt;为解决这个问题，SR 升级了 sn 码的属性，在【base~nextseqnum 中允许存在 ack 的 sn 并且做上标记】。SR 的 receiver 会承认 out-order 的 packet 并且发送 ACK，sender 也会接收这些 ACK。但是 receiver 的 buffer 仍然会保留这些被接受的 packet 直到比他的 sn 小的 miss 的 packet 都被接收到才不保留。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;SRsn.png&#34; alt=&#34;SRsn&#34;&gt;&lt;br&gt;
rcv_base 取决于期望接收到的 packet 的 sn，也就是被接受且发送 ack 的下一个 sn&lt;br&gt;
&lt;img data-src=&#34;SRsendereventandactor.png&#34; alt=&#34;SRsendereventandactor&#34;&gt;&lt;br&gt;
&lt;img data-src=&#34;SRreceivereventandactor.png&#34; alt=&#34;SRreceivereventandactor&#34;&gt;&lt;/p&gt;
&lt;p&gt;SR 和 GNB 的不同在于，所有的接收到 packet 都会被打上 ack，base 会跳跃到最小的未被接收到的 sn 上，可能一跳一大段！但是 GBN 就不行，他没有处理 out-order 的 packet 所以一旦丢包 base 就会卡住，并且 timeout 后又从 base 开始发包一步一步的递增。SR 的 base 是具有跳跃性的！&lt;/p&gt;
&lt;h4 id=&#34;42-todosr的lack&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#42-todosr的lack&#34;&gt;#&lt;/a&gt; 4.2 TODO：SR 的 lack&lt;/h4&gt;
&lt;h2 id=&#34;tcp传输协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp传输协议&#34;&gt;#&lt;/a&gt; TCP 传输协议&lt;/h2&gt;
&lt;h3 id=&#34;tcp-socket&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp-socket&#34;&gt;#&lt;/a&gt; TCP socket&lt;/h3&gt;
&lt;p 源ip地址、源端口号、目标ip地址、目标端口号&gt;TCP socket 表示使用四元组:&lt;/p&gt;
&lt;h3 id=&#34;tcp-connection&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp-connection&#34;&gt;#&lt;/a&gt; TCP Connection&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;connect-oriented：面向连接，相互发送预备报文段，以确保数据传输的参数。&lt;/li&gt;
&lt;li&gt;full-duplex service：全双工服务，如果一台主机上的进程 A 与另一台主机上的进程 B 存在一条 TCP 连接，那么应用层的数据就可以在进程 B 流向进程 A 的同时，也从进程 A 流向进程 B；&lt;/li&gt;
&lt;li&gt;point-to-point：单个接收方之间的链接&lt;/li&gt;
&lt;li&gt;three-way handshake：三次握手，&lt;strong&gt;客户端先发送一个特殊的 TCP 报文，服务器用另一个特殊的报文来响应，最后客户再用第三个特殊报文来作为响应。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;客户进程通过使用 socket 套接字来将要发送的数据写入 send buffer，os 会把 send buffer 里的数据包装成 ip datagram，在由链路层打包成 frame 发送出去，目标服务器接受到后逐层拆解后把数据写入 TCP receive buffer ，再由 Socket 来读取数据。&lt;/p&gt;
&lt;p&gt;TCP 可以从 buffer 中取出放入的 segment 中的数据最大的数量限制于 MSS（最大报文段长度）, 而 MSS 则由 MTU（链路层的最大传输单元）决定。&lt;/p&gt;
&lt;h3 id=&#34;tcp-segment-structure-报文段结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp-segment-structure-报文段结构&#34;&gt;#&lt;/a&gt; TCP segment structure 报文段结构&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;重点结构成员：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sequence Number：32bit 的序号字段&lt;/li&gt;
&lt;li&gt;Acknowledge Number：32bit 的确认号字段&lt;/li&gt;
&lt;li&gt;Receive Windows：16bit 的接受窗字段，用于控制流量&lt;/li&gt;
&lt;li&gt;Header Length: 4bit 的 header 长度字段，用于指示以 32bit 为单位的 TCP 的头部的长度。&lt;/li&gt;
&lt;li&gt;Option: 动态调节&lt;/li&gt;
&lt;li&gt;6bit 的标志字段（flag field）：
&lt;ul&gt;
&lt;li&gt;ACK：确认字段中的值是否有效；&lt;/li&gt;
&lt;li&gt;RST、SYN、FIN：用于连接建立和拆除；&lt;/li&gt;
&lt;li&gt;CWR、ECE：在明确拥塞通过中使用&lt;/li&gt;
&lt;li&gt;PSH：被置位时，指示接收方立即将数据交给上层；&lt;/li&gt;
&lt;li&gt;URG：指示 segment 中存放着被发送端上层实体设置为 “紧急” 的数据；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Urgent Data Point: 16bit 的紧急数据指针字段，指出紧急数据的最后一个字节；&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;segment-number-and-acknowledgement-number&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#segment-number-and-acknowledgement-number&#34;&gt;#&lt;/a&gt; segment number and acknowledgement number&lt;/h4&gt;
&lt;p&gt;报文段的序号是该报文段首字节（data）的字节流编号，而不是建立在传送的报文段的序列上。&lt;/p&gt;
&lt;p&gt;什么是字节流编号呢？&lt;/p&gt;
&lt;p&gt;假设现在 A 主机要发送一串 50000 字节的 data 到 B 主机，但是 MSS 为 1000 字节，所以这个数据就需要拆解为 50 个 size 为 1000 字节的 segment 来多次发送，这 50000 字节流会被编号，0~49999，所以第一个 segment 的第一个字节的字节流编号就是 0，第二个 segment 的第一个字节流编号就是 1000，依次类推。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;主机 A 填充进报文段的确认号是主机 A 希望从主机 B 接收到的下一个字节的字节流序号！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;由于网络中 TCP 的传输是不确定的，所以被拆分成多个 TCP 的数据不可能按原先的顺序被接收方接收，所以需要 segment number 在确定子数据包的顺序。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;但是光有 segment number 是不够的， 因为在网络中不仅有发送方，还有接收方也会发送，TCP 是全双工的。所以需要确认号。这样就能保证双方接收的 data 都能按照正常的顺序进行排列&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;必考重点rdt可靠的数据传输&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#必考重点rdt可靠的数据传输&#34;&gt;#&lt;/a&gt; 必考重点：RDT 可靠的数据传输&lt;/h4&gt;
&lt;p&gt;先来看一段 TCP 发送的代码&lt;br&gt;
 &lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* Assume sender is not constrained by TCP flow or congestion control, that data from above is less than MSS in size, and that data transfer is in one direction only. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;NextSeqNum=InitialSeqNumber&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;SendBase=InitialSeqNumber&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;loop (forever) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;switch&lt;/span&gt;(event)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        event: data received from application above&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            create TCP segment with sequence number NextSeqNum&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (timer currently not running)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            	start timer&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            pass segment to IP&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            NextSeqNum=NextSeqNum+length(data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        event: timer timeout&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            retransmit not-yet-acknowledged segment with smallest sequence number&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            start timer&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        event: ACK received, with ACK field value of y&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;(y &amp;gt; SendBase)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                SendBase=y&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (there are currently any not-yet-acknowledged segments)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                	start timer&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    		&lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;span class=&#34;comment&#34;&gt;/* end of loop forever */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;设置一个循环监听事件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当从上层应用接收到数据时：&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;创建一个 TCP 数据段，序列号为 NextSeqNum。&lt;/li&gt;
&lt;li&gt;如果定时器未启动，则启动定时器。&lt;/li&gt;
&lt;li&gt;将数据段传递给 IP 层进行发送。&lt;/li&gt;
&lt;li&gt;更新 NextSeqNum 为 NextSeqNum + length (data)，表示下一个将要发送的数据段的序列号。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;当定时器超时时：&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;重传尚未确认的最小序列号的数据段（最早发送但未被确认的数据段）。&lt;/li&gt;
&lt;li&gt;重启定时器。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;当接收到 ACK 时：&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;检查 ACK 字段的值 y 是否大于 SendBase。&lt;/li&gt;
&lt;li&gt;如果 y 大于 SendBase，则更新 SendBase 为 y，表示所有序列号小于 y 的数据段都已经被确认。&lt;/li&gt;
&lt;li&gt;如果仍然有未被确认的数据段，则重启定时器。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;超时间隔加倍&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当发生超时事件时，TCP 重传时都会将下一次的超时间隔设为先前值的两倍；当发生其他两个事件计时器重启时，TimeoutInterval 由最近的 EstimatedRTT 值与 DevRTT 值推算得到。这种修改提供了一个形式受限的拥塞控制。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;快速重传&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;duplicate ACK：对一个已经发送过的 segment 进行再次的确认，重发一次 ack&lt;/p&gt;
&lt;p&gt;当比期望 segment number 的失序报文段（就是发送的 segment number 和上一个 ACK 不一致）到达时，接收方立刻发送冗余 ACK（duplicate ACK），指示下一个期望字节的序号。如果 TCP 发送方接收到对相同数据的&lt;strong&gt;三个&lt;/strong&gt; duplicate ACK TCP 就执行快速重传，即在报文段的定时器&lt;strong&gt;过期之前&lt;/strong&gt;重传丢失的报文段，&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;选择确认 selective acknowledgement&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;接收端非常容易接收到 out-of-order 的 segments，那还能用当前接收到的最小 ack 作为 sendbase 吗&lt;/p&gt;
&lt;p&gt;所以就需要选择确认：允许 TCP 接收端有选择的确认那些失序的报文段而不是收到什么确认什么，不是积累地确认最后一个正确接收的有序报文。&lt;/p&gt;
&lt;p&gt;如何确定当前主机应该发送的 ACK 的值？&lt;/p&gt;
&lt;p&gt;有以下几个原则：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;累积原则：ACK 如果为 n，则表示主机确认接收到 0~n-1 的序号的 segment，所以 ACK 可以是最小的未确认 segment 序号；&lt;/li&gt;
&lt;li&gt;期望下一个发送：ACK 被主机视为希望下一个发送的 segment，在一些简单的 TCP 发送程序，ACK 赋值给 sendBase，用来确定每次定时器到期时第一个发送的 segment；&lt;/li&gt;
&lt;li&gt;丢包和延迟：仍然发送上一个 ACK，被称为 duplicate ACK，发送超过三次触发快速重传。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;流量控制-flow-control&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#流量控制-flow-control&#34;&gt;#&lt;/a&gt; 流量控制 Flow Control&lt;/h4&gt;
&lt;p&gt;发送端需要维护一个 receive window 来控制流量。receive window 用于给发送者一个指示，该接收方还有多少可用的缓存空间。因为 TCP 是全双工通信（发送端同时也是接收端，接收端同时也是发送端），所以 link 两端的 sender 都需要维护一个 receive window。&lt;/p&gt;
&lt;p&gt;RcvBuffer：接收缓存的总大小&lt;br&gt;
 rwnd：可用的接收缓存的大小&lt;/p&gt;
&lt;h4 id=&#34;tcp-connect-management&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp-connect-management&#34;&gt;#&lt;/a&gt; TCP Connect Management&lt;/h4&gt;
&lt;h5 id=&#34;三次握手连接-three-way-handshake&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三次握手连接-three-way-handshake&#34;&gt;#&lt;/a&gt; 三次握手连接 three-way handshake&lt;/h5&gt;
&lt;p&gt;&lt;img data-src=&#34;%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.png&#34; alt=&#34;三次握手&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;四次握手关闭-four-way-handshake&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#四次握手关闭-four-way-handshake&#34;&gt;#&lt;/a&gt; 四次握手关闭 four-way handshake&lt;/h5&gt;
&lt;p&gt;&lt;img data-src=&#34;%E5%9B%9B%E6%AC%A1%E6%8F%A1%E6%89%8B.png&#34; alt=&#34;四次握手&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;tcp-state&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp-state&#34;&gt;#&lt;/a&gt; TCP State&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;客户端 TCP 经典状态&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;客户端应用初始化一个 TCP 连接，发动 SYN&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SYN_SENT： Receive SYN &amp;amp; ACK，send ACK&lt;/li&gt;
&lt;li&gt;ESTABLISHED：Send FIN&lt;br&gt;
Client application initiates close connect&lt;/li&gt;
&lt;li&gt;FIN_WAIT_1：Receive ACK， send nothing&lt;/li&gt;
&lt;li&gt;FIN_WAIT_2：Receive FIN，send ACK&lt;/li&gt;
&lt;li&gt;TIME_WAIT：wait 30 seconds&lt;/li&gt;
&lt;li&gt;CLOSED&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;服务端经典状态&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Server application creates a listen socket&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LiSTEN: Receive SYN, send SYN &amp;amp; ACK&lt;/li&gt;
&lt;li&gt;SYN_RCVD: Receive ACK,  send nothing&lt;/li&gt;
&lt;li&gt;ESTABLISHED: Receive FIN, send ACK&lt;/li&gt;
&lt;li&gt;CLOSE_WAIT: Send FIN&lt;/li&gt;
&lt;li&gt;LAST_ACK: Receive ACK, send nothing&lt;/li&gt;
&lt;li&gt;CLOSED&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;多路复用与多路分解multiplexing-and-demultiplexing&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多路复用与多路分解multiplexing-and-demultiplexing&#34;&gt;#&lt;/a&gt; 多路复用与多路分解（Multiplexing and Demultiplexing）&lt;/h4&gt;
&lt;p&gt;运输层的多路复用与多路分解，就是多主机上的进程之间（A 主机的进程 1 与 B 主机的进程 2）的运输服务。一个进程有一个或多个套接字（socket），它相当于从网络向进程传递数据和从进程向网络传递数据的门户。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Multiplexing：在源主机从不同 socket 中收集 data blocks，并为每个 data block 封装首部信息（header）从而生成 segment，然后把 segment 传递到网络层；&lt;/li&gt;
&lt;li&gt;Demultiplexing：在接收端，运输层会检查这些字段，标识处接收 socket，进而将 segment 定向到该 socket，即把运输层 segment 的 data 交付给正确的 socket（进程与网络的门户，也就是设备的端口）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;multiplexing 要求：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;socket 有唯一的标识符&lt;/li&gt;
&lt;li&gt;segment 的 header 中有用来指示交付给的 socket 的特殊字段&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这些特殊字段就是源端口号字段和目的端口号字段&lt;/p&gt;
&lt;h4 id=&#34;必考重点tcp的拥塞控制-principles-of-congestion-control&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#必考重点tcp的拥塞控制-principles-of-congestion-control&#34;&gt;#&lt;/a&gt; 必考重点：TCP 的拥塞控制 Principles of Congestion Control&lt;/h4&gt;
&lt;h5 id=&#34;拥塞原因和代价&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#拥塞原因和代价&#34;&gt;#&lt;/a&gt; 拥塞原因和代价&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;当分组的到达速率接近链路容量时，分组经历巨大的排队时延；&lt;/li&gt;
&lt;li&gt;发送方在遇到大时延时所进行的不必要重传会引起路由器利用其链路带宽来转发不必要的分组副本；&lt;/li&gt;
&lt;li&gt;当一个分组沿一条路径被丢弃时，每个上游路由器用于转发该分组到丢弃该分组而使用的传输容量最终被浪费掉；&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;拥塞控制方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#拥塞控制方法&#34;&gt;#&lt;/a&gt; 拥塞控制方法&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;end-to-end congestion control&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;TCP segment 丢失意味着 网络拥塞，TCP 会减低窗口大小（cwnd、rwnd）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;network-assisted congestion control&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;网络层中的路由器会返回关于链路是否发生 congest 的信息给主机。下面会详细介绍一个网络辅助拥塞控制算法的应用。&lt;/p&gt;
&lt;h4 id=&#34;重点来叻tcp拥塞控制-congestion-control&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#重点来叻tcp拥塞控制-congestion-control&#34;&gt;#&lt;/a&gt; 重点来叻：TCP 拥塞控制 Congestion Control&lt;/h4&gt;
&lt;p&gt;运行在发送方的 TCP 拥塞控制机制跟踪一个额外的变量，即 congestion window（cwnd）。它规定了一个 TCP 发送方能向网络中发送流量的最大速率，用来限制主机发送流量，如果主机知道自己和目的地之间存在 congest，会降低发送的 rate&lt;/p&gt;
&lt;p&gt;发送方未确认的数据量不会超过 cwnd 和 rwnd 的最小值。&lt;/p&gt;
&lt;p&gt;cwnd 是动态变化的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个丢失的报文段表意味着拥塞，因此当丢失报文段时应当降低 TCP 发送方的速率；&lt;/li&gt;
&lt;li&gt;一个确认报文段指示该网络正在向接收方交付发送方的报文段，因此，当对先前未确认报文段的确认到达时，能够增加发送方的速率；&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;tcp拥塞控制算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp拥塞控制算法&#34;&gt;#&lt;/a&gt; TCP 拥塞控制算法&lt;/h5&gt;
&lt;p&gt;算法包括三个部分：&lt;strong&gt;slow-start、congestion avoidance、fast recovery&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;slow-start：&lt;br&gt;
在慢启动状态下，cwnd 的值以 1 个 MSS 开始并且每当传输的 segment 首次被确认就增加 1 个 MSS。&lt;/li&gt;
&lt;li&gt;如果存在一个由超时指示的丢包事件，TCP 发送方将 cwnd 设置为 1 并重新开始慢启动过程。它还将第二状态变量 ssthresh（慢启动阈值）设置为 cwnd/2&lt;/li&gt;
&lt;li&gt;一旦进入拥塞避免状态，cwnd 的值大约是上次遇到拥塞时的值的一半，即距离拥塞可能并不遥远；在任意状态冗余 ACK 达到 3 个就会进入快速恢复状态的缺失报文段。&lt;br&gt;
&lt;img data-src=&#34;%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2%E6%9C%BA.png&#34; alt=&#34;拥塞控制算法状态转换机&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2024/05/27/%E8%AE%A1%E7%BD%91%E5%A4%8D%E4%B9%A0%E9%87%8D%E7%82%B9/</guid>
            <title>计网复习重点</title>
            <link>http://example.com/2024/05/27/%E8%AE%A1%E7%BD%91%E5%A4%8D%E4%B9%A0%E9%87%8D%E7%82%B9/</link>
            <category>计算机网络</category>
            <pubDate>Mon, 27 May 2024 10:48:31 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;tcp-&amp;#x4F20;&amp;#x8F93;&amp;#x5C42;&amp;#x5B57;&amp;#x8282;&amp;#x6D41;&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp-&amp;#x4F20;&amp;#x8F93;&amp;#x5C42;&amp;#x5B57;&amp;#x8282;&amp;#x6D41;&#34;&gt;#&lt;/a&gt; TCP &amp;#x4F20;&amp;#x8F93;&amp;#x5C42;&amp;#x5B57;&amp;#x8282;&amp;#x6D41;&lt;/h2&gt;
&lt;p&gt;&amp;#x8003;&amp;#x5BDF;&amp;#x4E00;&amp;#x4E2A;&amp;#x5F88;&amp;#x957F;&amp;#x7684;&amp;#x6D88;&amp;#x606F;&amp;#xFF0C;&amp;#x5B57;&amp;#x8282;&amp;#x6D41;&amp;#xFF0C;&amp;#x91CC;&amp;#x9762;&amp;#x5206;&amp;#x4E3A;&amp;#x51E0;&amp;#x4E2A; segment &amp;#xFF0C;&amp;#x5982;&amp;#x4F55;&amp;#x53BB;&amp;#x5B9A;&amp;#x4E49;&amp;#x91CC;&amp;#x9762;&amp;#x7684; segment&amp;#xFF0C;&amp;#x540E;&amp;#x9762;&amp;#x591A;&amp;#x5C11;&amp;#x4E2A;&amp;#x5B57;&amp;#x8282;&amp;#x53D8;&amp;#x6210;&amp;#x4E00;&amp;#x4E2A; segment&amp;#xFF0C;&amp;#x6C42;&amp;#x89E3;&amp;#x6BCF;&amp;#x4E2A; segment &amp;#x7684; number&amp;#xFF0C;&amp;#x544A;&amp;#x8BC9;&amp;#x4F60;&amp;#x90E8;&amp;#x5206; segment &amp;#x7684;&amp;#x53C2;&amp;#x6570;&amp;#xFF0C;&amp;#x63A8;&amp;#x5BFC;&amp;#x51FA;&amp;#x5176;&amp;#x4ED6; segment &amp;#x7684;&amp;#x53C2;&amp;#x6570;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;tcp &amp;#x7684; rdt &amp;#x5FC5;&amp;#x8003;&amp;#xFF1A;&amp;#x544A;&amp;#x8BC9;&amp;#x6761;&amp;#x4EF6;&amp;#xFF0C;&amp;#x5982; A &amp;#x5411; B &amp;#x53D1;&amp;#x9001;&amp;#x4E86;&amp;#x51E0;&amp;#x4E2A;&amp;#xFF0C;&amp;#x4E22;&amp;#x4E86;&amp;#x4E00;&amp;#x90E8;&amp;#x5206;&amp;#xFF0C;&amp;#x5728;&amp;#x4E0D;&amp;#x540C;&amp;#x7684;&amp;#x60C5;&amp;#x51B5;&amp;#x4E0B;&amp;#xFF0C;B &amp;#x7684; ACK &amp;#x5E94;&amp;#x8BE5;&amp;#x600E;&amp;#x4E48;&amp;#x54CD;&amp;#x5E94;&amp;#xFF1F;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tcp &amp;#x7684;&amp;#x62E5;&amp;#x585E;&amp;#x63A7;&amp;#x5236;&amp;#xFF0C;&amp;#x5FEB;&amp;#x901F;&amp;#x91CD;&amp;#x4F20;&amp;#x7B49;&amp;#xFF0C;&amp;#x4E0D;&amp;#x540C;&amp;#x60C5;&amp;#x51B5;&amp;#x4E0B;&amp;#x4F1A;&amp;#x6709;&amp;#x4EC0;&amp;#x4E48;&amp;#x8868;&amp;#x73B0;&amp;#xFF0C;&amp;#x4E00;&amp;#x6B21;&amp;#x53EA;&amp;#x80FD;&amp;#x53D1;&amp;#x4E00;&amp;#x4E2A; MSS 1248 &amp;#x975E;&amp;#x7EBF;&amp;#x6027;&amp;#x589E;&amp;#x957F;&amp;#xFF0C;&amp;#x6BCF;&amp;#x4E2A;&amp;#x8F6E;&amp;#x6B21; double&amp;#xFF0C;&amp;#x7136;&amp;#x540E;&amp;#x7EBF;&amp;#x6027;&amp;#x589E;&amp;#x957F;&amp;#x3002;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RDP&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;control&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ip&amp;#x5C42;&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ip&amp;#x5C42;&#34;&gt;#&lt;/a&gt; IP &amp;#x5C42;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&amp;#x7EC4;&amp;#x7F51;&lt;/strong&gt;&amp;#xFF1A;&amp;#x5982;&amp;#x4F55;&amp;#x4F7F;&amp;#x7528;&amp;#x8DEF;&amp;#x7531;&amp;#x5668;&amp;#x548C;&amp;#x4E3B;&amp;#x673A;&amp;#x914D;&amp;#x4E2A;&amp;#x5B50;&amp;#x7F51; subnet&amp;#xFF0C;&amp;#x4F60;&amp;#x9700;&amp;#x8981;&amp;#x77E5;&amp;#x9053;&amp;#x5982;&amp;#x4F55;&amp;#x5206;&amp;#x914D; ip&amp;#xFF0C;&amp;#x786E;&amp;#x5B9A;&amp;#x4E3B;&amp;#x673A;&amp;#x7684;&amp;#x7F51;&amp;#x5173;&amp;#xFF1B;&amp;#x548C;&amp;#x94FE;&amp;#x8DEF;&amp;#x5C42;&amp;#x4E00;&amp;#x8D77;&amp;#x8003;&amp;#x3002;&lt;strong&gt;routing&lt;/strong&gt;&amp;#xFF1A;ls&amp;#x3001;dp &amp;#x7B97;&amp;#x6CD5;&amp;#xFF0C;&amp;#x81EA;&amp;#x5DF1;&amp;#x8DD1;&amp;#x4E00;&amp;#x904D;&amp;#x628A;&amp;#x8DEF;&amp;#x7531;&amp;#x8868;&amp;#x5EFA;&amp;#x7ACB;&amp;#x8D77;&amp;#x6765;&amp;#x3002;&lt;/li&gt;
&lt;li&gt;DHCP NAT &amp;#x94FE;&amp;#x8DEF;&amp;#x5C42; &amp;#x7AEF;&amp;#x53E3;&amp;#x53F7;&amp;#xFF0C;&amp;#x8FD9;&amp;#x4E2A;&amp;#x8282;&amp;#x70B9;&amp;#x7684;&amp;#x7F51;&amp;#x5173;&amp;#x662F;&amp;#x591A;&amp;#x5C11;&amp;#xFF0C;MAC &amp;#x5730;&amp;#x5740;&amp;#x8F6C;&amp;#x6362;&amp;#x3002;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;&amp;#x94FE;&amp;#x8DEF;&amp;#x5C42;&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#&amp;#x94FE;&amp;#x8DEF;&amp;#x5C42;&#34;&gt;#&lt;/a&gt; &amp;#x94FE;&amp;#x8DEF;&amp;#x5C42;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;EDC&amp;#x3001;ARP&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;&amp;#x7B80;&amp;#x7B54;&amp;#x9898;&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#&amp;#x7B80;&amp;#x7B54;&amp;#x9898;&#34;&gt;#&lt;/a&gt; &amp;#x7B80;&amp;#x7B54;&amp;#x9898;&lt;/h2&gt;
&lt;p&gt;&amp;#x8003;&amp;#x5BDF;&amp;#x4E00;&amp;#x4E9B;&amp;#x57FA;&amp;#x672C;&amp;#x5B9A;&amp;#x4E49;&amp;#x3001;&amp;#x6838;&amp;#x5FC3;&amp;#x5B9A;&amp;#x4E49;&amp;#x7684;&amp;#x5185;&amp;#x5BB9;&amp;#x3001;&amp;#x533A;&amp;#x522B;&lt;/p&gt;
&lt;h1 id=&#34;&amp;#x8BFE;&amp;#x7A0B;&amp;#x56DE;&amp;#x987E;&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#&amp;#x8BFE;&amp;#x7A0B;&amp;#x56DE;&amp;#x987E;&#34;&gt;#&lt;/a&gt; # &amp;#x8BFE;&amp;#x7A0B;&amp;#x56DE;&amp;#x987E;&lt;/h1&gt;
&lt;h3 id=&#34;network&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#network&#34;&gt;#&lt;/a&gt; network&lt;/h3&gt;
&lt;p&gt;&amp;#x4F7F;&amp;#x7528; tcp &amp;#x534F;&amp;#x8BAE;&amp;#x5B9E;&amp;#x73B0;&amp;#x53EF;&amp;#x9760;&amp;#x7684;&amp;#x6570;&amp;#x636E;&amp;#x4F20;&amp;#x8F93;&amp;#x670D;&amp;#x52A1;&amp;#xFF0C;&amp;#x4F7F;&amp;#x7528; ip &amp;#x534F;&amp;#x8BAE;&amp;#x5B9E;&amp;#x73B0;&amp;#x5F00;&amp;#x653E;&amp;#x4E92;&amp;#x8054;&amp;#xFF0C;&amp;#x63D0;&amp;#x4F9B;&amp;#x8BBE;&amp;#x5907;&amp;#x5730;&amp;#x5740;&amp;#xFF1B;core &amp;#x662F; share &amp;#x7F51;&amp;#x7EDC;&amp;#xFF0C;&amp;#x5982;&amp;#x4F55;&amp;#x53BB; share&amp;#xFF0C;&amp;#x4F7F;&amp;#x7528; packetswitch&amp;#xFF0C;&amp;#x6240;&amp;#x4EE5;&amp;#x8FD9;&amp;#x4E2A;&amp;#x7F51;&amp;#x7EDC;&amp;#x4E5F;&amp;#x79F0;&amp;#x4E3A; packetSwitchnetwork&amp;#xFF08;&amp;#x5305;&amp;#x4EA4;&amp;#x6362;&amp;#x7F51;&amp;#x7EDC;&amp;#xFF09;&amp;#x3002;&lt;/p&gt;
&lt;h3 id=&#34;&amp;#x5F00;&amp;#x653E;&amp;#x4E92;&amp;#x8054;&amp;#x6A21;&amp;#x578B;&amp;#x4E94;&amp;#x5C42;&amp;#x548C;osi&amp;#x6A21;&amp;#x578B;&amp;#x4E03;&amp;#x5C42;&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#&amp;#x5F00;&amp;#x653E;&amp;#x4E92;&amp;#x8054;&amp;#x6A21;&amp;#x578B;&amp;#x4E94;&amp;#x5C42;&amp;#x548C;osi&amp;#x6A21;&amp;#x578B;&amp;#x4E03;&amp;#x5C42;&#34;&gt;#&lt;/a&gt; &amp;#x5F00;&amp;#x653E;&amp;#x4E92;&amp;#x8054;&amp;#x6A21;&amp;#x578B;&amp;#xFF08;&amp;#x4E94;&amp;#x5C42;&amp;#xFF09;&amp;#x548C; OSI &amp;#x6A21;&amp;#x578B;&amp;#xFF08;&amp;#x4E03;&amp;#x5C42;&amp;#xFF09;&lt;/h3&gt;
&lt;p&gt;&amp;#x5E94;&amp;#x7528;&amp;#x5C42;&amp;#x3001;&amp;#x4F20;&amp;#x8F93;&amp;#x5C42;&amp;#x3001;&amp;#x94FE;&amp;#x8DEF;&amp;#x5C42;&amp;#x3001;&amp;#x7269;&amp;#x7406;&amp;#x5C42;&lt;/p&gt;
&lt;h4 id=&#34;app&amp;#x5C42;&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#app&amp;#x5C42;&#34;&gt;#&lt;/a&gt; app &amp;#x5C42;&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Web&amp;#xFF1A;HTTP &amp;#x534F;&amp;#x8BAE;&amp;#x3001;HTML &amp;#x8BED;&amp;#x8A00;&amp;#x3001;&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;&amp;#x4E24;&amp;#x79CD;&amp;#x7ECF;&amp;#x5178;&amp;#x7684;&amp;#x4F20;&amp;#x8F93;&amp;#x6A21;&amp;#x578B;&lt;/strong&gt;&lt;br&gt;
 CS &amp;#x6A21;&amp;#x5F0F;&lt;br&gt;
 P2P &amp;#x6A21;&amp;#x5F0F;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SMTP&lt;/strong&gt; &amp;#x534F;&amp;#x8BAE;&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
