{
    "version": "https://jsonfeed.org/version/1",
    "title": "Hexo • All posts by \"操作系统\" tag",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2024/06/18/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/",
            "url": "http://example.com/2024/06/18/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/",
            "title": "操作系统--内存管理",
            "date_published": "2024-06-18T08:35:04.000Z",
            "content_html": "<p>为什么要使用虚拟内存的技术 abstract memory？</p>\n<p>允许系统允许多道程序并且不会相互影响</p>\n<h1 id=\"static-relocation\"><a class=\"anchor\" href=\"#static-relocation\">#</a> Static Relocation</h1>\n<ul>\n<li>优点：<br>\n不需要硬件支持</li>\n<li>缺点：\n<ul>\n<li>加载慢</li>\n<li>一旦加载，程序的代码或数据就不能移动到内存中，除非进行进一步的重新定位。</li>\n<li>加载程序需要一些方法来判断什么是地址，什么是常量。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"address-space\"><a class=\"anchor\" href=\"#address-space\">#</a> Address Space</h1>\n<p>地址空间是一组地址，程序可以用来访问内存。</p>\n<p><strong>relocation：将程序指令和数据的地址转换为物理地址的过程。</strong></p>\n<p><strong>Dynamic Relocation</strong></p>\n<ul>\n<li>每个程序的地址空间映射到不同的 memory 上</li>\n<li>需要 base 和 limit 两个寄存器，用来存放地址空间的起始地址和 size，size 是虚拟地址的最大地址。</li>\n</ul>\n<p>优点：</p>\n<ul>\n<li>OS 可以轻松的移动程序在执行的时候</li>\n<li>OS 允许程序的内存占用随时间的增长而扩张</li>\n<li>简单，快速的硬件</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>slow everything</li>\n<li>不可以在进程之间共享地址</li>\n<li>进程会被物理内存的 size 所限制</li>\n<li>复杂的内存管理</li>\n</ul>\n<h1 id=\"swapping-交换\"><a class=\"anchor\" href=\"#swapping-交换\">#</a> Swapping 交换</h1>\n<p>因为大部分的程序的大小都超过总内存</p>\n<p>Swapping：把整个进程装进内存，运行一段时间放回 disk</p>\n<p><strong>Virtual memory</strong>：允许进程部分装进内存运行</p>\n<p>Swapping 中会产生很多的 extern fraction 碎片，需要 compaction 压缩。</p>\n<p>solution：memory manage</p>\n<ul>\n<li>bitmap</li>\n<li>linked list：把 hole 用 link 连接起来</li>\n</ul>\n<h1 id=\"storage-placement-strategies\"><a class=\"anchor\" href=\"#storage-placement-strategies\">#</a> Storage Placement Strategies</h1>\n<p>如何从 list of hole 满足请求大小为 n 的内存</p>\n<ul>\n<li>First Fit：使用第一个大小合适的 hole</li>\n<li>Next Fit：找到最后一个合适的 hole</li>\n<li>Best Fit：Use the hole whose size is equal to the need, or if none is equal, the hole that is larger but closest in size.</li>\n<li>Worst Fit：使用最大的 hole</li>\n<li>Quick Fit：\n<ul>\n<li>maintains separate lists for some of the more common sizes requested.</li>\n<li>When a request comes for placement it finds the closest fit.</li>\n<li>This is a very fast scheme, but a merge is expensive.</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"overlaying-覆盖\"><a class=\"anchor\" href=\"#overlaying-覆盖\">#</a> Overlaying 覆盖</h1>\n<ul>\n<li>overlaying：把程序分成小片，称为 overlays</li>\n<li>允许内存中存在一个或几个片，允许不同的 overlays 使用同一个地址空间</li>\n<li>overlays 的 swapping in 和 swapping out 由 OS 完成，但切片有程序员完成</li>\n</ul>\n<h1 id=\"virtual-memory\"><a class=\"anchor\" href=\"#virtual-memory\">#</a> Virtual Memory</h1>\n<p>虚拟内存：重点：把用户的 logic memory 和 physical memory 分离开来</p>\n<ul>\n<li>提供用户需要的所有内存</li>\n<li>虚拟内存存在 disk 上</li>\n<li>只用一部分程序放在内存运行</li>\n<li>运行大量的进程创建</li>\n</ul>\n<h2 id=\"principle-of-locality-局部性原则\"><a class=\"anchor\" href=\"#principle-of-locality-局部性原则\">#</a> Principle of Locality 局部性原则</h2>\n<p>在操作系统的内存管理中，&quot;局部性原理&quot;（Locality of Reference）指的是在执行过程中，进程只会访问其全部页面中的一小部分。这意味着在任何给定的时间点，进程不需要将所有的页面都加载到物理内存中。这种现象有两种主要形式：</p>\n<p>时间局部性（Temporal Locality）：如果一个数据项被访问，那么它很可能在不久的将来再次被访问。例如，循环中使用的变量就展现了时间局部性。</p>\n<p>空间局部性（Spatial Locality）：如果一个数据项被访问，那么与它相邻的数据项很可能很快也会被访问。例如，顺序访问数组元素就展现了空间局部性。</p>\n<h2 id=\"虚拟内存的实现\"><a class=\"anchor\" href=\"#虚拟内存的实现\">#</a> 虚拟内存的实现</h2>\n<h3 id=\"paging\"><a class=\"anchor\" href=\"#paging\">#</a> Paging</h3>\n<p>page frame：物理内存的对应单元</p>\n<p>MMU：内存管理单元，负责虚拟地址和物理地址的转化</p>\n<p>virtual address：虚拟地址是进程用来访问自己的地址空间的内存地址</p>\n<p>Present/Absent bit：追踪当前页是否被映射，也就是是不是合法页</p>\n<p>使用没有映射的页会使得 CPU 陷入内存，这种 trap 称为<strong> page fault</strong>，说明当前虚页没有被加载进内存，MMU 会选择一个使用过的 page，将其和 disk 中需要的 page 进行交换。选择算法和 page fault 的识别是后面的内容。</p>\n<p>page table：虚拟地址和物理地址的映射关系。</p>\n<p>Paging：映射过程</p>\n<p>虚拟地址：page number + offset</p>\n<p>page number ：page table 的 index</p>\n<p>offset：page 中的偏移量</p>\n<p>物理地址：frame number + offset</p>\n<p>page table 的目的是把 virtual page map into page frame</p>\n<h3 id=\"page-table\"><a class=\"anchor\" href=\"#page-table\">#</a> page table</h3>\n<p>作用：map VPN into PFN<br>\n 表项 entity：PTE 指向的 VPN 或者 PFN</p>\n<p>page table 放在寄存器：简单但是 cost</p>\n<p>page table 放在 memory：页表切换很简单，但是多次访问内存</p>\n<p>Solution：cache active part of page table</p>\n<ul>\n<li>TLBs，也称为 associative memory</li>\n</ul>\n<p>把常用的 entry 缓存起来</p>\n<h3 id=\"bits-in-a-tlb-entry\"><a class=\"anchor\" href=\"#bits-in-a-tlb-entry\">#</a> Bits in a TLB Entry</h3>\n<p>同样是应用了局部性原则</p>\n<ul>\n<li>Virtual page Number</li>\n<li>Physical page number</li>\n<li>Valid</li>\n<li>Access bit：kernel and user</li>\n</ul>\n<p>进行 paging 的时候，优先根据 virtual page number 对 TLB 进行搜索查看有没有被缓存</p>\n<p>如何查到是 valid 的，直接实现翻译，不用再访问 page table；</p>\n<p>如果是 not valid 的，进行普通的 page table 映射，然后把这个 TLB 表项替代成当前找到的 page table entry。</p>\n<p>TLB hit ratio</p>\n<p><strong>Hardware-Controlled TLB</strong><br>\nOn a TLB miss</p>\n<ul>\n<li>Hardware loads the PTE (Page Table Entry) into the TLB\n<ul>\n<li>Need to write back if there is no free entry</li>\n</ul>\n</li>\n<li>Generate a fault if the page containing the PTE is invalid</li>\n<li>VM software performs fault handling</li>\n<li>Restart the CPU</li>\n</ul>\n<p>On a TLB hit, hardware checks the valid bit</p>\n<ul>\n<li>If valid, pointer to page frame in memory</li>\n<li>If invalid, the hardware generates a page fault\n<ul>\n<li>Perform page fault handling</li>\n<li>Restart the faulting instruction</li>\n</ul>\n</li>\n</ul>\n<p><strong>Software-Controlled TLB</strong></p>\n<p>On a miss in TLB, generate a TLB fault, then trap to OS (software)</p>\n<ul>\n<li>Check if the page containing the PTE is in memory</li>\n<li>If no, perform page fault handling</li>\n<li>Write back if there is no free entry, then load the PTE into the TLB</li>\n<li>Restart the faulting instruction</li>\n</ul>\n<p>On a hit in TLB, the hardware checks valid bit</p>\n<ul>\n<li>If valid, pointer to page frame in memory</li>\n<li>If invalid, the hardware generates a page fault\n<ul>\n<li>Perform page fault handling</li>\n<li>Restart the faulting instruction</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"multilevel-page-table-多级页表\"><a class=\"anchor\" href=\"#multilevel-page-table-多级页表\">#</a> Multilevel Page Table 多级页表</h2>\n<p>通过层次化的多张页表来负责地址转换</p>\n<ul>\n<li>减小页表的大小</li>\n<li>不用加载不需要的页表进入内存</li>\n</ul>\n<h2 id=\"inverted-page-tables\"><a class=\"anchor\" href=\"#inverted-page-tables\">#</a> Inverted Page Tables</h2>\n<p>一个 physical page frame 对应一张 PTE。</p>\n<p>物理 page number 是这张表的 index</p>\n<p>Vpage+pid hash 到 Ppagenumber</p>\n<p><strong>Linear Inverted Page Tables</strong></p>\n<p>整个物理内存只有一张表，且一个 physical page frame 对应一张 PTE。</p>\n<p>表项为 process + virtual page</p>\n<p>The physical page number is used as an index into<br>\nthe table</p>\n<p>使用方法：就是对整张表进行搜索，查看哪个表项和提供的 pid 和 virtualpagenum 一致，该 index 就是对应的 Ppagenumber</p>\n<p>Lookup is difficult</p>\n<h2 id=\"hashed-inverted-page-tables\"><a class=\"anchor\" href=\"#hashed-inverted-page-tables\">#</a> Hashed Inverted Page Tables</h2>\n<p>在 page table 前添加一个 hash 表，The process ID and virtual page number are hashed to get an entry in the hash table，When hashing with hash table, there may be conflicts,<br>\nwhich can be solved by using chain address method，Add the next field in the inverted page table items to<br>\nform a linked list (the index of the header is in the<br>\nhash table)</p>\n<p>不用线性搜索了</p>\n<ul>\n<li>管理 hash 链消耗</li>\n</ul>\n<h1 id=\"memory-management\"><a class=\"anchor\" href=\"#memory-management\">#</a> Memory Management</h1>\n<h2 id=\"fetch-strategiesdemand-fetching\"><a class=\"anchor\" href=\"#fetch-strategiesdemand-fetching\">#</a> Fetch Strategies：Demand Fetching</h2>\n<p>只有在需要的时候才把页表写进内存。什么时候知道该页表被需要呢？</p>\n<ul>\n<li>发生 Page fault 的时候</li>\n<li>检查发现虚存地址非法</li>\n<li>如果地址合法，检查是否在内存中有缓存</li>\n<li>如果没有，在内存中找到一张 free 的 page frame</li>\n<li>把地址 map 到 disk block，fetch disk block 到 page frame，阻塞用户进程</li>\n<li>等待 disk read 完成，添加 vm mapping for page frame</li>\n<li>重启进程</li>\n</ul>\n<p>page fault 发生时，把需要的 page 和相邻的 page 装进 memory</p>\n<h2 id=\"page-replacement\"><a class=\"anchor\" href=\"#page-replacement\">#</a> Page Replacement</h2>\n<p>当发生 page fault 但没有多余的 free page frame 时 需要 replace</p>\n<h3 id=\"page-replacement-algorithm\"><a class=\"anchor\" href=\"#page-replacement-algorithm\">#</a> Page Replacement Algorithm</h3>\n<p><strong>Reference string</strong>：一个序列，用来模拟或记录一个程序执行时访问内存地址的顺序，可以用来评估页面置换算法，计算按照引用串访问带来的 page fault 次数。</p>\n<h2 id=\"1-the-optimal-algorithm\"><a class=\"anchor\" href=\"#1-the-optimal-algorithm\">#</a> 1 The Optimal Algorithm</h2>\n<p>最优页面置换算法（Optimal Page Replacement Algorithm）是一种理论上的页面置换策略，用于决定当发生页面错误（page fault）且没有空闲页面帧时，应该替换哪个页面。该算法的目标是最小化页面错误的总数。</p>\n<p>最优算法的工作原理是：当需要替换一个页面时，它会选择那个在未来最长时间内不会被访问的页面进行替换。因为这种算法需要知道未来的页面访问序列，所以在实际操作系统中是不可实现的。然而，它在理论研究中非常有用，因为它提供了其他页面置换算法性能的上限（即最好情况）。</p>\n<p>简而言之，最优页面置换算法可以告诉我们在给定的引用串下，页面错误的最小可能数量是多少，但由于它需要未来的知识，因此不能在实际的操作系统中实现。</p>\n<h2 id=\"2-fifo-页面置换算法\"><a class=\"anchor\" href=\"#2-fifo-页面置换算法\">#</a> 2 FIFO 页面置换算法</h2>\n<ol>\n<li>维护一个队列，记录所有加载到内存中的页面的顺序。</li>\n<li>当一个新页面需要被加载到内存中，而内存已满时，算法会选择队列中最早进入的页面进行替换。</li>\n<li>被替换的页面会从队列中移除，新加载的页面加入队列的末尾。</li>\n</ol>\n<p>优点：实现简单</p>\n<p>缺点：最旧的页面可能会经常使用</p>\n<h2 id=\"beladys-anomaly\"><a class=\"anchor\" href=\"#beladys-anomaly\">#</a> Belady‘s anomaly</h2>\n<p>Belady 的异常是指在使用某些页面置换算法（尤其是 FIFO 算法）时，系统为进程分配的物理内存帧数量增加，反而导致页面错误率增加的现象。这一异常直观上违反了常识，因为我们通常期望可用内存增加时，页面错误会减少，程序运行效率会提高。</p>\n<p>paging system 的三大组成：</p>\n<ul>\n<li>reference string</li>\n<li>page replacement 算法</li>\n<li>内存中可用的 page frames</li>\n</ul>\n<h2 id=\"3-second-chance-page-replacement-算法\"><a class=\"anchor\" href=\"#3-second-chance-page-replacement-算法\">#</a> 3 Second Chance Page Replacement 算法</h2>\n<p>二次机会页面置换算法（Second Chance Page Replacement Algorithm），也称为时钟算法（Clock Algorithm），是一种改进的 FIFO 页面置换算法。它试图克服 FIFO 算法的主要缺点，即盲目地按照页面进入内存的顺序进行置换，而不考虑页面的使用情况。二次机会算法通过给每个页面一个 “二次机会” 来避免将频繁使用的页面置换出去</p>\n<p>Inspect R bit</p>\n<p>算法过程如下：</p>\n<p>初始化：维护一个循环队列，每个页面项包含一个访问位（Inspect R bit），初始时所有页面的访问位都设置为 0。<br>\n页面访问：当一个页面被访问时，其对应的访问位设置为 1。<br>\n页面置换：<br>\n当需要置换一个页面时，算法从当前指针位置开始扫描循环队列。<br>\n如果遇到的第一个页面的访问位为 1，则将其设置为 0，并给这个页面一个 “二次机会”，然后移动到下一个页面。<br>\n如果遇到的页面访问位为 0，则选择这个页面进行置换，并将新页面插入其位置。<br>\n这个过程像时钟的指针一样循环进行，因此得名 “时钟算法”。</p>\n<h2 id=\"4-clock-page-replacement-algorithm\"><a class=\"anchor\" href=\"#4-clock-page-replacement-algorithm\">#</a> 4 Clock Page Replacement Algorithm</h2>\n<p>3 的另一个实现</p>\n<h2 id=\"5-not-recently-used-replacement-算法\"><a class=\"anchor\" href=\"#5-not-recently-used-replacement-算法\">#</a> 5 Not Recently Used Replacement 算法</h2>\n<p>Each page has Reference bit(R) and Modified bit(M).</p>\n<ul>\n<li>bits are set when page is referenced (read or written recently), modified (written to)</li>\n<li>when a process starts, both bits R and M are set to 0 for all pages.</li>\n<li>periodically, (on each clock interval (20msec) ), the R bit is cleared. (i.e. R=0).</li>\n</ul>\n<p>page 会被定义成四个状态：</p>\n<ul>\n<li>Class 0: not referenced, not modified</li>\n<li>Class 1: not referenced, modified</li>\n<li>Class 2: referenced, not modified</li>\n<li>Class 3: referenced, modified</li>\n</ul>\n<p>数字越小，替代的优先级越大</p>\n<p>NFU (Not Frequently Used) is implemented in software.</p>\n<ul>\n<li>At each clock interrupt, the R bit is added to the counter associated with each page. When a page fault occurs, the page with the lowest counter is replaced.</li>\n<li>Problem: NFU never forgets, so a page referenced frequency long ago may have the highest counter.</li>\n</ul>\n<p>Modified NFU = NFU with Aging - at each clock interrupt:</p>\n<ul>\n<li>the counters are shifted right one bit, and</li>\n<li>the R bits are added to the leftmost bit.</li>\n<li>In this way, we can give higher priority to recent R values</li>\n</ul>\n<h2 id=\"6-least-recently-used\"><a class=\"anchor\" href=\"#6-least-recently-used\">#</a> 6 Least Recently Used</h2>\n<p>throw out page that has been unused for longest time</p>\n<p>实现：</p>\n<ul>\n<li>软件：维持一个 linked list of pages，被使用过的放在前面，其余的放后面，cost！</li>\n<li>硬件：\n<ul>\n<li>a 64 bit counter\n<ul>\n<li>这个计数器会不断增长，调用内存后，再页表项中添加当前的 counter 的值</li>\n<li>replace 的时候选择 counter value 最小的值。</li>\n<li>周期性的清空 counter，不然装不下</li>\n</ul>\n</li>\n<li>a nXn bits 的矩阵（n 个 page）\n<ul>\n<li>When page frame K is referenced:\n<ol>\n<li>Set row K to all 1s.</li>\n<li>Set column K to all 0s.</li>\n</ol>\n</li>\n<li>The row whose binary value is smallest is the LRU page.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"7-the-working-set-page-replacement-算法\"><a class=\"anchor\" href=\"#7-the-working-set-page-replacement-算法\">#</a> 7 The Working Set Page Replacement 算法</h2>\n<p>The working set is the set of pages used by the k most recent memory references</p>\n<p>w(k,t) is the size of the working set at time t</p>\n<p>算法思想：</p>\n<p>当 page fault 发生时，选择一个不子啊工作集中的 page 替换他</p>\n<p>同样是局部性原理的体现！</p>\n<p>进程开始执行后，随着访问新页面逐步建立较稳定的工作集。<br>\n当内存访问的局部性区域的位置大致稳定时，工作集大小也大致稳定；<br>\n局部性区域的位置改变时，工作集快速扩张和收缩过渡到下一个稳定值。</p>\n<p>对所有的 page 进行 span，如果 R<mark>1，set time of last use to current virtual time，如果 R</mark>0 且 age&gt;t 则 remove page，如果 age&lt; t remember the smallest time</p>\n<p>如果没有 age&gt;t 的，就选择 age 最大的</p>\n<h2 id=\"8-wsclock-page-replacement-算法\"><a class=\"anchor\" href=\"#8-wsclock-page-replacement-算法\">#</a> 8 WSClock Page Replacement 算法</h2>\n<h2 id=\"page-size\"><a class=\"anchor\" href=\"#page-size\">#</a> Page Size</h2>\n<p>overhead = se/p + p/2</p>\n<h1 id=\"segmentation\"><a class=\"anchor\" href=\"#segmentation\">#</a> Segmentation</h1>\n<p>segmentation：为机器提供多个独立的 地址空间。</p>\n<p>segmented memory 允许 each table 生长</p>\n<p>A program is a collection of segments. A segment is a logical unit such as<br>\nMain program<br>\nProcedure<br>\nFunction<br>\nSymbol table<br>\nStack</p>\n<h1 id=\"segmentation-architecture\"><a class=\"anchor\" href=\"#segmentation-architecture\">#</a> Segmentation Architecture</h1>\n<p>Logical address consists of two parts:<br>\n&lt; virtual segment-number, offset &gt;</p>\n<p><strong>Segment table</strong></p>\n<p>Maps two-dimensional user-defined addresses into one-dimensional physical addresses</p>\n<p>The virtual segment number is used as an index to the segment table</p>\n<h1 id=\"segmentation-with-paging\"><a class=\"anchor\" href=\"#segmentation-with-paging\">#</a> Segmentation with paging</h1>\n<ul>\n<li>Segmentation in virtual memory, paging in physical memory</li>\n<li>A segment is composed of pages</li>\n<li>An address has three components：segmentNumber+pageNumber+offset</li>\n</ul>\n",
            "tags": [
                "操作系统"
            ]
        },
        {
            "id": "http://example.com/2024/06/16/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/",
            "url": "http://example.com/2024/06/16/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/",
            "title": "操作系统--文件系统",
            "date_published": "2024-06-16T09:25:07.000Z",
            "content_html": "<h1 id=\"1-file\"><a class=\"anchor\" href=\"#1-file\">#</a> 1 File</h1>\n<p>挑选难理解的概念进行讲解。</p>\n<p>三种文件种类：byte sequence 、 record sequence 、 tree</p>\n<p>文件类型：</p>\n<ul>\n<li>Regular files：普通文件，分为文本文件和二进制文件</li>\n<li>Directories：目录</li>\n<li>Character special file：特殊字符文件，模拟 io 设备比如终端、打印机和网络</li>\n<li>Block special files：块文件，模拟 disk</li>\n</ul>\n<p>文件访问：</p>\n<ul>\n<li>顺序访问：从头开始读文件，不可以跳跃，可以回退和后退，在磁盘媒介中比较便利</li>\n<li>随机访问：随意读取文件，file marker 用来定位开始 read 的位置，就是 seek 操作。可以先读在 seek 也可以先 seek，再读</li>\n</ul>\n<p><strong>metadata：文件属性（file attribute）</strong></p>\n<p>文件操作</p>\n<h1 id=\"2-directory-目录\"><a class=\"anchor\" href=\"#2-directory-目录\">#</a> 2 Directory 目录</h1>\n<ul>\n<li>文件系统通过目录来查找文件</li>\n<li>目录是一个文件名和文件位置相同的文件</li>\n<li>directory entries 拥有文件的信息。目录下有文件创建，文件条目也跟着创建，有文件删除，条目也跟着删除；</li>\n</ul>\n<p>目录的好处：</p>\n<ul>\n<li>方便查找文件</li>\n<li>文件可以在不同目录下重复命名</li>\n<li>归类</li>\n</ul>\n<p>目录系统：</p>\n<ul>\n<li>单目录系统</li>\n<li>多目录系统</li>\n<li>层次目录系统</li>\n</ul>\n<p>路径分为相对路径和绝对路径</p>\n<h1 id=\"3-文件系统\"><a class=\"anchor\" href=\"#3-文件系统\">#</a> 3 文件系统</h1>\n<p><strong>超级块</strong>：描述文件系统的状态：分区大小，块大小，指向空块的指针列表，root 目录的 inode number，magic number</p>\n<p>文件系统认为 disk 是一个 block 数组</p>\n<p>实现文件存储就是最追踪 file 放在哪些 disk block 中</p>\n<ul>\n<li>Contiguous Allocation</li>\n<li>Linked List Allocation</li>\n<li>Indexed Allocation</li>\n</ul>\n<h2 id=\"contiguous-allocation\"><a class=\"anchor\" href=\"#contiguous-allocation\">#</a> Contiguous Allocation</h2>\n<p>把 file 储存在相邻的 blocks 中</p>\n<p>优点：</p>\n<ul>\n<li>简单实现</li>\n<li>读操作非常高效</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>存在 external fragmentation，块与块之间有没利用的外部碎片</li>\n<li>file 一旦创建，文件的大小无法改变</li>\n</ul>\n<p>Good for CD-ROMs, DVDs and other write-once optical media</p>\n<h2 id=\"linked-list-allocation\"><a class=\"anchor\" href=\"#linked-list-allocation\">#</a> Linked List Allocation</h2>\n<p>使用一串用指针连接的 Link list 的块来储存 file，block 的头部储存指向下一个块的指针</p>\n<p>优点：</p>\n<ul>\n<li>没有 external fragmentation</li>\n<li>目录条目简单，只用储存第一个块的第一个字的地址</li>\n<li>file 的大小可以变化</li>\n<li>对顺序访问很友好</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>随机访问很慢</li>\n<li>块中的 data 的数目不是 2 的次方</li>\n</ul>\n<h2 id=\"linked-list-allocation-using-fat\"><a class=\"anchor\" href=\"#linked-list-allocation-using-fat\">#</a> Linked List Allocation Using FAT</h2>\n<p>FAT：index table 存放着每个块的 table pointer word</p>\n<p>FAT 文件系统中，disk 的数据区被划分为多个蔟，文件的储存需要分配蔟，而 FAT 表就是记录这些文件分配到的蔟的地址，如果一个文件大小大于一个蔟的大小，就会被分配到多个蔟，FAT 表就会记录这些蔟的连接关系</p>\n<p>就是单独建立一张表来记录一个文件所用的块的连接关系，用于搜索</p>\n<ul>\n<li>分区的第一个 section 会存放 FAT</li>\n<li>FAT 可以读入内存中以减小 disk seek</li>\n<li>disk 中一块一个 FAT entry，按块号排序</li>\n<li>每一个 entry 持有下一个 block 的地址</li>\n<li>最后一个文件标记 - 1</li>\n<li>-2 表示该蔟是空的</li>\n</ul>\n<p>优点：</p>\n<ul>\n<li>整个块对 data 是可用的</li>\n<li>可以通过对 FAT 的扫描实现随机访问</li>\n<li>目录条目只需要一个 number：starting block number（文件的第一块对于 FAT 表的索引）</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>整张表需要拷贝进内存，挤占内存空间</li>\n</ul>\n<h2 id=\"inodeindex-node\"><a class=\"anchor\" href=\"#inodeindex-node\">#</a> inode（index node）</h2>\n<p>每个文件都有自己的 inode，inode 里列举了文件属性和文件所有的 data block 的地址</p>\n<p>inode 内部的块地址分配也有直接和间接两种，间接又分为 single indirect block、double indirect block 和 triple indirect block 三种</p>\n<ul>\n<li>A single indirect block contains pointers to data blocks.</li>\n<li>A double indirect block contains pointers to single<br>\nindirect blocks.</li>\n<li>A triple indirect block contains pointers to double indirect blocks.</li>\n</ul>\n<p>优点：</p>\n<ul>\n<li>快速的查找和随机访问</li>\n<li>没有外部碎片</li>\n<li>文件被打开时，对应文件的 inode 才被加载到内存中，占用小</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>索引开销大</li>\n</ul>\n<h2 id=\"目录实现\"><a class=\"anchor\" href=\"#目录实现\">#</a> 目录实现</h2>\n<ul>\n<li>\n<p>目录的储存和文件的储存方式一样</p>\n<ul>\n<li>目录条目也储存在 data block 中</li>\n<li>目录文件就是一个目录条目列表</li>\n</ul>\n</li>\n<li>\n<p>文件打开时，文件系统会使用文件路径来定位目录条目</p>\n</li>\n<li>\n<p>目录条目提供找到 disk block 的需要信息：文件地址 / 第一个块的块号 /inode 号</p>\n</li>\n<li>\n<p>文件属性的位置</p>\n<ul>\n<li>在目录条目中</li>\n<li>在一个单独的数据结构中\n<ul>\n<li>目录条目保存有文件名和 inode number</li>\n<li>文件属性放在 inode 里</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>问题：如果目录中有很长的文件名怎么办</p>\n<ol>\n<li>给储存名字的地方的大小固定大一点</li>\n<li>Directory entry comprises fixed and variable portion (in line)<br>\n 缺点：</li>\n</ol>\n<ul>\n<li>文件移除的时候会出现大小不同的间隔</li>\n<li>文件名可能跨页，导致页错误</li>\n</ul>\n<ol start=\"3\">\n<li>目录条目固定大小，但是存放文件名的地方是一个指向对堆区的指针，指向文件名<br>\n缺点：管理堆区；页错误同样会发生</li>\n</ol>\n<h2 id=\"share-files\"><a class=\"anchor\" href=\"#share-files\">#</a> Share Files</h2>\n<p>Hard Link：两个目录有共享文件，则分别指向同一个 inode。</p>\n<p>Symbolic Link（Soft Link）：如果一个目录下想创建另一个文件的共享文件，则创建一个类型为 Link 的文件，文件内保存有共享文件的路径。</p>\n<p>Hard Link 文件的删除：</p>\n<ul>\n<li>在每个 inode 中增加引用次数</li>\n<li>计算指向该 inode 的引用次数</li>\n<li>当删除一个 Link 时，引用次数减 1</li>\n<li>当引用次数为 0 时，删除共享文件的 file data</li>\n</ul>\n<p>软 Link 文件删除：</p>\n<p>Hard Link 的限制：</p>\n<ul>\n<li>不能跨分区建立连接</li>\n<li>如果其中一个文件被移动到另一个文件系统，则会将其复制，并相应地调整两个文件的链接计数</li>\n<li>只用管理员才可以建立对目录的硬链接</li>\n</ul>\n<p>Soft Link 的限制：</p>\n<ul>\n<li>Extra space on disk and extra i-node to store<br>\nthe link file</li>\n<li>Extra overhead in the traversing path</li>\n<li>If the original file is moved to a different<br>\nlocation, it can no longer be accessed via the<br>\nsymbolic link (dangling link)</li>\n<li>Having multiple copies of a file may set<br>\ncopied when dumping a file onto a tape.</li>\n</ul>\n<h2 id=\"block-size\"><a class=\"anchor\" href=\"#block-size\">#</a> block size：</h2>\n<ul>\n<li>Large：higher data rate, lower space utilization</li>\n<li>Small： lower data rate, higher space utilization</li>\n</ul>\n<h2 id=\"追踪空余的块\"><a class=\"anchor\" href=\"#追踪空余的块\">#</a> 追踪空余的块</h2>\n<ul>\n<li>Linked list</li>\n<li>Bit-Map：每个块对应一位，1 表示空，0 表示非空</li>\n<li>counting</li>\n</ul>\n<p>Linked list vs Bit-Map：</p>\n<ul>\n<li>存放空块号的 block 要求，Bit-Map 远小于 Linked list</li>\n</ul>\n<h2 id=\"文件系统的backup-备份\"><a class=\"anchor\" href=\"#文件系统的backup-备份\">#</a> 文件系统的 backup 备份</h2>\n<ul>\n<li>Physical dump</li>\n<li>Logical dump</li>\n</ul>\n",
            "tags": [
                "操作系统"
            ]
        },
        {
            "id": "http://example.com/2024/06/16/IO%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E8%AE%BE%E5%A4%87/",
            "url": "http://example.com/2024/06/16/IO%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E8%AE%BE%E5%A4%87/",
            "title": "IO输入输出设备",
            "date_published": "2024-06-16T04:56:26.000Z",
            "content_html": "<h2 id=\"1-principle-of-io-software\"><a class=\"anchor\" href=\"#1-principle-of-io-software\">#</a> 1 Principle of IO Software</h2>\n<h3 id=\"11-goals-of-io-software\"><a class=\"anchor\" href=\"#11-goals-of-io-software\">#</a> 1.1 Goals of IO Software</h3>\n<ul>\n<li>设备独立性\n<ul>\n<li>程序可以访问任何的 IO 设备</li>\n<li>不会提前对设备进行特殊处理</li>\n</ul>\n</li>\n<li>Uniform naming 通用命名\n<ul>\n<li>文件和设备的名字是字符串或者数字</li>\n<li>不会依赖某个机器</li>\n</ul>\n</li>\n<li>Error handling\n<ul>\n<li>处理错误</li>\n</ul>\n</li>\n<li>同步和异步传输数据</li>\n<li>Buffering\n<ul>\n<li>有缓存机制，数据来到设备不会直接储存到最终目的地</li>\n</ul>\n</li>\n<li>可共享设备和私有设备</li>\n</ul>\n<h3 id=\"12-io-operations\"><a class=\"anchor\" href=\"#12-io-operations\">#</a> 1.2 IO Operations</h3>\n<h4 id=\"121-programmed-io\"><a class=\"anchor\" href=\"#121-programmed-io\">#</a> 1.2.1 Programmed IO</h4>\n<p>CPU 经常被 IO 设备占用知道 IO 设备任务完成，这在多处理器设备中是不高效的。</p>\n<p>Polling 轮询：CPU 轮询设备的寄存器查看它的状态是 ready 还是 busy 还是 error</p>\n<h4 id=\"122-interrupt-driven-io\"><a class=\"anchor\" href=\"#122-interrupt-driven-io\">#</a> 1.2.2 Interrupt-Driven IO</h4>\n<p>IO 中断设备</p>\n<p>在应用 Buffer 的 content copy 到内核的 buffer 后会允许中断，如果设备忙，cpu 不会 wait 而是 Scheduling 其他的进程。当设备使用完毕后，设备的 controller 会发送 hardware Interrupt 启动中断服务：</p>\n<p>当内核 buffer 的 content 写进 设备时，设备状态恢复 ready。</p>\n<h4 id=\"123-io-using-dma\"><a class=\"anchor\" href=\"#123-io-using-dma\">#</a> 1.2.3 IO using DMA</h4>\n<p>中断驱动 IO 设备的缺点是中断发生在每一个字符的传输，每个字符写入设备寄存器都会经历完成的中断流程。</p>\n<p>DMA 控制器会负责内核 buffer 到 Device buffer 的字符传输，CPU 不需要关心这个传输过程。</p>\n<p>当 DMA 传输完成后 CPU 会被中断，通知 CPU 传输完成。</p>\n<h2 id=\"2-io-software-layers\"><a class=\"anchor\" href=\"#2-io-software-layers\">#</a> 2 IO software layers</h2>\n<h3 id=\"21硬件和驱动之间的一层-interrupt-handlers\"><a class=\"anchor\" href=\"#21硬件和驱动之间的一层-interrupt-handlers\">#</a> 2.1 硬件和驱动之间的一层 --Interrupt handlers</h3>\n<p>当中断发生时，CPU 会保存必要的数据和状态然后跳转到 Interrupt-handler routine，它存放在内存中存放中断服务的地方。具体位置由 Interrupt vector 决定。</p>\n<p>中断完成后 OS 会执行的事件：</p>\n<ol>\n<li>保存 regs（数据、状态、地址）</li>\n<li>设置中断服务程序的上下文：TLB，MMU and page table</li>\n<li>设置中断服务的 stack</li>\n<li>修改中断控制器，允许中断</li>\n<li>复制保存进程表的寄存器</li>\n<li>运行中断服务</li>\n<li>调度下一个运行进程</li>\n<li>设置下一个运行进程 MMU 上下文</li>\n<li>加载新的 PC</li>\n<li>开始运行新的进程</li>\n</ol>\n<h3 id=\"22-设备驱动\"><a class=\"anchor\" href=\"#22-设备驱动\">#</a> 2.2 设备驱动</h3>\n<p>设备驱动是设备控制器和 OS 之间的接口</p>\n<p><strong>设备驱动函数</strong><br>\n作用：</p>\n<ul>\n<li>接受来自 os 的 Abstract 读写请求，把这些抽象请求重写成适配与设备的具体的请求。</li>\n<li>初始化设备</li>\n<li>检查设备使用状态，推送请求队列</li>\n<li>issue 控制设备的命令序列</li>\n<li>检查错误</li>\n</ul>\n<h3 id=\"23-device-independent-io-software-设备独立软件\"><a class=\"anchor\" href=\"#23-device-independent-io-software-设备独立软件\">#</a> 2.3 Device-Independent IO software 设备独立软件</h3>\n<p>设备独立软件的作用：</p>\n<ul>\n<li>Uniform interfacing for device drivers</li>\n<li>buffers</li>\n<li>error reporting</li>\n<li>allocating and releasing dedicate device</li>\n<li>providing a device-independent block size</li>\n</ul>\n<h4 id=\"231-uniform-interfacing\"><a class=\"anchor\" href=\"#231-uniform-interfacing\">#</a> 2.3.1 Uniform interfacing</h4>\n<p>设备驱动需要有一个统一的接口规范。</p>\n<p>好处：</p>\n<ul>\n<li>驱动开发者会知道希望开发什么样的驱动服务</li>\n<li>系统开发者可以开发设备独立软件在驱动层之上，为驱动提供服务</li>\n</ul>\n<p>设备号连接一个合适的设备驱动</p>\n<h4 id=\"232-buffering\"><a class=\"anchor\" href=\"#232-buffering\">#</a> 2.3.2 buffering</h4>\n<h4 id=\"233-error-reporting\"><a class=\"anchor\" href=\"#233-error-reporting\">#</a> 2.3.3 error reporting</h4>\n<h4 id=\"234-allocating-dedicate-device\"><a class=\"anchor\" href=\"#234-allocating-dedicate-device\">#</a> 2.3.4 allocating dedicate device</h4>\n<h2 id=\"3-disk\"><a class=\"anchor\" href=\"#3-disk\">#</a> 3 Disk</h2>\n<h3 id=\"31-magnetic-disk-磁盘\"><a class=\"anchor\" href=\"#31-magnetic-disk-磁盘\">#</a> 3.1 magnetic disk 磁盘</h3>\n<p>由多个 cylinder（柱面）组成，每个柱面包含多个 tracks 道，track 又可以分为多个 sector 扇区。</p>\n<h3 id=\"32disk格式化\"><a class=\"anchor\" href=\"#32disk格式化\">#</a> 3.2<strong>disk 格式化</strong></h3>\n<p>disk 格式化后，disk 只有 empty bits<br>\n 每个 platter 盘片都需要有 low-level format 和 high-level format</p>\n<p>low-level format：把 disk 分成 sectors 可以被 disk 控制器识别读写。由 vendors 完成</p>\n<p>track 的格式化：把 track 按 inter-sector-gap 分隔成一个个 sector。sector 由 preamble（前导号，由位模式、柱面号、扇区号组成）、data（512 bytes）、ECC 组成</p>\n<h3 id=\"33-cylinder-skew-柱面斜进\"><a class=\"anchor\" href=\"#33-cylinder-skew-柱面斜进\">#</a> 3.3 cylinder skew 柱面斜进</h3>\n<p>不同磁道的同一个扇区号不是分布在同一个半径上的，而是有一定的斜度，保证每次 disk header 在切换磁道后都是从 0 号扇区开始。这是由于不同磁道的周长是不一样的</p>\n<p>下面是计算斜进量的公式</p>\n<p>cylinder skew = seek time / per sectors time</p>\n<h3 id=\"34-interleaving\"><a class=\"anchor\" href=\"#34-interleaving\">#</a> 3.4 interleaving</h3>\n<p>扇区在磁道中不是按顺序排列的，是交错排列的。</p>\n<ul>\n<li>single interleaving</li>\n<li>double interleaving</li>\n</ul>\n<h3 id=\"35-disk-arm-scheduling-算法\"><a class=\"anchor\" href=\"#35-disk-arm-scheduling-算法\">#</a> 3.5 Disk ARM Scheduling 算法</h3>\n<p>用于管理磁盘的磁头臂移动的算法</p>\n<p>读写磁盘块的时间 = seek time+rotational time+data transfer time</p>\n<p>算法会对磁道的访问请求进行排序来减小磁盘臂的移动</p>\n<h4 id=\"351-fcfs算法\"><a class=\"anchor\" href=\"#351-fcfs算法\">#</a> 3.5.1 FCFS 算法</h4>\n<h4 id=\"352-ssf算法\"><a class=\"anchor\" href=\"#352-ssf算法\">#</a> 3.5.2 SSF 算法</h4>\n<p>当前位置移动到目标柱面所需 seek time 最小的优先选择</p>\n<h4 id=\"353-elevator-算法\"><a class=\"anchor\" href=\"#353-elevator-算法\">#</a> 3.5.3 Elevator 算法</h4>\n<p>算法思想：单方向的移动磁盘臂，处理这个方向上的柱面请求，处理完成后换个方向重复执行。</p>\n<h4 id=\"354-错误处理\"><a class=\"anchor\" href=\"#354-错误处理\">#</a> 3.5.4 错误处理</h4>\n<p>小的错误由 ECC correct，整个扇区损坏需要由 Disk controller 或者 OS 处理。</p>\n<p>处理错误的两个方法：</p>\n<ul>\n<li>Disk controller：在传入时检查，发现错误的扇区进行标记并用空格取代，每个磁道会预留几个空白扇区用来取代 bad section。</li>\n<li>OS：检查错误的扇区并记录他们</li>\n</ul>\n",
            "tags": [
                "操作系统"
            ]
        },
        {
            "id": "http://example.com/2024/06/04/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F--%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1%E4%B8%8E%E8%B0%83%E5%BA%A6/",
            "url": "http://example.com/2024/06/04/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F--%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1%E4%B8%8E%E8%B0%83%E5%BA%A6/",
            "title": "操作系统--进程通信与调度",
            "date_published": "2024-06-04T07:48:31.000Z",
            "content_html": "<h2 id=\"1-&#x8FDB;&#x7A0B;process\"><a class=\"anchor\" href=\"#1-&#x8FDB;&#x7A0B;process\">#</a> 1 &#x8FDB;&#x7A0B; Process</h2>\n<p>&#x5982;&#x4F55;&#x5B9A;&#x4E49; process&#xFF1A;&#xFF08;process &#x7684;&#x51E0;&#x4E2A;&#x5B9A;&#x4E49;&#x7279;&#x70B9;&#xFF09;</p>\n<ol>\n<li>Sequence Execution &#x7A0B;&#x5E8F;&#x7684;&#x987A;&#x5E8F;&#x6267;&#x884C;&#xFF1A;&#x4E00;&#x4E2A;&#x6709;&#x72EC;&#x7ACB;&#x529F;&#x80FD;&#x7684;&#x7A0B;&#x5E8F;&#x72EC;&#x5360;&#x5904;&#x7406;&#x5668;&#x76F4;&#x81F3;&#x6700;&#x7EC8;&#x7ED3;&#x675F;&#x7684;&#x8FC7;&#x7A0B;</li>\n<li>Concurrency Execution&#xFF1A;&#x5E76;&#x53D1;&#x6267;&#x884C;&#xFF0C;&#x8FDB;&#x7A0B;&#x5177;&#x6709;&#x5E76;&#x53D1;&#x6027;&#xFF0C;&#x591A;&#x4E2A;&#x8FDB;&#x7A0B;&#x4E92;&#x4E0D;&#x5E72;&#x6270;&#xFF0C;&#x540C;&#x65F6;&#x8FD0;&#x884C;&#x3002;</li>\n</ol>\n<p><strong>The Process Model</strong></p>\n<ul>\n<li>Multiprogramming of four programs&#xFF08;one PC&#xFF09;</li>\n<li>Conceptual model of 4 independent&#xFF0C;sequential  processes</li>\n<li>Only one program active at any instant</li>\n</ul>\n<p><strong>Process Concept</strong></p>\n<p>&#x8FDB;&#x7A0B;&#xFF1A;&#x4E00;&#x4E2A;&#x5177;&#x6709;&#x4E00;&#x5B9A;&#x72EC;&#x7ACB;&#x529F;&#x80FD;&#x7684;&#x7A0B;&#x5E8F;&#x5173;&#x4E8E;&#x67D0;&#x4E2A;&#x6570;&#x636E;&#x96C6;&#x5408;&#x7684;&#x4E00;&#x6B21;&#x6D3B;&#x52A8;&#x3002;</p>\n<p><strong>&#x8FDB;&#x7A0B;&#x548C;&#x7A0B;&#x5E8F;&#x4E4B;&#x95F4;&#x7684;&#x533A;&#x522B;&#xFF1A;</strong></p>\n<ol>\n<li>&#x7A0B;&#x5E8F;&#x662F;&#x547D;&#x4EE4;&#x7684;&#x96C6;&#x5408;&#xFF0C;&#x662F;&#x4E00;&#x4E2A;&#x9759;&#x6001;&#x7684;&#x6982;&#x5FF5;&#xFF1B;&#x8FDB;&#x7A0B;&#x53EF;&#x4EE5;&#x63CF;&#x8FF0;&#x5E76;&#x53D1;&#x7684;&#x8FC7;&#x7A0B;&#xFF0C;&#x662F;&#x4E00;&#x4E2A;&#x52A8;&#x6001;&#x7684;&#x6982;&#x5FF5;&#x3002;</li>\n<li>&#x8FDB;&#x7A0B;&#x5305;&#x542B;&#x7A0B;&#x5E8F;&#xFF0C;&#x6570;&#x636E;&#xFF0C;pcb&#xFF08;&#x8FDB;&#x7A0B;&#x63A7;&#x5236;&#x5757;&#xFF09;</li>\n<li>&#x8FDB;&#x7A0B;&#x662F;&#x6682;&#x65F6;&#x7684;&#xFF0C;&#x6709;&#x5173;&#x95ED;&#x7684;&#x65F6;&#x523B;&#xFF1B;&#x7A0B;&#x5E8F;&#x662F;&#x6C38;&#x4E45;&#x7684;&#xFF0C;&#x4E00;&#x65E6;&#x5199;&#x597D;&#x5C31;&#x4E00;&#x76F4;&#x5B58;&#x5728;&#x3002;</li>\n<li>&#x4E00;&#x4E2A;&#x7A0B;&#x5E8F;&#x53EF;&#x4EE5;&#x8C03;&#x7528;&#x591A;&#x4E2A;&#x8FDB;&#x7A0B;&#x6765;&#x8FD0;&#x884C;&#x5404;&#x4E2A;&#x90E8;&#x5206;&#xFF1B;&#x4E00;&#x4E2A;&#x8FDB;&#x7A0B;&#x53EF;&#x4EE5;&#x8FD0;&#x884C;&#x591A;&#x4E2A;&#x7A0B;&#x5E8F;&#xFF1B;</li>\n<li>&#x8FDB;&#x7A0B;&#x4E5F;&#x53EF;&#x4EE5;&#x521B;&#x9020;&#x5176;&#x4ED6;&#x7684;&#x8FDB;&#x7A0B;&#xFF1B;</li>\n</ol>\n<p><strong>&#x4F55;&#x65F6;&#x521B;&#x5EFA;&#x8FDB;&#x7A0B;</strong></p>\n<ol>\n<li>&#x7CFB;&#x7EDF;&#x521D;&#x59CB;&#x5316;&#x65F6;&#xFF1A;&#x521B;&#x5EFA;&#x4E24;&#x79CD;&#x8FDB;&#x7A0B;&#xFF1A;</li>\n</ol>\n<ul>\n<li>Foreground Process&#xFF1A;&#x4E0E;&#x7528;&#x6237;&#x4EA4;&#x4E92;&#x63D0;&#x4F9B;&#x670D;&#x52A1;</li>\n<li>Background Process&#xFF1A;&#x5904;&#x7406;&#x7528;&#x6237;&#x8C03;&#x7528;&#x7684;&#x8C03;&#x7528;&#xFF0C;&#x53C8;&#x79F0;&#x4E3A; daemon&#xFF08;&#x5B88;&#x62A4;&#x8FDB;&#x7A0B;&#xFF09;</li>\n</ul>\n<ol start=\"2\">\n<li>fork&#xFF08;&#xFF09;&#x7CFB;&#x7EDF;&#x8C03;&#x7528;</li>\n<li>&#x7528;&#x6237;&#x8BF7;&#x6C42;</li>\n<li>Initiation of a batch job</li>\n</ol>\n<h3 id=\"11&#x4F55;&#x65F6;&#x7EC8;&#x6B62;&#x8FDB;&#x7A0B;\"><a class=\"anchor\" href=\"#11&#x4F55;&#x65F6;&#x7EC8;&#x6B62;&#x8FDB;&#x7A0B;\">#</a> 1.1<strong> &#x4F55;&#x65F6;&#x7EC8;&#x6B62;&#x8FDB;&#x7A0B;</strong></h3>\n<p>&#x7EC8;&#x6B62;&#x8FDB;&#x7A0B;&#x7684;&#x6761;&#x4EF6;&#xFF1A;</p>\n<ul>\n<li>Normal exit</li>\n<li>Error exit</li>\n<li>Fatal error</li>\n<li>Killed by another process</li>\n</ul>\n<h3 id=\"12&#x8FDB;&#x7A0B;&#x5C42;&#x6B21;\"><a class=\"anchor\" href=\"#12&#x8FDB;&#x7A0B;&#x5C42;&#x6B21;\">#</a> 1.2<strong> &#x8FDB;&#x7A0B;&#x5C42;&#x6B21;</strong></h3>\n<p>&#x7236;&#x8FDB;&#x7A0B;&#x3001;&#x5B50;&#x8FDB;&#x7A0B;&#x5F62;&#x6210;&#x7684;&#x5C42;&#x7EA7;&#x7ED3;&#x6784;&#xFF1B;<strong>window &#x6CA1;&#x6709;&#x8FDB;&#x7A0B;&#x7684;&#x5C42;&#x6B21;&#x7ED3;&#x6784;&#x7684;&#x6982;&#x5FF5;</strong></p>\n<h3 id=\"13&#x8FDB;&#x7A0B;&#x72B6;&#x6001;\"><a class=\"anchor\" href=\"#13&#x8FDB;&#x7A0B;&#x72B6;&#x6001;\">#</a> 1.3<strong> &#x8FDB;&#x7A0B;&#x72B6;&#x6001;</strong></h3>\n<ul>\n<li>Running</li>\n<li>Ready</li>\n<li>Blocked</li>\n</ul>\n<p>&#x8FDB;&#x7A0B;&#x72B6;&#x6001;&#x4E4B;&#x95F4;&#x7684;&#x76F8;&#x4E92;&#x8F6C;&#x6362;&#xFF1A;</p>\n<p>Process blocks for input &#xFF1A;running -&gt; blocked<br>\nScheduler picks another process: running -&gt; ready<br>\nScheduler picks this process: ready -&gt; running<br>\nInput becomes available: blocked -&gt; running</p>\n<h3 id=\"14&#x8FDB;&#x7A0B;&#x5B9E;&#x73B0;\"><a class=\"anchor\" href=\"#14&#x8FDB;&#x7A0B;&#x5B9E;&#x73B0;\">#</a> 1.4<strong> &#x8FDB;&#x7A0B;&#x5B9E;&#x73B0;</strong></h3>\n<p>&#x5148;&#x8003;&#x8651;&#x4E00;&#x4E2A;&#x8FDB;&#x7A0B;&#x7531;&#x4EC0;&#x4E48;&#x7EC4;&#x6210;&#xFF1A;</p>\n<ul>\n<li>User program</li>\n<li>User data</li>\n<li>stack &#x53D8;&#x91CF;&#x50A8;&#x5B58;&#x7684;&#x5730;&#x65B9;</li>\n<li>PCB</li>\n<li>Process Context\n<ul>\n<li>&#x5BF9;&#x6574;&#x4E2A;&#x6267;&#x884C;&#x8FDB;&#x7A0B;&#x7684;&#x6700;&#x57FA;&#x672C;&#x7684;&#x63CF;&#x8FF0;</li>\n<li>&#x5206;&#x4E3A;&#xFF1A;User Context&#x3001;Register Context&#x3001;System Context</li>\n</ul>\n</li>\n<li>Context Switch &#xFF08;CPU &#x7684;&#x8FDB;&#x7A0B;&#x5207;&#x6362;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x8FDB;&#x7A0B;&#x8C03;&#x5EA6;&#xFF09;\n<ul>\n<li>&#x7531;&#x7CFB;&#x7EDF;&#x7684; schedule &#x6765;&#x6267;&#x884C;</li>\n<li>&#x4FDD;&#x5B58;&#x65E7;&#x8FDB;&#x7A0B;&#x7684; pcb&#xFF0C;&#x52A0;&#x8F7D;&#x65B0;&#x8FDB;&#x7A0B;&#x7684; pcb</li>\n<li>&#x5237;&#x65B0; memory cache</li>\n<li>&#x8F6C;&#x6362;&#x865A;&#x62DF;&#x5185;&#x5B58;&#x6620;&#x5C04;&#xFF08;memory mapping&#xFF09;</li>\n<li>&#x8FDB;&#x7A0B;&#x7684;&#x5207;&#x6362;&#x662F;&#x975E;&#x5E38; cost &#x7684;</li>\n</ul>\n</li>\n<li>PCB Table\n<ul>\n<li>OS &#x7EF4;&#x62A4;&#x7684;&#x8FDB;&#x7A0B;&#x8868;&#xFF0C;&#x6BCF;&#x4E00;&#x9879;&#x5C31;&#x662F;&#x8BE5;&#x8FDB;&#x7A0B;&#x7684; pcb</li>\n<li>PCB table &#x7684;&#x5927;&#x5C0F;&#x53EF;&#x4EE5;&#x8861;&#x91CF;&#x7CFB;&#x7EDF;&#x7684;&#x5E76;&#x53D1;&#x6027;</li>\n<li>&#x4E24;&#x79CD;&#x7EC4;&#x7EC7;&#x5F62;&#x5F0F;&#xFF1A;Link&#x3001;Index</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-&#x7EBF;&#x7A0B;-thread\"><a class=\"anchor\" href=\"#2-&#x7EBF;&#x7A0B;-thread\">#</a> 2 &#x7EBF;&#x7A0B; Thread</h2>\n<h3 id=\"21-thread-concept\"><a class=\"anchor\" href=\"#21-thread-concept\">#</a> 2.1 Thread concept</h3>\n<p>&#x7EBF;&#x7A0B;&#x53EF;&#x4EE5;&#x7406;&#x89E3;&#x4E3A;&#x8FDB;&#x7A0B;&#x7684;&#x8FDB;&#x7A0B;&#x3002;</p>\n<ul>\n<li>&#x539F;&#x8FDB;&#x7A0B; PCB &#x7684;&#x5185;&#x5BB9;&#x5206;&#x6210;&#x4E24;&#x90E8;&#x5206;&#xFF1A;\n<ul>\n<li>&#x63CF;&#x8FF0;&#x8FDB;&#x7A0B;&#x8D44;&#x6E90;&#x548C;&#x7A7A;&#x95F4;&#x7684;&#x90E8;&#x5206;&#xFF1B;</li>\n<li>&#x63CF;&#x8FF0;&#x6267;&#x884C;&#x73B0;&#x573A;&#x3001;&#x72B6;&#x6001;&#x53CA;&#x8C03;&#x5EA6;&#x7684;&#x90E8;&#x5206;&#x3002;</li>\n</ul>\n</li>\n</ul>\n<p>&#x5C06;&#x7B2C;&#x4E8C;&#x90E8;&#x5206;&#x5185;&#x5BB9;&#x4F5C;&#x4E3A;&#x7EBF;&#x7A0B;&#x63A7;&#x5236;&#x5757;<strong> TCB</strong> &#x7684;&#x5185;&#x5BB9;&#xFF0C;&#x4E14;&#x4E00;&#x4E2A;&#x8FDB;&#x7A0B;&#x5185;&#x5141;&#x8BB8;&#x591A;&#x4E2A;<br>\n&#x7EBF;&#x7A0B;&#x5B58;&#x5728;&#x3002;</p>\n<ul>\n<li>&#x65B0;&#x8FDB;&#x7A0B;&#x63CF;&#x8FF0;&#x4E3A;&#xFF1A;\n<ul>\n<li>&#x4E00;&#x4E2A;&#x72EC;&#x7ACB;&#x7684;&#x8FDB;&#x7A0B;&#x7A7A;&#x95F4;&#xFF0C;&#x53EF;&#x88C5;&#x5165;&#x8FDB;&#x7A0B;&#x6620;&#x50CF;&#xFF1B;</li>\n<li>&#x4E00;&#x4E2A;&#x72EC;&#x7ACB;&#x7684;&#x8FDB;&#x7A0B;&#x76F8;&#x5173;&#x8054;&#x7684;&#x6267;&#x884C;&#x6587;&#x4EF6;&#xFF1B;</li>\n<li>&#x8FDB;&#x7A0B;&#x6240;&#x7528;&#x7684;&#x7CFB;&#x7EDF;&#x8D44;&#x6E90;&#xFF1B;</li>\n<li>&#x4E00;&#x4E2A;&#x6216;&#x591A;&#x4E2A;&#x7EBF;&#x7A0B;&#x3002;&#xFF08;&#x8FDB;&#x7A0B;&#x5728;&#x521B;&#x5EFA;&#x65F6;&#x4E00;&#x822C;&#x540C;&#x65F6;&#x521B;&#x5EFA;&#x597D;&#x7B2C;&#x4E00;&#x4E2A;&#x7EBF;&#x7A0B;&#xFF0C;<br>\n&#x5176;&#x4ED6;&#x7EBF;&#x7A0B;&#x6309;&#x9700;&#x8981;&#x7531;&#x7528;&#x6237;&#x7A0B;&#x5E8F;&#x8BF7;&#x6C42;&#x521B;&#x5EFA;&#xFF09;</li>\n</ul>\n</li>\n</ul>\n<p>&#x7EBF;&#x7A0B;&#x4E0D;&#x62E5;&#x6709;&#x7CFB;&#x7EDF;&#x8D44;&#x6E90;&#xFF0C;&#x8FD9;&#x662F;&#x7EBF;&#x7A0B;&#x4E0E;&#x8FDB;&#x7A0B;&#x4E0D;&#x4E00;&#x6837;&#x7684;&#x5730;&#x65B9;&#xFF0C;&#x7EBF;&#x7A0B;&#x53EA;&#x9700;&#x8981;&#x4FDD;&#x8BC1;&#x5176;&#x8FD0;&#x884C;&#x7684;&#x57FA;&#x672C;&#x6570;&#x636E;&#x7ED3;&#x6784;&#xFF1A;TCB&#xFF0C;pc&#xFF0C;a register set and a stack&#xFF0C;&#x5B83;&#x4E0E;&#x8BE5;&#x8FDB;&#x7A0B;&#x7684;&#x5176;&#x4ED6;&#x7EBF;&#x7A0B;&#x5171;&#x4EAB;&#x8BE5;&#x8FDB;&#x7A0B;&#x4E2D;&#x7684;&#x8D44;&#x6E90;</p>\n<h3 id=\"22-&#x91CD;&#x70B9;&#x8FDB;&#x7A0B;&#x548C;&#x7EBF;&#x7A0B;&#x7684;&#x533A;&#x522B;\"><a class=\"anchor\" href=\"#22-&#x91CD;&#x70B9;&#x8FDB;&#x7A0B;&#x548C;&#x7EBF;&#x7A0B;&#x7684;&#x533A;&#x522B;\">#</a> 2.2 &#x91CD;&#x70B9;&#xFF1A;&#x8FDB;&#x7A0B;&#x548C;&#x7EBF;&#x7A0B;&#x7684;&#x533A;&#x522B;</h3>\n<ol>\n<li>&#x8FDB;&#x7A0B;&#x662F;&#x8D44;&#x6E90;&#x5206;&#x914D;&#x7684;&#x57FA;&#x672C;&#x5355;&#x4F4D;&#xFF0C;&#x6240;&#x6709;&#x4E0E;&#x8BE5;&#x8FDB;&#x7A0B;&#x6709;&#x5173;&#x7684;&#x8D44;&#x6E90;&#x5206;<br>\n&#x914D;&#x60C5;&#x51B5;&#xFF0C;&#x5982;&#x6253;&#x5370;&#x673A;&#x3001;I/O &#x7F13;&#x51B2;&#x961F;&#x5217;&#x7B49;&#xFF0C;&#x5747;&#x8BB0;&#x5F55;&#x5728;&#x8FDB;&#x7A0B;&#x63A7;&#x5236;&#x5757;<br>\n PCB &#x4E2D;&#xFF0C;&#x8FDB;&#x7A0B;&#x4E5F;&#x662F;&#x5206;&#x914D;&#x4E3B;&#x5B58;&#x7684;&#x57FA;&#x672C;&#x5355;&#x4F4D;&#xFF0C;&#x5B83;&#x62E5;&#x6709;&#x4E00;&#x4E2A;&#x5B8C;&#x6574;<br>\n&#x7684;&#x865A;&#x62DF;&#x5730;&#x5740;&#x7A7A;&#x95F4;&#x3002;&#x800C;&#x7EBF;&#x7A0B;&#x4E0E;&#x8D44;&#x6E90;&#x5206;&#x914D;&#x65E0;&#x5173;&#xFF0C;&#x5B83;&#x5C5E;&#x4E8E;&#x67D0;&#x4E00;&#x4E2A;<br>\n&#x8FDB;&#x7A0B;&#xFF0C;&#x5E76;&#x4E0E;&#x8BE5;&#x8FDB;&#x7A0B;&#x5185;&#x7684;&#x5176;&#x5B83;&#x7EBF;&#x7A0B;&#x4E00;&#x8D77;&#x5171;&#x4EAB;&#x8FDB;&#x7A0B;&#x7684;&#x8D44;&#x6E90;&#x3002;</li>\n<li>&#x4E0D;&#x540C;&#x7684;&#x8FDB;&#x7A0B;&#x62E5;&#x6709;&#x4E0D;&#x540C;&#x7684;&#x865A;&#x62DF;&#x5730;&#x5740;&#x7A7A;&#x95F4;&#xFF0C;&#x800C;&#x540C;&#x4E00;&#x8FDB;&#x7A0B;&#x4E2D;&#x7684;&#x591A;<br>\n&#x4E2A;&#x7EBF;&#x7A0B;&#x5171;&#x4EAB;&#x540C;&#x4E00;&#x5730;&#x5740;&#x7A7A;&#x95F4;&#x3002;</li>\n<li>&#x8FDB;&#x7A0B;&#x8C03;&#x5EA6;&#x7684;&#x5207;&#x6362;&#x5C06;&#x6D89;&#x53CA;&#x5230;&#x6709;&#x5173;&#x8D44;&#x6E90;&#x6307;&#x9488;&#x7684;&#x4FDD;&#x5B58;&#x53CA;&#x8FDB;&#x7A0B;&#x5730;&#x5740;<br>\n&#x7A7A;&#x95F4;&#x7684;&#x8F6C;&#x6362;&#x7B49;&#x95EE;&#x9898;&#x3002;&#x800C;&#x7EBF;&#x7A0B;&#x7684;&#x5207;&#x6362;&#x5C06;&#x4E0D;&#x6D89;&#x53CA;&#x8D44;&#x6E90;&#x6307;&#x9488;&#x7684;&#x4FDD;<br>\n&#x5B58;&#x548C;&#x5730;&#x5740;&#x7A7A;&#x95F4;&#x7684;&#x53D8;&#x5316;&#x3002;&#x6240;&#x4EE5;&#xFF0C;&#x7EBF;&#x7A0B;&#x5207;&#x6362;&#x7684;&#x5F00;&#x9500;&#x8981;&#x6BD4;&#x8FDB;&#x7A0B;&#x5207;<br>\n&#x6362;&#x7684;&#x5F00;&#x9500;&#x5C0F;&#x5F97;&#x591A;&#x3002;</li>\n<li>&#x8FDB;&#x7A0B;&#x7684;&#x8C03;&#x5EA6;&#x4E0E;&#x5207;&#x6362;&#x90FD;&#x662F;&#x7531;&#x64CD;&#x4F5C;&#x7CFB;&#x7EDF;&#x5185;&#x6838;&#x5B8C;&#x6210;&#xFF0C;&#x800C;&#x7EBF;&#x7A0B;&#x5219;<br>\n&#x65E2;&#x53EF;&#x7531;&#x64CD;&#x4F5C;&#x7CFB;&#x7EDF;&#x5185;&#x6838;&#x5B8C;&#x6210;&#xFF0C;&#x4E5F;&#x53EF;&#x7531;&#x7528;&#x6237;&#x7A0B;&#x5E8F;&#x8FDB;&#x884C;&#x3002;</li>\n<li>&#x8FDB;&#x7A0B;&#x53EF;&#x4EE5;&#x52A8;&#x6001;&#x521B;&#x5EFA;&#x8FDB;&#x7A0B;&#x3002;&#x88AB;&#x8FDB;&#x7A0B;&#x521B;&#x5EFA;&#x7684;&#x7EBF;&#x7A0B;&#x4E5F;&#x53EF;&#x4EE5;&#x521B;&#x5EFA;<br>\n&#x5176;&#x5B83;&#x7EBF;&#x7A0B;&#x3002;</li>\n<li>&#x8FDB;&#x7A0B;&#x6709;&#x521B;&#x5EFA;&#x3001;&#x6267;&#x884C;&#x3001;&#x6D88;&#x4EA1;&#x7684;&#x751F;&#x547D;&#x5468;&#x671F;&#x3002;&#x7EBF;&#x7A0B;&#x4E5F;&#x6709;&#x7C7B;&#x4F3C;&#x7684;<br>\n&#x751F;&#x547D;&#x5468;&#x671F;&#x3002;</li>\n</ol>\n<h3 id=\"23-thread-advantage\"><a class=\"anchor\" href=\"#23-thread-advantage\">#</a> 2.3 Thread Advantage</h3>\n<ol>\n<li>&#x7EBF;&#x7A0B;&#x7684;&#x521B;&#x9020;&#xFF0C;&#x5207;&#x6362;&#xFF0C;&#x7ED3;&#x675F;&#x7684;&#x5F00;&#x9500;&#x5C0F;</li>\n<li>&#x7EBF;&#x7A0B;&#x901A;&#x4FE1;&#x975E;&#x5E38;&#x7B80;&#x5355;&#xFF0C;&#x56E0;&#x4E3A;&#x5171;&#x4EAB;&#x8D44;&#x6E90;&#xFF0C;&#x516C;&#x7528;&#x4E00;&#x5757;&#x865A;&#x62DF;&#x5185;&#x5B58;</li>\n</ol>\n<h3 id=\"24-thread-usage\"><a class=\"anchor\" href=\"#24-thread-usage\">#</a> 2.4 Thread Usage</h3>\n<p>&#x4E3A;&#x4EC0;&#x4E48;&#x8981;&#x4F7F;&#x7528; thread &#x5462;&#xFF1F;</p>\n<ul>\n<li>&#x54CD;&#x5E94;&#x6027;&#xFF1A;&#x591A;&#x4E2A;&#x6D3B;&#x52A8;&#x540C;&#x65F6;&#x8FDB;&#x884C;</li>\n<li>&#x8D44;&#x6E90;&#x5171;&#x4EAB;</li>\n<li>&#x5F00;&#x9500;&#x5C0F;&#xFF1A;&#x521B;&#x9020;&#x548C;&#x9500;&#x6BC1;&#x7684;&#x5F00;&#x9500;&#x5C0F;</li>\n<li>&#x5728;&#x591A;&#x5904;&#x7406;&#x5668;&#x7ED3;&#x6784;&#x7684;&#x7CFB;&#x7EDF;&#x4E2D;&#x975E;&#x5E38;&#x597D;&#x7528;</li>\n</ul>\n<h3 id=\"25-thread&#x7684;&#x5B9E;&#x73B0;\"><a class=\"anchor\" href=\"#25-thread&#x7684;&#x5B9E;&#x73B0;\">#</a> 2.5 Thread &#x7684;&#x5B9E;&#x73B0;</h3>\n<p>&#x4E09;&#x79CD;&#x67B6;&#x6784;</p>\n<ul>\n<li>&#x7528;&#x6237;&#x7A7A;&#x95F4;</li>\n<li>&#x5185;&#x6838;&#x7A7A;&#x95F4;</li>\n<li>&#x4E24;&#x8005;&#x6DF7;&#x5408;</li>\n</ul>\n<h4 id=\"251-user-threads\"><a class=\"anchor\" href=\"#251-user-threads\">#</a> 2.5.1 User Threads</h4>\n<ul>\n<li>&#x7EBF;&#x7A0B;&#x6253;&#x5305;&#x5728;&#x7528;&#x6237;&#x6001;&#xFF0C;&#x5185;&#x6838;&#x5B8C;&#x5168;&#x4E0D;&#x77E5;&#x9053;&#x7EBF;&#x7A0B;</li>\n<li>&#x7EBF;&#x7A0B;&#x5207;&#x6362;&#x4E0D;&#x9700;&#x8981;&#x5185;&#x6838;&#x7684;&#x6743;&#x9650;&#xFF0C;&#x5207;&#x6362;&#x5F00;&#x9500;&#x5C0F;&#x4E14;&#x5FEB;&#x901F;</li>\n<li>&#x95EE;&#x9898;&#xFF1A;&#x5982;&#x679C;&#x5185;&#x6838;&#x662F;&#x5355;&#x7EBF;&#x7A0B;&#x7684;&#xFF0C;&#x4EFB;&#x4F55;&#x7528;&#x6237;&#x6001;&#x7EBF;&#x7A0B;&#x8C03;&#x7528;&#x4E86;&#x4E00;&#x8C03;&#x6B63;&#x5728;&#x963B;&#x585E;&#x7684;&#x7CFB;&#x7EDF;&#x8C03;&#x7528;&#xFF0C;&#x5C31;&#x4F1A;&#x5BFC;&#x81F4;&#x6574;&#x4E2A;&#x8FDB;&#x7A0B;&#x8FDB;&#x5165;&#x963B;&#x585E;&#x72B6;&#x6001;&#x3002;&#x7EBF;&#x7A0B;&#x7684;&#x963B;&#x585E;&#x4F1A;&#x5BFC;&#x81F4;&#x8FDB;&#x7A0B;&#x7684;&#x963B;&#x585E;</li>\n</ul>\n<h4 id=\"252-kernel-threads\"><a class=\"anchor\" href=\"#252-kernel-threads\">#</a> 2.5.2 Kernel Threads</h4>\n<ul>\n<li>&#x5185;&#x6838;&#x8D1F;&#x8D23;&#x7BA1;&#x7406;&#x7EBF;&#x7A0B;&#xFF0C;&#x8D1F;&#x8D23;&#x7EBF;&#x7A0B;&#x7684;&#x521B;&#x9020;&#x3001;&#x8C03;&#x5EA6;&#x3001;&#x9500;&#x6BC1;</li>\n<li>&#x6CA1;&#x6709;&#x7EBF;&#x7A0B;&#x5E93;&#xFF0C;&#x5185;&#x6838;&#x63D0;&#x4F9B;&#x7EBF;&#x7A0B;&#x76F8;&#x5173;&#x7684; api</li>\n<li>&#x5185;&#x6838;&#x4FDD;&#x6301;&#x7740;&#x8FDB;&#x7A0B;&#x548C;&#x7EBF;&#x7A0B;&#x7684; context</li>\n<li>&#x7EBF;&#x7A0B;&#x5207;&#x6362;&#x9700;&#x8981;&#x5185;&#x6838;&#xFF0C;&#x6240;&#x4EE5;&#x7EBF;&#x7A0B;&#x662F;&#x8C03;&#x5EA6;&#x5668;&#x7684;&#x57FA;&#x672C;&#x5355;&#x4F4D;&#xFF0C;&#x8C03;&#x5EA6;&#x5668;&#x8C03;&#x5EA6;&#x7684;&#x662F;&#x7EBF;&#x7A0B;</li>\n<li>&#x7F3A;&#x70B9;&#x662F; high cost</li>\n</ul>\n<h3 id=\"3-&#x8003;&#x8BD5;&#x91CD;&#x70B9;&#x8FDB;&#x7A0B;&#x901A;&#x4FE1;ipc\"><a class=\"anchor\" href=\"#3-&#x8003;&#x8BD5;&#x91CD;&#x70B9;&#x8FDB;&#x7A0B;&#x901A;&#x4FE1;ipc\">#</a> 3 &#x8003;&#x8BD5;&#x91CD;&#x70B9;&#xFF1A;&#x8FDB;&#x7A0B;&#x901A;&#x4FE1;&#xFF08;IPC&#xFF09;</h3>\n<p><strong>&#x8FD9;&#x90E8;&#x5206;&#x91CD;&#x70B9;&#x8BA8;&#x8BBA;&#x4EE5;&#x4E0B; issue&#xFF1A;</strong></p>\n<ul>\n<li>&#x8FDB;&#x7A0B;&#x95F4;&#x5982;&#x4F55;&#x4F20;&#x9012;&#x4FE1;&#x606F;</li>\n<li>&#x8D44;&#x6E90;&#x5171;&#x4EAB;</li>\n<li>&#x8FDB;&#x7A0B;&#x540C;&#x6B65;&#xFF08;process synchronization&#xFF09;</li>\n</ul>\n<p>&#x5728;&#x8D44;&#x6E90;&#x5171;&#x4EAB;&#x4E2D;&#x5B58;&#x5728;&#x4E00;&#x4E2A;&#x91CD;&#x8981;&#x7684;&#x8BA4;&#x8BC6;&#xFF1A;&#x7ADE;&#x4E89;&#xFF08;Race&#xFF09;</p>\n<p>&#x5B58;&#x5728;&#x7ADE;&#x4E89;&#x7684;&#x6761;&#x4EF6;&#xFF1A;</p>\n<ul>\n<li>\n<p>&#x591A;&#x4E2A;&#x8FDB;&#x7A0B;&#x8BBF;&#x95EE;&#x4E34;&#x754C;&#x533A;&#x7684; data&#xFF0C;&#x5E76;&#x4E14;&#x8FDB;&#x7A0B;&#x8FD0;&#x884C;&#x7684;&#x7ED3;&#x679C;&#x9700;&#x8981;&#x591A;&#x6B65;&#x8BBF;&#x95EE;&#x4E34;&#x754C;&#x533A;</p>\n</li>\n<li>\n<p>&#x907F;&#x514D;&#x7ADE;&#x4E89;&#x7684;&#x65B9;&#x6CD5;&#x662F;&#x907F;&#x514D;&#x591A;&#x4E2A;&#x8FDB;&#x7A0B;&#x5BF9;&#x4E34;&#x754C;&#x533A;&#x7684; data &#x540C;&#x65F6;&#x8FDB;&#x884C;&#x8BFB;&#x5199;&#x3002;</p>\n</li>\n<li>\n<p>&#x4E34;&#x754C;&#x8D44;&#x6E90; Critical Resource&#xFF1A;&#x4E00;&#x6B21;&#x53EA;&#x5141;&#x8BB8;&#x4E00;&#x4E2A;&#x8FDB;&#x7A0B;&#x8BBF;&#x95EE;</p>\n</li>\n<li>\n<p>&#x4E34;&#x754C;&#x533A; Critical Region&#xFF1A;&#x8BBF;&#x95EE;&#x4E34;&#x754C;&#x8D44;&#x6E90;&#x7684;&#x4EE3;&#x7801;&#x6BB5;</p>\n</li>\n</ul>\n<h3 id=\"31-&#x4E92;&#x65A5;&#x8BBF;&#x95EE;&#x8D44;&#x6E90;-mutual-exclusion\"><a class=\"anchor\" href=\"#31-&#x4E92;&#x65A5;&#x8BBF;&#x95EE;&#x8D44;&#x6E90;-mutual-exclusion\">#</a> 3.1 &#x4E92;&#x65A5;&#x8BBF;&#x95EE;&#x8D44;&#x6E90; Mutual Exclusion</h3>\n<p>&#x9020;&#x6210;&#x4E92;&#x65A5;&#x6392;&#x65A5;&#x7684;&#x56DB;&#x4E2A;&#x6761;&#x4EF6;&#xFF1A;</p>\n<ol>\n<li>&#x6CA1;&#x6709;&#x4E24;&#x4E2A;&#x8FDB;&#x7A0B;&#x540C;&#x65F6;&#x5B58;&#x5728;&#x5728;&#x4E34;&#x754C;&#x533A;&#xFF08;&#x4E92;&#x65A5;&#xFF09;</li>\n<li>&#x6CA1;&#x6709;&#x5BF9; CPU &#x7684;&#x901F;&#x5EA6;&#x548C;&#x6570;&#x91CF;&#x8FDB;&#x884C;&#x5047;&#x8BBE;</li>\n<li>&#x6CA1;&#x6709;&#x5728;&#x4E34;&#x754C;&#x533A;&#x5916;&#x8FD0;&#x884C;&#x7684;&#x8FDB;&#x7A0B;&#x53EF;&#x4EE5;&#x9501;&#x4F4F;&#x53E6;&#x4E00;&#x4E2A;&#x8FDB;&#x7A0B;&#xFF08;&#x975E;&#x62A2;&#x5360;&#x5F0F;&#xFF09;</li>\n<li>&#x6CA1;&#x6709;&#x8FDB;&#x7A0B;&#x5FC5;&#x987B;&#x6C38;&#x8FDC;&#x7684;&#x7B49;&#x5F85;&#x8FDB;&#x5165;&#x4E34;&#x754C;&#x533A;</li>\n</ol>\n<p><strong>&#x5982;&#x4F55;&#x5B9E;&#x73B0;&#x8D44;&#x6E90;&#x4E92;&#x65A5;&#x6392;&#x65A5;&#x8BBF;&#x95EE;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x80FD;&#x591F;&#x8BA9;&#x591A;&#x4E2A;&#x8FDB;&#x7A0B;&#x540C;&#x65F6;&#x5728;&#x4E34;&#x754C;&#x533A;&#x8FD0;&#x884C;</strong></p>\n<ol>\n<li><strong>&#x7981;&#x7528;&#x4E2D;&#x65AD;</strong>\n<ul>\n<li>&#x8FDB;&#x5165;&#x4E34;&#x754C;&#x533A;&#x540E;&#xFF0C;&#x7981;&#x7528;&#x6240;&#x6709;&#x7684;&#x4E2D;&#x65AD;&#x76F4;&#x5230;&#x8FDB;&#x7A0B;&#x79BB;&#x5F00;&#x4E34;&#x754C;&#x533A;</li>\n<li>&#x65F6;&#x949F;&#x4E2D;&#x65AD;&#x4E0D;&#x4F1A;&#x53D1;&#x751F;&#x65F6;&#xFF0C;&#x8FDB;&#x7A0B;&#x5207;&#x6362;&#x4E0D;&#x4F1A;&#x53D1;&#x751F;&#xFF0C;&#x8FD9;&#x6837;&#x5728;&#x8FDB;&#x7A0B;&#x5B8C;&#x6210;&#x4E34;&#x754C;&#x533A;&#x8BBF;&#x95EE;&#x524D;&#x90FD;&#x4E0D;&#x4F1A;&#x88AB;&#x6253;&#x65AD;&#x3002;</li>\n<li>&#x7981;&#x7528;&#x4E2D;&#x65AD;&#x540E;&#xFF0C;&#x6240;&#x6709;&#x7684;&#x7A0B;&#x5E8F;&#x90FD;&#x4F1A;&#x6309;&#x7167;&#x987A;&#x5E8F;&#x8FD0;&#x884C;&#xFF0C;&#x8FD9;&#x6837;&#x4E34;&#x754C;&#x533A;&#x7684; data &#x5C31;&#x80FD;&#x88AB;&#x6B63;&#x786E;&#x7684;&#x4FEE;&#x6539;&#x8BBF;&#x95EE;&#x3002;</li>\n<li>&#x53EA;&#x4F1A;&#x5728; OS &#x7CFB;&#x7EDF;&#x5185;&#x4F7F;&#x7528;</li>\n</ul>\n</li>\n<li><strong>&#x9501;&#x53D8;&#x91CF;&#x1F512;</strong>\n<ul>\n<li>&#x5E38;&#x89C1;&#x7684;&#x6709;&#x4E92;&#x65A5;&#x9501; Mutux Lock</li>\n</ul>\n</li>\n<li><strong>Strict Alternation &#x4E25;&#x683C;&#x53D8;&#x66F4;</strong></li>\n<li><strong>Peterson&apos;s</strong><br>\n &#x4F7F;&#x7528; turn &#x548C; interested [i]&#xFF0C;&#x5F53;&#x4E00;&#x4E2A;&#x8FDB;&#x7A0B;&#x6253;&#x7B97;&#x8FDB;&#x5165;&#x4E34;&#x754C;&#x533A;&#x65F6;&#xFF0C;&#x4F1A;&#x68C0;&#x67E5;&#x5F53;&#x524D; turn &#x662F;&#x4E0D;&#x662F;&#x81EA;&#x5DF1;&#x7684;&#x8FDB;&#x7A0B;&#x548C;&#x53E6;&#x4E00;&#x4E2A;&#x8FDB;&#x7A0B;&#x7684;&#x662F;&#x5426;&#x5BF9;&#x4E34;&#x754C;&#x533A;&#x611F;&#x5174;&#x8DA3;&#xFF0C;&#x5982;&#x679C; turn &#x4E0D;&#x662F;&#x81EA;&#x5DF1;&#x7684;&#x6216;&#x8005;&#x53E6;&#x4E00;&#x4E2A;&#x8FDB;&#x7A0B;&#x4E0D;&#x611F;&#x5174;&#x8DA3;&#xFF0C;&#x624D;&#x53EF;&#x4EE5;&#x8BBF;&#x95EE;&#xFF1B;&#x5982;&#x679C; turn &#x662F;&#x81EA;&#x5DF1;&#x7684;&#x5E76;&#x4E14;&#x53E6;&#x4E00;&#x4E2A;&#x8FDB;&#x7A0B;&#x611F;&#x5174;&#x8DA3;&#xFF0C;&#x4F1A;&#x5361;&#x5728;&#x5FAA;&#x73AF;&#x4E2D;&#x3002;</li>\n</ol>\n<p>turn &#x7684;&#x4F5C;&#x7528;&#xFF1A;&#x9632;&#x6B62;&#x4E24;&#x4E2A;&#x8FDB;&#x7A0B;&#x540C;&#x65F6;&#x628A; interested &#x8BBE;&#x7F6E;&#x4E3A; true&#xFF0C;&#x5BFC;&#x81F4;&#x4E24;&#x4E2A;&#x8FDB;&#x7A0B;&#x5361;&#x5728; while &#x5FAA;&#x73AF;</p>\n<ol start=\"5\">\n<li>&#x786C;&#x4EF6;&#x65B9;&#x6CD5; TSL</li>\n</ol>\n<h4 id=\"311-mutual-exclusion-with-busy-waiting\"><a class=\"anchor\" href=\"#311-mutual-exclusion-with-busy-waiting\">#</a> 3.1.1 Mutual Exclusion with Busy Waiting</h4>\n<p>&#x65B9;&#x6CD5;&#x56DB;&#x3001;&#x65B9;&#x6CD5;&#x4E94;&#x9700;&#x8981;&#x8FDB;&#x7A0B;&#x8FDB;&#x884C;&#x5FD9;&#x7B49;&#x5F85;&#xFF0C;&#x5C31;&#x662F;&#x5361; while &#x5FAA;&#x73AF;&#xFF0C;&#x8FDB;&#x7A0B;&#x6CA1;&#x6709;&#x8FDB;&#x5165; block &#x72B6;&#x6001;&#x3002;</p>\n<p>&#x8FD9;&#x4F1A;&#x5BFC;&#x81F4;&#x4E00;&#x4E2A;&#x95EE;&#x9898;&#xFF1A;&#x4F18;&#x5148;&#x7EA7;&#x53CD;&#x8F6C;&#x95EE;&#x9898;&#xFF1A;&#x4F18;&#x5148;&#x7EA7;&#x4F4E;&#x7684;&#x8FDB;&#x7A0B;&#x5728; blocking &#x4F18;&#x5148;&#x7EA7;&#x9AD8;&#x7684;&#x8FDB;&#x7A0B;&#x3002;</p>\n<p>&#x89E3;&#x51B3;&#xFF1A;<strong>sleep and wakeup</strong><br>\n &#x8BA9;&#x8FDB;&#x7A0B;&#x8FDB;&#x5165; block &#x72B6;&#x6001;&#xFF0C;&#x800C;&#x4E0D;&#x662F; busy waiting&#xFF1B;&#x5F53;&#x80FD;&#x591F;&#x8FDB;&#x5165;&#x4E34;&#x754C;&#x533A;&#x540E;&#x518D;&#x5524;&#x9192; wakeup</p>\n<h3 id=\"32-&#x91CD;&#x70B9;&#x6D88;&#x8D39;&#x8005;&#x751F;&#x4EA7;&#x8005;&#x95EE;&#x9898;\"><a class=\"anchor\" href=\"#32-&#x91CD;&#x70B9;&#x6D88;&#x8D39;&#x8005;&#x751F;&#x4EA7;&#x8005;&#x95EE;&#x9898;\">#</a> 3.2 &#x91CD;&#x70B9;&#xFF1A;&#x6D88;&#x8D39;&#x8005;&#x751F;&#x4EA7;&#x8005;&#x95EE;&#x9898;</h3>\n<h4 id=\"321-&#x4FE1;&#x53F7;&#x91CF;&#x5FC5;&#x8003;&#x4E2D;&#x7684;&#x5FC5;&#x8003;-semaphores\"><a class=\"anchor\" href=\"#321-&#x4FE1;&#x53F7;&#x91CF;&#x5FC5;&#x8003;&#x4E2D;&#x7684;&#x5FC5;&#x8003;-semaphores\">#</a> 3.2.1 &#x4FE1;&#x53F7;&#x91CF;&#x5FC5;&#x8003;&#x4E2D;&#x7684;&#x5FC5;&#x8003; Semaphores</h4>\n<p>Semaphores = 0&#xFF1A;no wakeups were saved; some value: one or more wakeups were pending</p>\n<p>&#x7531;&#x4E24;&#x90E8;&#x5206;&#x7EC4;&#x6210;&#xFF1A;</p>\n<ul>\n<li>an integer counter&#xFF0C;COUNT</li>\n<li>a queue of pids of blocked processes&#xFF0C;Q</li>\n</ul>\n<p>&#x5BF9;&#x4FE1;&#x53F7;&#x91CF;&#x7684;&#x64CD;&#x4F5C;&#x5206;&#x4E3A;&#x4E24;&#x79CD;&#xFF1A;</p>\n<ul>\n<li>P () or wait () or down () &#xFF1A;&#x7533;&#x8BF7;&#x8D44;&#x6E90;&#xFF0C;&#x51CF;&#x5C11;&#x4FE1;&#x53F7;&#x91CF;</li>\n<li>V () or signal () or up () : &#x91CA;&#x653E;&#x8D44;&#x6E90;&#xFF0C;&#x589E;&#x52A0;&#x4FE1;&#x53F7;&#x91CF;</li>\n</ul>\n<p>&#x4FE1;&#x53F7;&#x91CF;&#x4E3A;&#x6B63;&#x65F6;&#x8868;&#x793A;&#x5F53;&#x524D;&#x8D44;&#x6E90;&#x53EF;&#x4EE5;&#x88AB;&#x591A;&#x5C11;&#x8FDB;&#x7A0B;&#x8BBF;&#x95EE;&#xFF1B;&#x4FE1;&#x53F7;&#x91CF;&#x4E3A;&#x8D1F;&#x65F6;&#x8868;&#x5F53;&#x524D;&#x6709;&#x591A;&#x5C11;&#x8FDB;&#x7A0B;&#x5728;&#x7B49;&#x5F85;&#x3002;</p>\n<h4 id=\"322-mutex-&#x4E92;&#x65A5;&#x4FE1;&#x53F7;&#x91CF;\"><a class=\"anchor\" href=\"#322-mutex-&#x4E92;&#x65A5;&#x4FE1;&#x53F7;&#x91CF;\">#</a> 3.2.2 Mutex &#x4E92;&#x65A5;&#x4FE1;&#x53F7;&#x91CF;</h4>\n<p>&#x4E3A;&#x4EC0;&#x4E48;&#x4E0D;&#x4F7F;&#x7528; Mutex&#xFF1F;</p>\n<p>&#x7F13;&#x51B2;&#x533A;&#x5927;&#x5C0F;&#x4E3A; 1&#xFF0C;&#x4EFB;&#x4F55;&#x65F6;&#x523B;&#xFF0C;apple&#x3001;orange &#x548C; plate &#x4E09;&#x4E2A;&#x540C;&#x6B65;&#x4FE1;&#x53F7;&#x91CF;&#x4E2D;&#x6700;&#x591A;&#x53EA;&#x6709;&#x4E00;&#x4E2A;&#x662F; 1 &#x3002;&#x56E0;&#x6B64;&#xFF0C;&#x5728;&#x4EFB;&#x4F55;&#x65F6;&#x523B;&#xFF0C;&#x6700;&#x591A;&#x53EA;&#x6709;&#x4E00;&#x4E2A;&#x96C6;&#x6210;&#x7684; P &#x64CD;&#x4F5C;&#x4E0D;&#x4F1A;&#x88AB;&#x963B;&#x585E;&#x3002;</p>\n<p>&#x5BF9;&#x4E8E;&#x7F13;&#x51B2;&#x533A;&#x5927;&#x5C0F;&#x5927;&#x4E8E; 1&#xFF08;&#x4FE1;&#x53F7;&#x91CF;&#x5141;&#x8BB8;&#x7684;&#x503C;&#x5927;&#x4E8E; 1&#xFF09;&#x7684;&#x4EE3;&#x7801;&#xFF1A;<br>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">P(plate);</span><br><span class=\"line\">P(mutex);</span><br><span class=\"line\">&#x5BF9;plate&#x4E34;&#x754C;&#x533A;&#x4E2D;&#x7684;&#x4E8B;&#x7269;&#x8FDB;&#x884C;&#x64CD;&#x4F5C;&#xFF1B;</span><br><span class=\"line\">V(mutex);</span><br><span class=\"line\">V(plate);</span><br></pre></td></tr></table></figure></p>\n<p>Semaphores &#x5927;&#x4E8E; 1 &#x65F6;&#xFF0C;&#x5C31;&#x5FC5;&#x987B;&#x8BBE;&#x5B9A;&#x4E00;&#x4E2A; mutex &#x6765;&#x4FDD;&#x8BC1;&#x4E92;&#x65A5;&#x8BBF;&#x95EE;&#x7F13;&#x51B2;&#x533A;&#x3002;</p>\n<p><strong>PV &#x64CD;&#x4F5C;&#x9898;&#x7684;&#x89E3;&#x9898;&#x601D;&#x8DEF;&#xFF1A;</strong></p>\n<ol>\n<li>&#x5173;&#x7CFB;&#x5206;&#x6790;&#xFF1A;&#x627E;&#x51FA;&#x9898;&#x76EE;&#x4E2D;&#x63CF;&#x8FF0;&#x7684;&#x5404;&#x4E2A;&#x8FDB;&#x7A0B;&#xFF1B;&#x5206;&#x6790;&#x4ED6;&#x4EEC;&#x4E4B;&#x95F4;&#x7684;&#x540C;&#x6B65;&#x3001;&#x4E92;&#x65A5;&#x5173;&#x7CFB;&#x3002;&#x627E;&#x5230;&#x4E0D;&#x80FD;&#x540C;&#x65F6;&#x53D1;&#x751F;&#x7684;&#x4E8B;&#x60C5;&#x5C31;&#x662F;&#x4E34;&#x754C;&#x533A;&#x3002;&#x4E0D;&#x80FD;&#x540C;&#x65F6;&#x53D1;&#x751F;&#x7684;&#x4E8B;&#x60C5;&#x53EF;&#x80FD;&#x6709;&#x591A;&#x4E2A;&#x3002;</li>\n<li>&#x8BBE;&#x7F6E;&#x4FE1;&#x53F7;&#x91CF;&#xFF1A;&#x4E92;&#x65A5;&#x4FE1;&#x53F7;&#x91CF;&#x521D;&#x59CB;&#x503C;&#x4E3A; 1&#xFF0C;&#x540C;&#x6B65;&#x4FE1;&#x53F7;&#x91CF;&#x521D;&#x503C;&#x8981;&#x770B;&#x5BF9;&#x5E94;&#x8D44;&#x6E90;&#x7684;&#x521D;&#x59CB;&#x503C;&#x662F;&#x591A;&#x5C11;&#x3002;</li>\n</ol>\n<p><strong>issue</strong></p>\n<ul>\n<li>P&#xFF08;S&#xFF09;&#x8868;&#x793A;&#x7533;&#x8BF7;&#x8D44;&#x6E90;&#xFF1B;V&#xFF08;S&#xFF09;&#x8868;&#x793A;&#x91CA;&#x653E;&#x4E00;&#x4E2A;&#x5B57;&#x773C;</li>\n<li>P&#x3001;V &#x64CD;&#x4F5C;&#x5FC5;&#x987B;&#x6210;&#x5BF9;&#x51FA;&#x73B0;&#xFF0C;&#x7533;&#x8BF7;&#x610F;&#x5473;&#x7740;&#x672A;&#x6765;&#x4E00;&#x5B9A;&#x4F1A;&#x91CA;&#x653E;&#x3002;&#x5F53;&#x4E3A;&#x4E92;&#x65A5;&#x64CD;&#x4F5C;&#x65F6;&#xFF0C;&#x51FA;&#x73B0;&#x5728;&#x540C;&#x8FDB;&#x7A0B;&#xFF1B;&#x5F53;&#x4E3A;&#x540C;&#x6B65;&#x64CD;&#x4F5C;&#x65F6;&#xFF0C;&#x4E0D;&#x5728;&#x540C;&#x8FDB;&#x7A0B;&#x51FA;&#x73B0;&#xFF1B;</li>\n<li>&#x5982;&#x679C;&#x4E00;&#x4E2A;&#x540C;&#x6B65; P &#x548C;&#x4E92;&#x65A5; P &#x64CD;&#x4F5C;&#x5728;&#x4E00;&#x8D77;&#x65F6;&#xFF0C;&#x540C;&#x6B65; P &#x5728;&#x4E92;&#x65A5; P &#x524D;&#x9762;</li>\n</ul>\n<h3 id=\"4-monitors\"><a class=\"anchor\" href=\"#4-monitors\">#</a> 4 Monitors</h3>\n<p>&#x7A0B;&#x5E8F;&#x3001;&#x53D8;&#x91CF;&#x548C;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x5728;&#x4E00;&#x4E2A; package &#x7684;&#x96C6;&#x5408;&#xFF0C;&#x53EF;&#x4EE5;&#x7406;&#x89E3;&#x4E3A;&#x4E00;&#x4E2A;&#x53EA;&#x80FD;&#x88AB;&#x4E00;&#x4E2A;&#x8FDB;&#x7A0B;&#x8BBF;&#x95EE;&#x7684;&#x4EE3;&#x7801;&#x5757;&#x3002;</p>\n<p>&#x8BBF;&#x95EE; Monitor &#x7684;&#x89C4;&#x5219;:</p>\n<ul>\n<li>&#x8FDB;&#x7A0B;&#x548C;&#x7EBF;&#x7A0B;&#x8C03;&#x7528;&#x7A0B;&#x5E8F;&#x8BBF;&#x95EE; Monitor</li>\n<li>&#x4E92;&#x65A5;&#x8BBF;&#x95EE; Monitor</li>\n<li>&#x4E0D;&#x80FD;&#x76F4;&#x63A5;&#x8BBF;&#x95EE; Monitor &#x7684;&#x53D8;&#x91CF;</li>\n<li>Monitor &#x53EF;&#x4EE5;&#x53EA;&#x53EF;&#x4EE5;&#x8BBF;&#x95EE;&#x5B83;&#x7684;&#x5C40;&#x90E8;&#x53D8;&#x91CF;</li>\n</ul>\n<p>monitor &#x5982;&#x4F55;&#x5B9E;&#x73B0;&#x8FDB;&#x7A0B;&#x540C;&#x6B65;&#x8BBF;&#x95EE;&#xFF1A;</p>\n<ul>\n<li>&#x4F7F;&#x7528; condition &#x53D8;&#x91CF;&#x3002;</li>\n<li>&#x4F7F;&#x7528; wait&#xFF08;x&#xFF09;&#x6765;&#x7B49;&#x5F85;&#x6709;&#x4EBA;&#x4F7F;&#x7528;&#x4E86; condition &#x53D8;&#x91CF;&#xFF0C;&#x4F1A;&#x662F; condition+1&#xFF0C;&#x4F7F;&#x7528; signal&#xFF08;x&#xFF09;&#x6765;&#x4F7F;&#x7528; condition &#x53D8;&#x91CF;&#xFF0C;&#x4F1A;&#x4F7F; condition-1</li>\n</ul>\n<p>&#x4F7F;&#x7528; monitor &#x89E3;&#x51B3;&#x751F;&#x4EA7;&#x8005;&#x6D88;&#x8D39;&#x8005;&#x95EE;&#x9898;&#xFF1A;</p>\n<ul>\n<li>&#x9700;&#x8981;&#x4F7F;&#x7528; count&#xFF0C;&#x4E00;&#x822C;&#x8868;&#x793A;&#x7F13;&#x51B2;&#x533A;&#x7684;&#x6570;&#x76EE;&#x3002;</li>\n<li><strong>&#x5F53; count=1 &#x65F6;&#xFF0C;&#x5C31;&#x8981; signal&#xFF08;empty&#xFF09;&#xFF0C;&#x53D1;&#x51FA;&#x7A7A;&#x4FE1;&#x53F7;&#xFF0C;&#x8BF4;&#x660E;&#x5DF2;&#x7ECF;&#x4E0D;&#x7A7A;&#x4E86;&#xFF0C;&#x8BA9; wait empty &#x7684;&#x8FDB;&#x7A0B;&#x5F97;&#x4EE5;&#x8BBF;&#x95EE; count &#x4E86;&#xFF1B;&#x5F53; count=N-1 &#x65F6;&#xFF0C;&#x5C31;&#x8981; signal&#xFF08;full&#xFF09;&#xFF0C;&#x53D1;&#x51FA;&#x6EE1;&#x4FE1;&#x53F7;&#xFF0C;&#x8BF4;&#x660E;&#x73B0;&#x5728; count &#x5DF2;&#x7ECF;&#x4E0D;&#x6EE1;&#x4E86;&#x3002;</strong></li>\n</ul>\n<h3 id=\"5-message-passing\"><a class=\"anchor\" href=\"#5-message-passing\">#</a> 5 Message passing</h3>\n<p>&#x8FDB;&#x7A0B;&#x901A;&#x4FE1;&#x7684;&#x65B9;&#x6CD5;&#xFF1A;</p>\n<ul>\n<li>&#x5171;&#x4EAB; memory</li>\n<li>&#x5171;&#x4EAB; file mode</li>\n<li>Message passing&#xFF1A;\n<ul>\n<li>send and Receive</li>\n<li>send&#xFF08;addr&#xFF0C;msg&#xFF09;&#xFF1B;</li>\n<li>recv&#xFF08;addr&#xFF0C;msg&#xFF09;&#xFF1B;</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"6-barrier\"><a class=\"anchor\" href=\"#6-barrier\">#</a> 6 Barrier</h3>\n<p>Barrier &#x7684;&#x4F7F;&#x7528;&#xFF1A;</p>\n<ul>\n<li>&#x8FDB;&#x7A0B;&#x4EEC;&#x9760;&#x8FD1; Barrier</li>\n<li>&#x6240;&#x6709;&#x7684;&#x8FDB;&#x7A0B;&#x5230;&#x8FBE;&#x662F;&#x624D;&#x5141;&#x8BB8;&#x6240;&#x6709;&#x7684;&#x8FDB;&#x7A0B;&#x901A;&#x8FC7; Barrier</li>\n</ul>\n<h3 id=\"7-&#x5176;&#x4ED6;&#x7684;ipc&#x95EE;&#x9898;\"><a class=\"anchor\" href=\"#7-&#x5176;&#x4ED6;&#x7684;ipc&#x95EE;&#x9898;\">#</a> 7 &#x5176;&#x4ED6;&#x7684; IPC &#x95EE;&#x9898;</h3>\n<h4 id=\"71-dining-philosophers&#x95EE;&#x9898;\"><a class=\"anchor\" href=\"#71-dining-philosophers&#x95EE;&#x9898;\">#</a> 7.1 Dining Philosophers &#x95EE;&#x9898;</h4>\n<h4 id=\"72-reader-and-writer-&#x95EE;&#x9898;\"><a class=\"anchor\" href=\"#72-reader-and-writer-&#x95EE;&#x9898;\">#</a> 7.2 Reader And Writer &#x95EE;&#x9898;</h4>\n<h3 id=\"8-&#x8C03;&#x5EA6;&#x95EE;&#x9898;-scheduling\"><a class=\"anchor\" href=\"#8-&#x8C03;&#x5EA6;&#x95EE;&#x9898;-scheduling\">#</a> 8 &#x8C03;&#x5EA6;&#x95EE;&#x9898; scheduling</h3>\n<h4 id=\"81&#x4F55;&#x65F6;&#x8C03;&#x5EA6;\"><a class=\"anchor\" href=\"#81&#x4F55;&#x65F6;&#x8C03;&#x5EA6;\">#</a> 8.1 &#x4F55;&#x65F6;&#x8C03;&#x5EA6;</h4>\n<ul>\n<li>&#x65B0;&#x8FDB;&#x7A0B;&#x88AB;&#x521B;&#x5EFA;</li>\n<li>&#x5B58;&#x5728;&#x8FD0;&#x884C;&#x8FDB;&#x7A0B;</li>\n<li>&#x8FD0;&#x884C;&#x8FDB;&#x7A0B;&#x88AB; block</li>\n<li>io &#x4E2D;&#x65AD;</li>\n<li>&#x65F6;&#x949F;&#x4E2D;&#x65AD;</li>\n</ul>\n<p>&#x62A2;&#x5360;&#x5F0F;&#x548C;&#x975E;&#x62A2;&#x5360;&#x5F0F;&#x8C03;&#x5EA6;</p>\n<p>&#x597D;&#x7684;&#x8C03;&#x5EA6;&#x7B97;&#x6CD5;&#x7684;&#x5224;&#x65AD;&#x6807;&#x51C6;&#xFF1A;</p>\n<ul>\n<li>Fair</li>\n<li>Priority</li>\n<li>Efficiency</li>\n<li>Encourage good behavior</li>\n<li>Support heavy loads</li>\n<li>Adapt to different environments</li>\n</ul>\n<p>&#x4E0D;&#x540C;&#x7684;&#x7CFB;&#x7EDF;&#x7684;&#x4FA7;&#x91CD;&#x70B9;&#x4E0D;&#x540C;&#xFF1A;</p>\n<ul>\n<li>All Systems\n<ul>\n<li>Fairness</li>\n<li>Efficiency</li>\n<li>Policy Enforcement</li>\n</ul>\n</li>\n<li>Batch\n<ul>\n<li>Throughput</li>\n<li>Turnaround Time</li>\n<li>Waiting Time</li>\n<li>Processor Utilization</li>\n</ul>\n</li>\n<li>Interactive system\n<ul>\n<li>Response Time</li>\n<li>Proportionality</li>\n</ul>\n</li>\n<li>Real-Time system\n<ul>\n<li>meeting deadlines</li>\n<li>predictability</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"82-&#x8C03;&#x5EA6;&#x7B97;&#x6CD5;\"><a class=\"anchor\" href=\"#82-&#x8C03;&#x5EA6;&#x7B97;&#x6CD5;\">#</a> 8.2 &#x8C03;&#x5EA6;&#x7B97;&#x6CD5;</h4>\n<h5 id=\"821-first-come-first-served&#x7B97;&#x6CD5;-&#x5148;&#x8FDB;&#x5148;&#x51FA;\"><a class=\"anchor\" href=\"#821-first-come-first-served&#x7B97;&#x6CD5;-&#x5148;&#x8FDB;&#x5148;&#x51FA;\">#</a> 8.2.1 First Come First Served &#x7B97;&#x6CD5; &#x5148;&#x8FDB;&#x5148;&#x51FA;</h5>\n<ul>\n<li>&#x975E;&#x62A2;&#x5360;&#x5F0F;</li>\n<li>&#x5728; Batch System &#x4E2D;&#x4F7F;&#x7528;</li>\n</ul>\n<p>&#x7B80;&#x5355;&#x4E0D;&#x8FC7;&#x591A;&#x63CF;&#x8FF0;</p>\n<p>&#x95EE;&#x9898;&#xFF1A;convoy &#x95EE;&#x9898;</p>\n<h5 id=\"822-shortest-job-first-&#x6700;&#x77ED;&#x4F5C;&#x4E1A;&#x4F18;&#x5148;\"><a class=\"anchor\" href=\"#822-shortest-job-first-&#x6700;&#x77ED;&#x4F5C;&#x4E1A;&#x4F18;&#x5148;\">#</a> 8.2.2 Shortest Job First &#x6700;&#x77ED;&#x4F5C;&#x4E1A;&#x4F18;&#x5148;</h5>\n<ul>\n<li>&#x6709;&#x62A2;&#x5360;&#x5F0F;&#x548C;&#x975E;&#x62A2;&#x5360;&#x5F0F;&#x7684;</li>\n<li>&#x9700;&#x8981;&#x63D0;&#x524D;&#x77E5;&#x9053;&#x8FDB;&#x7A0B;&#x5DE5;&#x4F5C;&#x5B8C;&#x6210;&#x6240;&#x9700;&#x65F6;&#x95F4;&#xFF0C;&#x8FD9;&#x662F;&#x5F88;&#x56F0;&#x96BE;&#x7684;</li>\n<li>&#x8981;&#x6C42;&#x8FDB;&#x7A0B;&#x540C;&#x65F6;&#x8FDB;&#x5165;&#x5C31;&#x7EEA;&#x6001;&#xFF0C;&#x8FD9;&#x4E5F;&#x662F;&#x975E;&#x5E38;&#x56F0;&#x96BE;&#x7684;</li>\n</ul>\n<p>&#x62A2;&#x5360;&#x5F0F; SJF</p>\n<p>&#x6709;&#x8FDB;&#x7A0B;&#x5230;&#x8FBE;&#x65F6;&#xFF0C;&#x6BD4;&#x8F83;&#x5F53;&#x524D;&#x6267;&#x884C;&#x8FDB;&#x7A0B;&#x5269;&#x4F59;&#x8FD0;&#x884C;&#x65F6;&#x95F4;&#x548C;&#x5230;&#x8FBE;&#x8FDB;&#x7A0B;&#x7684;&#x8FD0;&#x884C;&#x65F6;&#x95F4;</p>\n<h5 id=\"823-round-robin-&#x65F6;&#x95F4;&#x7247;&#x8F6E;&#x8F6C;&#x7B97;&#x6CD5;\"><a class=\"anchor\" href=\"#823-round-robin-&#x65F6;&#x95F4;&#x7247;&#x8F6E;&#x8F6C;&#x7B97;&#x6CD5;\">#</a> 8.2.3 Round-robin &#x65F6;&#x95F4;&#x7247;&#x8F6E;&#x8F6C;&#x7B97;&#x6CD5;</h5>\n<p>&#x65F6;&#x95F4;&#x7247;&#x7684;&#x5927;&#x5C0F;&#x7684;&#x9009;&#x62E9;&#x5F88;&#x91CD;&#x8981;&#xFF0C;&#x4E00;&#x822C;&#x662F; 10 to 100 ms</p>\n<h5 id=\"824-&#x4F18;&#x5148;&#x7EA7;&#x8C03;&#x5EA6;\"><a class=\"anchor\" href=\"#824-&#x4F18;&#x5148;&#x7EA7;&#x8C03;&#x5EA6;\">#</a> 8.2.4 &#x4F18;&#x5148;&#x7EA7;&#x8C03;&#x5EA6;</h5>\n<p>&#x540C;&#x7EA7;&#x522B;&#x662F; FCFS&#xFF0C;&#x8FD9;&#x662F;&#x62A2;&#x5360;&#x5F0F;&#x7684;&#x3002;</p>\n<h5 id=\"825-multi-queue-scheduling-&#x591A;&#x7EA7;&#x961F;&#x5217;&#x8C03;&#x5EA6;&#x7B97;&#x6CD5;\"><a class=\"anchor\" href=\"#825-multi-queue-scheduling-&#x591A;&#x7EA7;&#x961F;&#x5217;&#x8C03;&#x5EA6;&#x7B97;&#x6CD5;\">#</a> 8.2.5 Multi-Queue Scheduling &#x591A;&#x7EA7;&#x961F;&#x5217;&#x8C03;&#x5EA6;&#x7B97;&#x6CD5;</h5>\n<p>&#x4E00;&#x4E2A;&#x8FDB;&#x7A0B;&#x53EA;&#x80FD;&#x6C38;&#x4E45;&#x6027;&#x8FDB;&#x51FA;&#x4E00;&#x4E2A;&#x961F;&#x5217;&#xFF0C;&#x6BCF;&#x4E2A;&#x961F;&#x5217;&#x6267;&#x884C;&#x4E0D;&#x540C;&#x7684;&#x8C03;&#x5EA6;&#x7B97;&#x6CD5;&#x3002;</p>\n<p>&#x591A;&#x7EA7;&#x961F;&#x5217;&#xFF1A;&#x8BE5;&#x7B97;&#x6CD5;&#x5C06;&#x7CFB;&#x7EDF;&#x4E2D;&#x7684;&#x8FDB;&#x7A0B;&#x5C31;&#x7EEA;&#x961F;&#x5217;&#x4ECE;&#x4E00;&#x4E2A;&#x62C6;&#x5206;&#x4E3A;&#x82E5;&#x5E72;&#x4E2A;&#xFF0C;&#x5C06;&#x4E0D;&#x540C;&#x7C7B;&#x578B;&#x6216;&#x6027;&#x8D28;&#x7684;&#x8FDB;&#x7A0B;<strong>&#x56FA;&#x5B9A;&#x5206;&#x914D;</strong>&#x5728;&#x4E0D;&#x540C;&#x7684;&#x5C31;&#x7EEA;&#x961F;&#x5217;&#xFF0C;&#x4E0D;&#x540C;&#x7684;&#x5C31;&#x7EEA;&#x961F;&#x5217;&#x91C7;&#x7528;&#x4E0D;&#x540C;&#x7684;&#x8C03;&#x5EA6;&#x7B97;&#x6CD5;&#xFF0C;<strong>&#x4E00;&#x4E2A;&#x5C31;&#x7EEA;&#x961F;&#x5217;&#x4E2D;&#x7684;&#x8FDB;&#x7A0B;&#x53EF;&#x4EE5;&#x8BBE;&#x7F6E;&#x4E0D;&#x540C;&#x7684;&#x4F18;&#x5148;&#x7EA7;&#xFF0C;&#x4E0D;&#x540C;&#x7684;&#x5C31;&#x7EEA;&#x961F;&#x5217;&#x672C;&#x8EAB;&#x4E5F;&#x53EF;&#x4EE5;&#x8BBE;&#x7F6E;&#x4E0D;&#x540C;&#x7684;&#x4F18;&#x5148;&#x7EA7;&#x3002;</strong></p>\n<p>&#x591A;&#x7EA7;&#x961F;&#x5217;&#x8C03;&#x5EA6;&#x7B97;&#x6CD5;&#x7531;&#x4E8E;&#x8BBE;&#x7F6E;&#x591A;&#x4E2A;&#x5C31;&#x7EEA;&#x961F;&#x5217;&#xFF0C;&#x56E0;&#x6B64;&#x5BF9;&#x6BCF;&#x4E2A;&#x5C31;&#x7EEA;&#x961F;&#x5217;&#x5C31;&#x53EF;&#x4EE5;&#x5B9E;&#x65BD;&#x4E0D;&#x540C;&#x7684;&#x8C03;&#x5EA6;&#x7B97;&#x6CD5;&#xFF0C;&#x56E0;&#x6B64;&#xFF0C;&#x7CFB;&#x7EDF;&#x9488;&#x5BF9;&#x4E0D;&#x540C;&#x7528;&#x6237;&#x8FDB;&#x7A0B;&#x7684;&#x9700;&#x6C42;&#xFF0C;&#x5F88;&#x5BB9;&#x6613;&#x63D0;&#x4F9B;&#x591A;&#x79CD;&#x8C03;&#x5EA6;&#x7B56;&#x7565;&#x3002;</p>\n<p><strong>&#x9AD8;&#x4F18;&#x5148;&#x7EA7;&#x7684;&#x961F;&#x5217;&#x6267;&#x884C;&#x5B8C;&#x6210;&#x540E;&#x4F4E;&#x4F18;&#x5148;&#x7EA7;&#x7684;&#x961F;&#x5217;&#x624D;&#x80FD;&#x5F00;&#x59CB;&#x6267;&#x884C;</strong></p>\n<h5 id=\"826-multi-level-feedback-&#x591A;&#x7EA7;&#x53CD;&#x9988;&#x8C03;&#x5EA6;&#x7B97;&#x6CD5;&#x6539;&#x8FDB;\"><a class=\"anchor\" href=\"#826-multi-level-feedback-&#x591A;&#x7EA7;&#x53CD;&#x9988;&#x8C03;&#x5EA6;&#x7B97;&#x6CD5;&#x6539;&#x8FDB;\">#</a> 8.2.6 Multi-level Feedback &#x591A;&#x7EA7;&#x53CD;&#x9988;&#x8C03;&#x5EA6;&#x7B97;&#x6CD5;&#xFF08;&#x6539;&#x8FDB;&#xFF09;</h5>\n<p>&#x57FA;&#x672C;&#x548C;&#x4E0A;&#x4E00;&#x4E2A;&#x7B97;&#x6CD5;&#x4E00;&#x6837;&#xFF0C;&#x4E0D;&#x540C;&#x7684;&#x5730;&#x65B9;&#x5728;&#x4E0E;&#x9AD8;&#x4F18;&#x5148;&#x7EA7;&#x7684;&#x961F;&#x5217;&#x8FDB;&#x7A0B;&#x5F39;&#x51FA;&#x540E;&#x5982;&#x679C;&#x6CA1;&#x6709;&#x6267;&#x884C;&#x5B8C;&#x5C31;&#x5BF9;&#x63A8;&#x5165;&#x4E0B;&#x4E00;&#x4E2A;&#x4F18;&#x5148;&#x7EA7;&#x7684;&#x961F;&#x5217;</p>\n<h5 id=\"827-guaranteed-scheduling\"><a class=\"anchor\" href=\"#827-guaranteed-scheduling\">#</a> 8.2.7 Guaranteed Scheduling</h5>\n<p>&#x4E3A;&#x6BCF;&#x4E2A;&#x8FDB;&#x7A0B;&#x5206;&#x914D;&#x4E00;&#x4E2A;&#x516C;&#x5E73;&#x7684;&#x65F6;&#x95F4;&#x4EFD;&#x989D;&#x6216;&#x4F18;&#x5148;&#x7EA7;&#xFF0C;&#x8FD9;&#x4E2A;&#x4EFD;&#x989D;&#x6216;&#x4F18;&#x5148;&#x7EA7;&#x4F1A;&#x6839;&#x636E;&#x8FDB;&#x7A0B;&#x7684;&#x884C;&#x4E3A;&#x548C;&#x9700;&#x6C42;&#x52A8;&#x6001;&#x8C03;&#x6574;&#x3002;&#x5982;&#x679C;&#x4E00;&#x4E2A;&#x8FDB;&#x7A0B;&#x6CA1;&#x6709;&#x4F7F;&#x7528;&#x5B83;&#x7684;&#x5168;&#x90E8;&#x65F6;&#x95F4;&#x4EFD;&#x989D;&#xFF0C;&#x8FD9;&#x4E2A;&#x672A;&#x4F7F;&#x7528;&#x7684;&#x4EFD;&#x989D;&#x53EF;&#x80FD;&#x4F1A;&#x88AB;&#x5176;&#x4ED6;&#x9700;&#x8981;&#x66F4;&#x591A;&#x5904;&#x7406;&#x5668;&#x65F6;&#x95F4;&#x7684;&#x8FDB;&#x7A0B;&#x5229;&#x7528;&#x3002;&#x76F8;&#x53CD;&#xFF0C;&#x5982;&#x679C;&#x4E00;&#x4E2A;&#x8FDB;&#x7A0B;&#x8D85;&#x8FC7;&#x4E86;&#x5B83;&#x7684;&#x65F6;&#x95F4;&#x4EFD;&#x989D;&#xFF0C;&#x5B83;&#x7684;&#x4F18;&#x5148;&#x7EA7;&#x6216;&#x65F6;&#x95F4;&#x4EFD;&#x989D;&#x4F1A;&#x5728;&#x4E0B;&#x4E00;&#x4E2A;&#x8C03;&#x5EA6;&#x5468;&#x671F;&#x4E2D;&#x88AB;&#x964D;&#x4F4E;&#xFF0C;&#x4EE5;&#x7ED9;&#x5176;&#x4ED6;&#x8FDB;&#x7A0B;&#x66F4;&#x591A;&#x7684;&#x6267;&#x884C;&#x673A;&#x4F1A;&#x3002;</p>\n<h5 id=\"828-lottery-scheduling\"><a class=\"anchor\" href=\"#828-lottery-scheduling\">#</a> 8.2.8 Lottery Scheduling</h5>\n<p>&#x5F88;&#x5E38;&#x7528;&#xFF01;</p>\n<p>Probability-based &#xFF1A;</p>\n<ul>\n<li>&#x7CFB;&#x7EDF;&#x4E3A;&#x6BCF;&#x4E2A;&#x8FDB;&#x7A0B;&#x5206;&#x914D;&#x4E00;&#x5B9A;&#x6570;&#x91CF;&#x7684;&#x5F69;&#x7968;&#xFF0C;&#x800C;&#x8FDB;&#x7A0B;&#x83B7;&#x5F97; CPU &#x65F6;&#x95F4;&#x7684;&#x673A;&#x4F1A;&#x4E0E;&#x5B83;&#x6301;&#x6709;&#x7684;&#x5F69;&#x7968;&#x6570;&#x91CF;&#x6210;&#x6B63;&#x6BD4;&#x3002;&#x5F53;&#x7CFB;&#x7EDF;&#x9700;&#x8981;&#x9009;&#x62E9;&#x4E0B;&#x4E00;&#x4E2A;&#x8981;&#x6267;&#x884C;&#x7684;&#x8FDB;&#x7A0B;&#x65F6;&#xFF0C;&#x5B83;&#x4F1A;&#x8FDB;&#x884C;&#x4E00;&#x6B21; &#x201C;&#x62BD;&#x5956;&#x201D;&#xFF0C;&#x968F;&#x673A;&#x9009;&#x62E9;&#x4E00;&#x4E2A;&#x5F69;&#x7968;&#xFF0C;&#x62E5;&#x6709;&#x8BE5;&#x5F69;&#x7968;&#x7684;&#x8FDB;&#x7A0B;&#x83B7;&#x5F97;&#x6267;&#x884C;&#x673A;&#x4F1A;&#x3002;</li>\n<li>&#x7ED9;&#x9AD8;&#x4F18;&#x5148;&#x7EA7;&#x6216;&#x8005;&#x77ED;&#x4EFB;&#x52A1;&#x7684;&#x8FDB;&#x7A0B;&#x66F4;&#x591A;&#x7684;&#x5F69;&#x7968;</li>\n</ul>\n<p>&#x4F18;&#x70B9;&#xFF1A;</p>\n<h5 id=\"829-fair-share-scheduling\"><a class=\"anchor\" href=\"#829-fair-share-scheduling\">#</a> 8.2.9 Fair-Share Scheduling</h5>\n<p>&#x5206;&#x4E3A;&#x4E24;&#x79CD;&#xFF1A;&#x8FDB;&#x7A0B;&#x516C;&#x5E73;&#x8C03;&#x5EA6;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x4E4B;&#x524D;&#x8BA8;&#x8BBA;&#x7684;&#x65F6;&#x95F4;&#x7247;&#x8F6E;&#x8F6C;&#xFF1B;&#x7528;&#x6237;&#x516C;&#x5E73;&#x8C03;&#x5EA6;&#xFF0C;&#x7ED9;&#x6BCF;&#x4E2A;&#x7528;&#x6237;&#x7A0B;&#x5E8F;&#x540C;&#x7B49;&#x7684; CPU &#x8BBF;&#x95EE;&#x65F6;&#x95F4;&#x6743;&#x9650;&#x3002;</p>\n<h4 id=\"83-scheduling-in-real-time-systems\"><a class=\"anchor\" href=\"#83-scheduling-in-real-time-systems\">#</a> 8.3 Scheduling in Real-Time systems</h4>\n",
            "tags": [
                "操作系统"
            ]
        },
        {
            "id": "http://example.com/2024/05/27/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F--Deadlocks/",
            "url": "http://example.com/2024/05/27/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F--Deadlocks/",
            "title": "操作系统--Deadlocks",
            "date_published": "2024-05-27T02:48:31.000Z",
            "content_html": "<h2 id=\"1-&#x8D44;&#x6E90;resources\"><a class=\"anchor\" href=\"#1-&#x8D44;&#x6E90;resources\">#</a> 1 &#x8D44;&#x6E90; Resources</h2>\n<h3 id=\"11preemptable-resource\"><a class=\"anchor\" href=\"#11preemptable-resource\">#</a> 1.1Preemptable Resource</h3>\n<p>&#x53EF;&#x62A2;&#x5360;&#x5F0F;&#x8D44;&#x6E90;&#x8FD9;&#x7C7B;&#x8D44;&#x6E90;&#x88AB;&#x62A2;&#x5360;&#x4E0D;&#x4F1A;&#x5F71;&#x54CD;&#x7A0B;&#x5E8F;&#x7684;&#x57FA;&#x672C;&#x8FD0;&#x884C;&#x3002;<br>\n&#x6BD4;&#x5982;&#xFF1A;<strong>memory</strong>&#x3001;<strong>disk</strong></p>\n<h3 id=\"12-nonpreemptable-resource\"><a class=\"anchor\" href=\"#12-nonpreemptable-resource\">#</a> 1.2 Nonpreemptable Resource</h3>\n<p>&#x975E;&#x53EF;&#x62A2;&#x5360;&#x5F0F;&#x8D44;&#x6E90;&#xFF0C;&#x8BE5;&#x7C7B;&#x8D44;&#x6E90;&#x88AB;&#x8BBF;&#x95EE;&#x65F6;&#xFF0C;&#x5176;&#x4ED6;&#x8BBF;&#x95EE;&#x7684;&#x8FDB;&#x7A0B;&#x4F1A;&#x8FDB;&#x5165;&#x963B;&#x585E;&#x72B6;&#x6001;&#xFF0C;&#x7B49;&#x5F85;&#x8BE5;&#x8D44;&#x6E90;&#x88AB;&#x91CA;&#x653E;&#x3002;&#x8D44;&#x6E90;&#x7684;&#x7533;&#x8BF7;&#x8FC7;&#x7A0B;&#x662F;&#xFF1A;&#x8BF7;&#x6C42;&#x8D44;&#x6E90;&#x3001;&#x4F7F;&#x7528;&#x8D44;&#x6E90;&#x3001;&#x91CA;&#x653E;&#x8D44;&#x6E90;&#x3002;&#x8D44;&#x6E90;&#x7684;&#x8BF7;&#x6C42;&#x8981;&#x8C03;&#x7528;&#x7CFB;&#x7EDF;&#x8C03;&#x7528;&#xFF0C;&#x6BD4;&#x5982; open &#x8C03;&#x7528;&#x7B49;&#x3002;</p>\n<h2 id=\"2-&#x6B7B;&#x9501;\"><a class=\"anchor\" href=\"#2-&#x6B7B;&#x9501;\">#</a> 2 &#x6B7B;&#x9501;</h2>\n<p>A set of processes is deadlocked if each process in the<br>\nset is waiting for an event that only another process in<br>\nthe set can cause.<br>\n &#x7B80;&#x5355;&#x6765;&#x8BF4;&#xFF0C;&#x5C31;&#x662F;&#x4E00;&#x4E2A;&#x8FDB;&#x7A0B;&#x5728;&#x62E5;&#x6709; a &#x8D44;&#x6E90;&#x65F6;&#x8BBF;&#x95EE;&#x53E6;&#x4E00;&#x4E2A;&#x8FDB;&#x7A0B;&#x62E5;&#x6709;&#x7684; b &#x8D44;&#x6E90;&#xFF0C;&#x800C;&#x53E6;&#x4E00;&#x4E2A;&#x8FDB;&#x7A0B;&#x5728;&#x91CA;&#x653E; b &#x8D44;&#x6E90;&#x4E4B;&#x524D;&#x9700;&#x8981;&#x8BBF;&#x95EE; a &#x8D44;&#x6E90;&#xFF0C;&#x8FD9;&#x6837;&#x5C31;&#x8BF4;&#x4E24;&#x4E2A;&#x8FDB;&#x7A0B;&#x6784;&#x6210;&#x6B7B;&#x9501;&#x3002;</p>\n<h3 id=\"21-&#x6B7B;&#x9501;&#x6761;&#x4EF6;condition\"><a class=\"anchor\" href=\"#21-&#x6B7B;&#x9501;&#x6761;&#x4EF6;condition\">#</a> 2.1 &#x6B7B;&#x9501;&#x6761;&#x4EF6; Condition</h3>\n<ul>\n<li>Mutual exclusion condition<br>\n &#x6BCF;&#x4E2A;&#x8D44;&#x6E90;&#x5DF2;&#x7ECF;&#x5206;&#x914D;&#x7ED9;&#x67D0;&#x8FDB;&#x7A0B;&#xFF0C;&#x4E0D;&#x7136;&#x5C31;&#x662F;&#x53EF;&#x4EE5;&#x8C03;&#x7528;&#x7684;&#x3002;</li>\n<li>Hold and wait condition<br>\n &#x5DF2;&#x7ECF;&#x5F97;&#x5230;&#x7684;&#x8D44;&#x6E90;&#x7684;&#x8FDB;&#x7A0B;&#x53EF;&#x4EE5;&#x8BF7;&#x6C42;&#x65B0;&#x7684;&#x8D44;&#x6E90;</li>\n<li>No preeption condition<br>\n &#x5DF2;&#x7ECF;&#x5206;&#x914D;&#x7ED9;&#x4E00;&#x4E2A;&#x8FDB;&#x7A0B;&#x7684;&#x8D44;&#x6E90;&#x4E0D;&#x80FD;&#x5F3A;&#x5236;&#x6027;&#x7684;&#x88AB;&#x62A2;&#x5360;&#xFF0C;&#x53EA;&#x80FD;&#x88AB;&#x5360;&#x6709;&#x5B83;&#x7684;&#x8FDB;&#x7A0B;&#x91CA;&#x653E;</li>\n<li>Circular wait condition<br>\n &#x6B7B;&#x9501;&#x53D1;&#x751F;&#x65F6;&#xFF0C;&#x7CFB;&#x7EDF;&#x4E2D;&#x6709;&#x7531;&#x4E24;&#x4E2A;&#x4EE5;&#x4E0A;&#x7684;&#x8FDB;&#x7A0B;&#x7EC4;&#x6210;&#x7684;&#x4E00;&#x6761;&#x73AF;&#x8DEF;&#xFF0C;&#x73AF;&#x8DEF;&#x4E2D;&#x6BCF;&#x4E2A;&#x8FDB;&#x7A0B;&#x8BF7;&#x6C42;&#x4E0B;&#x4E00;&#x4E2A;&#x8FDB;&#x7A0B;&#x5360;&#x6709;&#x7684;&#x8D44;&#x6E90;&#x3002;&#xFF08;&#x6B7B;&#x9501;&#x53D1;&#x751F;&#x7684;&#x6839;&#x672C;&#x539F;&#x56E0;&#xFF09;</li>\n</ul>\n<h3 id=\"22-&#x6B7B;&#x9501;&#x5EFA;&#x6A21;modeling\"><a class=\"anchor\" href=\"#22-&#x6B7B;&#x9501;&#x5EFA;&#x6A21;modeling\">#</a> 2.2 &#x6B7B;&#x9501;&#x5EFA;&#x6A21; Modeling</h3>\n<ul>\n<li><strong>&#x65B9;&#x5757;</strong>&#x8868;&#x793A;<strong>&#x8D44;&#x6E90;</strong>&#xFF0C;<strong>&#x5706;&#x5F62;</strong>&#x8868;&#x793A;<strong>&#x8FDB;&#x7A0B;</strong></li>\n<li>&#x7BAD;&#x5934;&#xFF0C;&#x88AB;&#x5360;&#x7528;&#x8D44;&#x6E90;&#x6307;&#x5411;&#x5360;&#x7528;&#x8FDB;&#x7A0B;&#xFF1B;&#x7B49;&#x5F85;&#x8FDB;&#x7A0B;&#x6307;&#x5411;&#x88AB;&#x7B49;&#x5F85;&#x8D44;&#x6E90;<br>\n<strong> Resource-Allocation Graph</strong><br>\nV &#x96C6;&#xFF1A;P &#x96C6;&#x8868;&#x793A;&#x8FDB;&#x7A0B;&#x96C6;&#x5408;&#xFF1B;R &#x96C6;&#x8868;&#x793A;&#x8D44;&#x6E90;&#x96C6;&#x5408;&#xFF1B;<br>\nE &#x96C6;&#xFF1A;request edge --- &#x8FDB;&#x7A0B; --&gt; &#x8D44;&#x6E90;&#xFF1B;&#xFF08;&#x8BF7;&#x6C42;&#xFF09;<br>\nassignment edge --- &#x8D44;&#x6E90; --&gt; &#x8FDB;&#x7A0B;&#xFF1B;&#xFF08;&#x5206;&#x914D;&#xFF09;<br>\n&#x6839;&#x636E;&#x56FE;&#xFF0C;&#x5982;&#x679C;&#x56FE;&#x6CA1;&#x6709; cycle&#xFF0C;&#x6CA1;&#x6709;&#x6B7B;&#x9501;&#xFF1B;&#x5982;&#x679C;&#x6709;&#xFF0C;&#x67D0;&#x7C7B;&#x578B;&#x8D44;&#x6E90;&#x53EA;&#x6709;&#x4E00;&#x4E2A;&#x5B9E;&#x4F8B;&#xFF0C;&#x53D1;&#x751F;&#x6B7B;&#x9501;&#xFF0C;&#x6709;&#x591A;&#x4E2A;&#x5B9E;&#x4F8B;&#xFF0C;&#x6709;&#x53EF;&#x80FD;&#x53D1;&#x751F;&#x6B7B;&#x9501;&#x3002;</li>\n</ul>\n<h3 id=\"23-&#x6B7B;&#x9501;&#x89E3;&#x51B3;\"><a class=\"anchor\" href=\"#23-&#x6B7B;&#x9501;&#x89E3;&#x51B3;\">#</a> 2.3 &#x6B7B;&#x9501;&#x89E3;&#x51B3;</h3>\n<p>&#x601D;&#x60F3;&#xFF1A;&#x7834;&#x574F;&#x6B7B;&#x9501;&#x6784;&#x6210;&#x7684;&#x56DB;&#x4E2A;&#x6761;&#x4EF6;&#x4E2D;&#x7684;&#x4E00;&#x4E2A;&#x3002;</p>\n<h4 id=\"231-&#x9E35;&#x9E1F;&#x7B97;&#x6CD5;ostrich\"><a class=\"anchor\" href=\"#231-&#x9E35;&#x9E1F;&#x7B97;&#x6CD5;ostrich\">#</a> 2.3.1 &#x9E35;&#x9E1F;&#x7B97;&#x6CD5; Ostrich</h4>\n<p>&#x7CFB;&#x7EDF;&#x8BA4;&#x4E3A;&#x6B7B;&#x9501;&#x6839;&#x672C;&#x4E0D;&#x4F1A;&#x53D1;&#x751F;&#x3002;&#x5E94;&#x7528;&#x8FD9;&#x79CD;&#x7B97;&#x6CD5;&#x6709;&#x524D;&#x63D0;&#xFF0C;&#x7531;&#x4E8E;&#x7CFB;&#x7EDF;&#x8BBE;&#x8BA1;&#x7684;&#x539F;&#x56E0;&#xFF0C;&#x6B7B;&#x9501;&#x7684;&#x53D1;&#x751F;&#x975E;&#x5E38;&#x7A00;&#x5C11;&#x6216;&#x8005;&#x6B7B;&#x9501;&#x7684;&#x9884;&#x9632; cost &#x975E;&#x5E38;&#x6602;&#x8D35;&#x3002;</p>\n<h4 id=\"232-deadlock-detection\"><a class=\"anchor\" href=\"#232-deadlock-detection\">#</a> 2.3.2 Deadlock Detection</h4>\n<p>&#x7CFB;&#x7EDF;&#x5141;&#x8BB8;&#x6B7B;&#x9501;&#x7684;&#x53D1;&#x751F;&#xFF0C;&#x4F46;&#x4F1A;&#x5728;&#x68C0;&#x6D4B;&#x6B7B;&#x9501;&#x53D1;&#x751F;&#x65F6;&#x5E72;&#x9884;&#x89E3;&#x51B3;&#x3002;&#x9884;&#x5148;&#x6267;&#x884C;&#x68C0;&#x6D4B;&#xFF1A;detection algorithm&#xFF1B;&#x68C0;&#x6D4B;&#x5230;&#x6B7B;&#x9501;&#x72B6;&#x6001;&#x89E3;&#x51B3;&#xFF1A;recovery algorithm</p>\n<h5 id=\"2321-&#x6709;&#x5411;&#x56FE;&#x73AF;&#x8DEF;&#x68C0;&#x6D4B;&#x7B97;&#x6CD5;\"><a class=\"anchor\" href=\"#2321-&#x6709;&#x5411;&#x56FE;&#x73AF;&#x8DEF;&#x68C0;&#x6D4B;&#x7B97;&#x6CD5;\">#</a> 2.3.2.1 &#x6709;&#x5411;&#x56FE;&#x73AF;&#x8DEF;&#x68C0;&#x6D4B;&#x7B97;&#x6CD5;</h5>\n<ol>\n<li>&#x521D;&#x59CB;&#x5316;&#x7A7A;&#x5217;&#x8868; L&#xFF0C;&#x521D;&#x59CB;&#x5316;&#x6240;&#x6709;&#x7684;&#x8FB9;&#x6CA1;&#x6709;&#x88AB;&#x6807;&#x8BB0;&#x3002;</li>\n<li>&#x628A;&#x5F53;&#x524D;&#x7684; node &#x63A8;&#x5165; L&#xFF0C;&#x68C0;&#x6D4B; node &#x662F;&#x5426;&#x88AB;&#x63A8;&#x5165; L &#x8FC7;&#xFF0C;&#x5982;&#x679C;&#x6709;&#xFF0C;&#x8BC1;&#x660E;&#x5B58;&#x5728;&#x73AF;&#x8DEF;&#x3002;</li>\n<li>&#x67E5;&#x770B; node &#x6CA1;&#x88AB;&#x6807;&#x8BB0;&#x7684;&#x51FA;&#x8FB9;&#xFF0C;&#x5982;&#x679C;&#x6709;&#xFF0C;goto 4 &#xFF1B;&#x5982;&#x679C;&#x6CA1;&#x6709;&#xFF0C;goto 5 &#x3002;</li>\n<li>&#x968F;&#x673A;&#x9009;&#x62E9;&#x4E00;&#x6761;&#x51FA;&#x8FB9;&#xFF0C;&#x628A;&#x5F53;&#x524D;&#x8282;&#x70B9;&#x9009;&#x4E3A;&#x51FA;&#x8FB9;&#x7684;&#x53E6;&#x4E00;&#x4E2A;&#x8282;&#x70B9;&#xFF0C;&#x8FD4;&#x56DE; 2 &#xFF1B;</li>\n<li>&#x8BF4;&#x660E;&#x5F53;&#x524D;&#x8282;&#x70B9;&#x904D;&#x5386;&#x5B8C;&#x6BD5;&#xFF0C;&#x8FD4;&#x56DE;&#x4E0A;&#x4E00;&#x4E2A;&#x8282;&#x70B9;&#xFF0C;goto 3&#xFF1B;&#x5982;&#x679C;&#x8FD9;&#x662F;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x8282;&#x70B9;&#xFF0C;&#x5219;&#x8BF4;&#x660E;&#x8BE5;&#x56FE;&#x6CA1;&#x6709;&#x73AF;&#x8DEF;&#x3002;</li>\n</ol>\n<p><strong>&#x53EF;&#x4EE5;&#x7528;&#x6765;&#x68C0;&#x6D4B;&#x6BCF;&#x79CD;&#x7C7B;&#x578B;&#x53EA;&#x6709;&#x5355;&#x4E2A;&#x8D44;&#x6E90;&#x7684;&#x6B7B;&#x9501;&#x68C0;&#x6D4B;</strong></p>\n<h5 id=\"2322-&#x6BCF;&#x79CD;&#x7C7B;&#x578B;&#x6709;&#x591A;&#x4E2A;&#x8D44;&#x6E90;&#x7684;&#x6B7B;&#x9501;&#x68C0;&#x6D4B;\"><a class=\"anchor\" href=\"#2322-&#x6BCF;&#x79CD;&#x7C7B;&#x578B;&#x6709;&#x591A;&#x4E2A;&#x8D44;&#x6E90;&#x7684;&#x6B7B;&#x9501;&#x68C0;&#x6D4B;\">#</a> 2.3.2.2 &#x6BCF;&#x79CD;&#x7C7B;&#x578B;&#x6709;&#x591A;&#x4E2A;&#x8D44;&#x6E90;&#x7684;&#x6B7B;&#x9501;&#x68C0;&#x6D4B;</h5>\n<p>&#x9996;&#x5148;&#x8981;&#x6709;&#x4E24;&#x4E2A;&#x5411;&#x91CF;&#x3001;&#x4E24;&#x4E2A;&#x77E9;&#x9635;&#x7684;&#x6982;&#x5FF5;&#xFF1A;</p>\n<ul>\n<li>Resource in existence &#x5411;&#x91CF;</li>\n<li>Resource available &#x5411;&#x91CF;</li>\n<li>Current allocated matrix</li>\n<li>Request matrix</li>\n</ul>\n<p><strong>Deadlock Detection Algorithm</strong></p>\n<ul>\n<li>&#x4E3B;&#x8981;&#x601D;&#x60F3;&#x662F;&#x5BF9;&#x5411;&#x91CF;&#x8FDB;&#x884C;&#x6BD4;&#x8F83;&#xFF08;&#x6BCF;&#x4E2A;&#x5143;&#x7D20;&#x90FD;&#x8981;&#x6BD4;&#xFF0C;&#x5168;&#x90E8;&#x5C0F;&#x624D;&#x662F;&#x5C0F;&#xFF0C;&#x5426;&#x5219;&#x5C31;&#x662F;&#x5927;&#xFF09;</li>\n<li>&#x5148;&#x67E5;&#x770B;&#x6BCF;&#x4E2A;&#x8FDB;&#x7A0B;&#x7684;&#x9700;&#x6C42;&#x77E9;&#x9635;&#x7684;&#x6BCF;&#x5217;&#xFF0C;&#x770B;&#x770B;&#x5206;&#x914D;&#x5411;&#x91CF;&#x80FD;&#x4E0D;&#x80FD;&#x6EE1;&#x8DB3;</li>\n<li>&#x7B2C;&#x4E00;&#x4E2A;&#x627E;&#x5230;&#x7684;&#x8FDB;&#x7A0B;&#xFF0C;&#x628A;&#x5F53;&#x524D;&#x5206;&#x914D;&#x77E9;&#x9635;&#x8BE5;&#x8FDB;&#x7A0B;&#x6240;&#x5728;&#x884C;&#x7684;&#x5217;&#x52A0;&#x5230;&#x53EF;&#x7528;&#x5411;&#x91CF;&#xFF0C;&#x6807;&#x8BB0;&#x8FD9;&#x4E2A;&#x77E9;&#x9635;&#xFF0C;&#x8FD4;&#x56DE;&#x7B2C;&#x4E00;&#x6B65;&#xFF08;&#x5C31;&#x662F;&#x5047;&#x8BBE;&#x6BCF;&#x4E2A;&#x8FDB;&#x7A0B;&#x7684;&#x8FD0;&#x884C;&#x901F;&#x5EA6;&#x51E0;&#x4E4E;&#x65E0;&#x7A77;&#x5FEB;&#xFF09;</li>\n<li>&#x5982;&#x679C;&#x6CA1;&#x6709;&#x8FD9;&#x6837;&#x7684;&#x8FDB;&#x7A0B;&#xFF0C;&#x7B97;&#x6CD5;&#x7EC8;&#x6B62;&#xFF0C;&#x8BF4;&#x660E;&#x4F1A;&#x6B7B;&#x9501;</li>\n</ul>\n<h4 id=\"233-recovery&#x7B97;&#x6CD5;\"><a class=\"anchor\" href=\"#233-recovery&#x7B97;&#x6CD5;\">#</a> 2.3.3 Recovery &#x7B97;&#x6CD5;</h4>\n<ul>\n<li>Recovery through preemption</li>\n<li>Recovery through rollback</li>\n<li>Recovery through killing processes</li>\n</ul>\n<h4 id=\"234-&#x6B7B;&#x9501;&#x907F;&#x514D;\"><a class=\"anchor\" href=\"#234-&#x6B7B;&#x9501;&#x907F;&#x514D;\">#</a> 2.3.4 &#x6B7B;&#x9501;&#x907F;&#x514D;</h4>\n<p>&#x4F7F;&#x7528; deadlock-avoidance algorithm</p>\n<p>&#x4E00;&#x4E2A;&#x7B80;&#x5355;&#x4F46;&#x975E;&#x5E38;&#x6709;&#x7528;&#x7684;&#x6A21;&#x578B;&#x3001;&#x9700;&#x8981;&#x6BCF;&#x4E2A;&#x8FDB;&#x7A0B;&#x58F0;&#x660E;&#x81EA;&#x5DF1;&#x9700;&#x8981;&#x7684;&#x7C7B;&#x578B;&#x7684;&#x8D44;&#x6E90;&#x7684;&#x6700;&#x5927;&#x503C;</p>\n<p>&#x8BE5;&#x7B97;&#x6CD5;&#x7684;&#x91CD;&#x8981;&#x57FA;&#x7840;&#xFF1A;safe state</p>\n<ul>\n<li>safe state&#xFF1A;&#x6CA1;&#x6709;&#x6B7B;&#x9501;&#x4E14;&#x53EF;&#x4EE5;&#x4EE5;&#x67D0;&#x79CD;&#x987A;&#x5E8F;&#x5904;&#x7406;&#x8FDB;&#x7A0B;&#x6765;&#x6EE1;&#x8DB3;&#x6240;&#x6709;&#x8FDB;&#x7A0B;&#x7684;&#x9700;&#x6C42;&#xFF1B;</li>\n<li>system is in safe state&#xFF1A;&#x5B58;&#x5728;&#x5B89;&#x5168;&#x7684;&#x8FDB;&#x7A0B;&#x6267;&#x884C;&#x5E8F;&#x5217;</li>\n<li>unsafe state&#xFF1A;possiable of deadlock</li>\n<li>If a system is in safe state =&gt; no deadlocks</li>\n<li>If a system is in unsafe state =&gt; <strong>possibility</strong> of deadlock</li>\n<li>Avoidance =&gt; ensure that system will never enter an unsafe state</li>\n</ul>\n<p>&#x5982;&#x4F55;&#x786E;&#x4FDD;&#x7CFB;&#x7EDF;&#x4E0D;&#x4F1A;&#x8FDB;&#x5165; unsafe state &#x5462;&#xFF1F;</p>\n<ul>\n<li>Banker Algorithm &#x5927;&#x540D;&#x9F0E;&#x9F0E;&#x7684;&#x94F6;&#x884C;&#x5BB6;&#x7B97;&#x6CD5;\n<ul>\n<li>&#x5BF9;&#x6BCF;&#x79CD;&#x7C7B;&#x578B;&#x7684;&#x8D44;&#x6E90;&#x53EA;&#x6709;&#x4E00;&#x4E2A;&#x7684;&#x94F6;&#x884C;&#x5BB6;&#x7B97;&#x6CD5;&#xFF1A;&#x628A; Free &#x52A0;&#x5230; Has &#x91CC;&#x6BD4;&#x8F83; Max&#xFF0C;&#x5982;&#x679C;&#x5B58;&#x5728;&#x6EE1;&#x8DB3;&#x7684;&#x8FDB;&#x7A0B;&#x5C31;&#x5206;&#x914D;&#x8D44;&#x6E90;&#x7B49;&#x5F85;&#x8FDB;&#x7A0B;&#x5B8C;&#x6210;&#x91CA;&#x653E;&#x7EE7;&#x7EED;&#x4E0B;&#x4E00;&#x8F6E;&#x8F6E;&#x8BE2;&#xFF0C;&#x53EA;&#x5230;&#x6240;&#x6709;&#x8FDB;&#x7A0B;&#x6267;&#x884C;&#x5B8C;&#x6210;&#x3002;</li>\n<li>&#x91CD;&#x70B9;&#xFF1A;<strong>&#x5BF9;&#x6BCF;&#x79CD;&#x7C7B;&#x578B;&#x7684;&#x8D44;&#x6E90;&#x6709;&#x591A;&#x4E2A;&#x7684;&#x94F6;&#x884C;&#x5BB6;&#x7B97;&#x6CD5;</strong></li>\n</ul>\n</li>\n</ul>\n<h5 id=\"2341-bankers-algorithm-for-multiple-resources\"><a class=\"anchor\" href=\"#2341-bankers-algorithm-for-multiple-resources\">#</a> 2.3.4.1 Banker&apos;s Algorithm for Multiple Resources</h5>\n<p>&#x9996;&#x5148;&#x8BA9;&#x6211;&#x4EEC;&#x6765;&#x63A2;&#x8BA8;&#x4E00;&#x4E0B;&#x600E;&#x4E48;&#x67E5;&#x770B;&#x4E00;&#x4E2A;&#x72B6;&#x6001;&#x662F;&#x5426;&#x662F; safe &#x7684;&#xFF1A;</p>\n<ol>\n<li>&#x641C;&#x7D22;&#x6709;&#x6CA1;&#x6709;&#x8FDB;&#x7A0B;&#x53EF;&#x4EE5;&#x88AB;&#x6EE1;&#x8DB3;&#xFF08;need&lt; has+free&#xFF09;&#xFF0C;&#x5982;&#x679C;&#x6CA1;&#x6709;&#x6B7B;&#x9501; =&#x300B;unsafe state</li>\n<li>&#x5982;&#x679C;&#x5B58;&#x5728;&#x8FD9;&#x6837;&#x7684;&#x8FDB;&#x7A0B;&#xFF0C;&#x5C31;&#x6807;&#x8BB0;&#x8FDB;&#x7A0B;&#x8FD0;&#x884C;&#x7ED3;&#x675F;&#xFF0C;&#x91CA;&#x653E;&#x8D44;&#x6E90;&#x5230; free &#x4E2D;</li>\n<li>&#x91CD;&#x590D; 1&#x3001;2&#xFF0C;&#x76F4;&#x5230;&#x6240;&#x6709;&#x7684;&#x8FDB;&#x7A0B;&#x90FD;&#x88AB;&#x6807;&#x8BB0; =&#x300B;safe state</li>\n</ol>\n<p>&#x94F6;&#x884C;&#x5BB6;&#x7B97;&#x6CD5;&#x89C2;&#x70B9;&#xFF1A;</p>\n<ul>\n<li>Trade-off&#xFF1A;&#x4FDD;&#x5B88;&#x3001;&#x51CF;&#x5C11;&#x4E86;&#x5E76;&#x884C;&#x6027;&#xFF1B;</li>\n<li>Not very practicable\n<ul>\n<li>&#x8FDB;&#x7A0B;&#x6240;&#x9700;&#x7684;&#x6700;&#x5927;&#x8D44;&#x6E90;&#x6570;&#x662F;&#x5F88;&#x96BE;&#x88AB;&#x63D0;&#x524D;&#x9884;&#x77E5;&#x7684;</li>\n<li>&#x8FDB;&#x7A0B;&#x6570;&#x4E0D;&#x662F;&#x56FA;&#x5B9A;&#x4E0D;&#x53D8;&#x7684;</li>\n<li>&#x88AB;&#x58F0;&#x660E;&#x4E3A;&#x53EF;&#x7528;&#x7684;&#x8D44;&#x6E90;&#x968F;&#x65F6;&#x53EF;&#x80FD;&#x6D88;&#x5931;</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"235-&#x6B7B;&#x9501;&#x9884;&#x9632;\"><a class=\"anchor\" href=\"#235-&#x6B7B;&#x9501;&#x9884;&#x9632;\">#</a> 2.3.5 &#x6B7B;&#x9501;&#x9884;&#x9632;</h4>\n<p>&#x6253;&#x7834;&#x6B7B;&#x9501;&#x4EA7;&#x751F;&#x7684;&#x56DB;&#x5927;&#x6761;&#x4EF6;</p>\n<p>&#x590D;&#x4E60;&#x4E00;&#x4E0B;&#xFF0C;&#x6B7B;&#x9501;&#x4EA7;&#x751F;&#x7684;&#x56DB;&#x5927;&#x6761;&#x4EF6;&#x5206;&#x522B;&#x662F;&#xFF1A;<strong>Mutux Exclution&#x3001;Hold and wait&#x3001;No Preemptive&#x3001;Circular Wait</strong></p>\n<ul>\n<li><strong>Attacking Mutux Exclusion</strong>\n<ul>\n<li>Some devices can be spooled\n<ul>\n<li>&#x6BD4;&#x5982;&#x6253;&#x5370;&#x673A;&#xFF0C;&#x5355;&#x72EC;&#x8BBE;&#x7F6E;&#x4E00;&#x4E2A;&#x6253;&#x5370;&#x8FDB;&#x7A0B;&#x4E13;&#x95E8;&#x8D1F;&#x8D23;&#x6253;&#x5370;&#x5DE5;&#x4F5C;&#xFF0C;&#x72EC;&#x5360;&#x6253;&#x5370;&#x8D44;&#x6E90;&#xFF0C;&#x4F7F;&#x5F97;&#x6253;&#x5370;&#x673A;&#x4E00;&#x76F4;&#x51FA;&#x4E8E;&#x88AB;&#x5360;&#x7528;&#x72B6;&#x6001;&#x3002;</li>\n</ul>\n</li>\n<li>Spooling space is limited, so deadlock is still possible with this decision</li>\n<li>&#x539F;&#x5219;\n<ul>\n<li>&#x907F;&#x514D;&#x5206;&#x914D;&#x8D44;&#x6E90;&#x5982;&#x679C;&#x4E0D;&#x662F;&#x7EDD;&#x5BF9;&#x9700;&#x8981;&#x7684;</li>\n<li>&#x5C3D;&#x53EF;&#x80FD;&#x5C11;&#x7684;&#x8FDB;&#x7A0B;&#x53EF;&#x4EE5;&#x5360;&#x6709;&#x8D44;&#x6E90;</li>\n</ul>\n</li>\n<li>&#x95EE;&#x9898;\n<ul>\n<li>&#x4E0D;&#x662F;&#x6240;&#x6709;&#x7684; device &#x90FD;&#x53EF;&#x4EE5; spool</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>Attacking Hold and Wait</strong>\n<ul>\n<li>&#x8981;&#x6C42;&#x8FDB;&#x7A0B;&#x5F00;&#x59CB;&#x6267;&#x884C;&#x65F6;&#x8BF7;&#x6C42;&#x6240;&#x6709;&#x7684;&#x8D44;&#x6E90;&#xFF0C;&#x8FD9;&#x6837;&#x5C31;&#x4E0D;&#x9700;&#x8981;&#x56E0;&#x4E3A;&#x8D44;&#x6E90;&#x88AB;&#x5176;&#x4ED6;&#x8FDB;&#x7A0B;&#x5360;&#x7528;&#x800C;&#x7B49;&#x5F85;</li>\n<li>&#x95EE;&#x9898;\n<ul>\n<li>&#x53EF;&#x80FD;&#x4E0D;&#x77E5;&#x9053;&#x9700;&#x8981;&#x7684;&#x8D44;&#x6E90;&#x5728;&#x5F00;&#x59CB;&#x7684;&#x65F6;&#x5019;</li>\n<li>&#x4ECD;&#x7136;&#x53EF;&#x80FD;&#x8BBF;&#x95EE;&#x5230;&#x88AB;&#x522B;&#x7684;&#x8FDB;&#x7A0B;&#x5360;&#x7528;&#x7684;&#x8D44;&#x6E90;</li>\n<li><strong>&#x6539;&#x8FDB;&#xFF1A;&#x4E00;&#x65E6;&#x8BF7;&#x6C42;&#x4E0D;&#x5230;&#x6240;&#x6709;&#x7684;&#x8D44;&#x6E90;&#x5C31;&#x653E;&#x5F03;&#x73B0;&#x6709;&#x7684;&#x8D44;&#x6E90;&#x8FDB;&#x884C;&#x4E0B;&#x4E00;&#x6B21;&#x8BF7;&#x6C42;</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>Attacking No Preemption Condition</strong>\n<ul>\n<li>&#x8BBE;&#x7F6E;&#x53EF;&#x62A2;&#x5360;&#x5F0F;</li>\n<li>&#x975E;&#x5E38;&#x96BE;&#x5B9E;&#x73B0;&#xFF0C;&#x56E0;&#x4E3A;&#x4E0D;&#x5207;&#x5B9E;&#x9645;&#xFF0C;&#x6BD4;&#x5982;&#x6253;&#x5370;&#x673A;&#x5C31;&#x4E0D;&#x80FD;&#x5728;&#x5DE5;&#x4F5C;&#x65F6;&#x88AB;&#x62A2;&#x5360;</li>\n</ul>\n</li>\n<li><strong>Attacking the Circular Wait Condition</strong>\n<ul>\n<li>&#x4E00;&#x6B21;&#x8BF7;&#x6C42;&#x4E00;&#x4E2A;&#x8D44;&#x6E90;&#xFF0C;&#x91CA;&#x653E;&#x4E00;&#x4E2A;&#x8BF7;&#x6C42;&#x4E00;&#x4E2A;</li>\n<li>&#x5BF9;&#x8D44;&#x6E90;&#x8FDB;&#x7A0B;&#x5168;&#x5C40;&#x7684;&#x6392;&#x5E8F;&#xFF0C;&#x8BF7;&#x6C42;&#x5FC5;&#x987B;&#x6309;&#x987A;&#x5E8F;&#x9012;&#x589E;</li>\n<li>&#x5BF9;&#x65B9;&#x6CD5;&#x4E8C;&#x8FDB;&#x884C;&#x6539;&#x8FDB;&#xFF1A;&#x6CA1;&#x6709;&#x8FDB;&#x7A0B;&#x7533;&#x8BF7;&#x6BD4;&#x5DF2;&#x7ECF;&#x5360;&#x6709;&#x7684;&#x8D44;&#x6E90;&#x66F4;&#x4F4E;&#x7684;&#x8D44;&#x6E90;&#x3002;</li>\n<li>&#x95EE;&#x9898;&#xFF1A;&#x627E;&#x5230;&#x4E00;&#x4E2A;&#x5408;&#x9002;&#x7684; numbering &#x6765;&#x6EE1;&#x8DB3;&#x6240;&#x6709;&#x4EBA;&#x662F;&#x4E0D;&#x53EF;&#x80FD;&#x7684;&#xFF1B;&#x589E;&#x52A0;&#x7A0B;&#x5E8F;&#x5458;&#x7684;&#x8D1F;&#x62C5;&#x6765;&#x8BB0;&#x5FC6; numbering</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3-other-issue\"><a class=\"anchor\" href=\"#3-other-issue\">#</a> 3 Other Issue</h2>\n<h3 id=\"31-two-phase-locking\"><a class=\"anchor\" href=\"#31-two-phase-locking\">#</a> 3.1 Two-Phase Locking</h3>\n<ul>\n<li>Phase one\n<ul>\n<li>&#x8FDB;&#x7A0B;&#x5BF9;&#x6240;&#x6709;&#x7684;&#x8BB0;&#x5F55;&#x8FDB;&#x884C;&#x67B7;&#x9501;&#xFF0C;&#x4E00;&#x6B21;&#x9501;&#x4E00;&#x4E2A;&#x8BB0;&#x5F55;&#x3002;</li>\n</ul>\n</li>\n<li>Phase two\n<ul>\n<li>&#x5EFA;&#x7ACB;&#x5728;&#x9636;&#x6BB5;&#x4E00;&#x6210;&#x529F;&#x7684;&#x57FA;&#x7840;&#x4E0A;&#xFF0C;&#x5B8C;&#x6210;&#x66F4;&#x65B0;&#x7136;&#x540E;&#x91CA;&#x653E;&#x6240;&#x6709;&#x7684;&#x9501;&#x3002;</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"32-communication-deadlocks\"><a class=\"anchor\" href=\"#32-communication-deadlocks\">#</a> 3.2 Communication Deadlocks</h3>\n<p>&#x8FDB;&#x7A0B;&#x6C60;&#x4E2D;&#x7684;&#x6BCF;&#x4E2A;&#x8FDB;&#x7A0B;&#x90FD;&#x5728;&#x7B49;&#x5F85;&#x8BE5;&#x8FDB;&#x7A0B;&#x6C60;&#x4E2D;&#x7684;&#x5176;&#x4ED6;&#x8FDB;&#x7A0B;&#x53D1;&#x9001;&#x7684;&#x4E8B;&#x4EF6;</p>\n<p>solution&#xFF1A;&#x8BBE;&#x7F6E; timeout</p>\n<h3 id=\"33-livelock\"><a class=\"anchor\" href=\"#33-livelock\">#</a> 3.3 Livelock</h3>\n<p>&#x8FDB;&#x7A0B;&#x4EFB;&#x7136;&#x5728;&#x8FD0;&#x884C;&#x4F46;&#x662F;&#x6CA1;&#x6709;&#x5B9E;&#x9645;&#x52A8;&#x4F5C;&#xFF0C;&#x6BD4;&#x5982; polling&#xFF08;busy waiting&#xFF09;.</p>\n<h3 id=\"34-starvation\"><a class=\"anchor\" href=\"#34-starvation\">#</a> 3.4 starvation</h3>\n<p>&#x4E00;&#x79CD;&#x7B97;&#x6CD5;&#x8FDB;&#x884C;&#x8C03;&#x5EA6;&#xFF0C;&#x6700;&#x77ED;&#x4F5C;&#x4E1A;&#x4F18;&#x5148;&#xFF0C;&#x5927;&#x4F5C;&#x4E1A;&#x7684;&#x8FDB;&#x7A0B;&#x4F1A;&#x88AB;&#x9965;&#x997F;&#x3002;</p>\n",
            "tags": [
                "操作系统"
            ]
        }
    ]
}