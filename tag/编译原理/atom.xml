<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://example.com</id>
    <title>Hexo • Posts by &#34;编译原理&#34; tag</title>
    <link href="http://example.com" />
    <updated>2024-06-22T17:16:46.000Z</updated>
    <category term="C++" />
    <category term="架构和设计模式" />
    <category term="操作系统" />
    <category term="DragonOS" />
    <category term="计算机网络" />
    <category term="vue" />
    <category term="编译原理" />
    <entry>
        <id>http://example.com/2024/06/23/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86-Bottom-Up-Paring/</id>
        <title>编译原理--Bottom-Up Paring</title>
        <link rel="alternate" href="http://example.com/2024/06/23/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86-Bottom-Up-Paring/"/>
        <content type="html">&lt;h2 id=&#34;1-right-sentential-form&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-right-sentential-form&#34;&gt;#&lt;/a&gt; 1 Right sentential form&lt;/h2&gt;
&lt;p&gt;最右句型，最右推导产生的句型称为最右句型，最右句型中，句柄的右边一定是终结符&lt;/p&gt;
&lt;h2 id=&#34;2-handle&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-handle&#34;&gt;#&lt;/a&gt; 2 Handle&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;reduction 归约：把一个与某产生式的右部相匹配的子串替换成产生式头部的非终结符的过程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;handle 句柄：和某个产生式体匹配的子串，对它归约体现了相应的最右推导&lt;/strong&gt;，但不是所有的和产生式体匹配的子串都是句柄，必须对他归约体现最右推导才行。&lt;/p&gt;
&lt;h2 id=&#34;3-viable-prefix&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-viable-prefix&#34;&gt;#&lt;/a&gt; 3 Viable prefix&lt;/h2&gt;
&lt;p&gt;可以出现在一个移入 - 归约 语法分析器的栈中的最右句型前缀被称为可行前缀。定义：可行前缀是一个最右句型的前缀，并且没有越过最右句型的最右句柄的右端，所以可以通过向可行前缀的右边添加某些终止符得到最右句型。&lt;/p&gt;
&lt;h2 id=&#34;4-items-and-states&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-items-and-states&#34;&gt;#&lt;/a&gt; 4 items and states&lt;/h2&gt;
&lt;p&gt;state 表明我们在语法分析的过程中所处的位置，state 是 item 的集合。增广文法，为了把开始 symbol 也加入分析过程而设计的文法，G 的增广文法 G‘就是在 G 中加上新开始符号 S&#39; 和产生式 S’-&amp;gt;S 而得到的文法。&lt;/p&gt;
&lt;p&gt;项集的闭包 CLOSURE（I）的求法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;把 I 中的各项加入到 CLOSURE（I）中&lt;/li&gt;
&lt;li&gt;如果 A-&amp;gt;a・Bb 在 CLOSURE（I）中，B-&amp;gt;y 是产生式，并且 B-&amp;gt;・y 不属于闭包中，则添加，一直重复这个过程&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;GOTO（I，X），I 是项集，X 是文法符号，移动项集中的产生式的点，如果右边是 X，移动到 X 的后面。并将产生变化是项集中成新的项集 I&#39;&lt;/p&gt;
&lt;p&gt;Dfa of LR（0）items 的求法；&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;求 I0 的闭包，I0 初始化为增广文法，闭包作为新的 I0；&lt;/li&gt;
&lt;li&gt;确定 I0 的 GOTO，移动・形成新的项集，求项集的闭包作为新的 Ii，Ij；&lt;/li&gt;
&lt;li&gt;重复步骤二知道没有新的状态产生已经状态之间的 GOTO 关系全部阐明&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;5-shiftreducelrparsing&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-shiftreducelrparsing&#34;&gt;#&lt;/a&gt; 5 shift/reduce（LR）parsing&lt;/h2&gt;
&lt;p&gt;移入归约分析，设立一个栈用来保存信息，每一步决定将输入移入或者将栈顶归约，直到得到增广文法符号。&lt;/p&gt;
&lt;h2 id=&#34;6-lr0parsing&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6-lr0parsing&#34;&gt;#&lt;/a&gt; 6 LR（0）parsing&lt;/h2&gt;
&lt;p&gt;LR 语法分析器&lt;br&gt;
&lt;img data-src=&#34;LR%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8.png&#34; alt=&#34;LR语法分析器&#34;&gt;&lt;br&gt;
当前输入符号 ai 和栈顶状态 sm，查询 ACTION【sm，ai】了解要执行什么动作。如果是移入就把下一个状态 s 移入，更新输入符号；如果是归约就执行归约动作，先将符号进行归约，然后把栈顶的状态弹出，根据归约后的文法符号查询当前栈顶的 GOTO 函数，把 GOTO 函指向的状态推入栈中；如果是接受则结束分析；如果是报错就报错。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;LR 语法分析算法，需要 parsing table，构建 parsing 的过程：需要知道所有非终结符的 FollowSet&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li i0，i1，...，in&gt;构造 G&#39; 的规范 LR（0）项集族&lt;/li&gt;
&lt;li&gt;根据 I 构造状态 i，确定状态 i 的语法动作
&lt;ol&gt;
&lt;li&gt;GOTO（Ii，a）=Ij，且 Ii 中有・位于 a 前的项，将 ACTION【Ii，a】设为移入 Ij&lt;/li&gt;
&lt;li&gt;A 产生式的体的・位于最后，将 FOLLOW（A）中的所有 a，设置 ACTION【Ii，a】为归约 A-&amp;gt;a&lt;/li&gt;
&lt;li&gt;S’-&amp;gt;S・，设置 $ 为 scc&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;对于非终止符的 GOTO，设置 GOTO 表项&lt;/li&gt;
&lt;li&gt;所有未填的项为 error&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以先构造 LR 自动机，方便计算各个表项&lt;/p&gt;
&lt;h2 id=&#34;7-slr1parsing&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#7-slr1parsing&#34;&gt;#&lt;/a&gt; 7 SLR（1）parsing&lt;/h2&gt;
</content>
        <category term="编译原理" />
        <updated>2024-06-22T17:16:46.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2024/06/22/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86-Top-Down-Parsing/</id>
        <title>编译原理--Top-Down Parsing</title>
        <link rel="alternate" href="http://example.com/2024/06/22/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86-Top-Down-Parsing/"/>
        <content type="html">&lt;p&gt;&lt;strong&gt;Top-Down Parsing:&lt;/strong&gt;&lt;br&gt;
 从开始符号开始，尝试猜测要应用于最终用户程序的产生式。&lt;br&gt;
&lt;strong&gt;Bottom-Up Parsing&lt;/strong&gt;&lt;br&gt;
 从用户程序开始，尝试反向应用产生式，将程序转换回起始符号&lt;/p&gt;
&lt;h2 id=&#34;1-what-is-the-predictive-parsing&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-what-is-the-predictive-parsing&#34;&gt;#&lt;/a&gt; 1 what is the predictive parsing?&lt;/h2&gt;
&lt;p&gt;以剩余的输入为基础，猜测哪一个产生式被使用。利用 lookahead tokens 来预测下一个产生式。&lt;/p&gt;
&lt;p&gt;predictive parsing 的条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Top-Down Parsing，从文法的开始标记开始&lt;/li&gt;
&lt;li&gt;可以根据现有的输入 token 决定一个具体的下一步的产生式，就可以预测&lt;/li&gt;
&lt;li&gt;predictive parsing 接受 LL（k）文法&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-ll1-grammar&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-ll1-grammar&#34;&gt;#&lt;/a&gt; 2 LL(1) grammar&lt;/h2&gt;
&lt;p&gt;LL（1）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;L：从左到右去 scan 输入&lt;/li&gt;
&lt;li&gt;L：最左推导&lt;/li&gt;
&lt;li&gt;1：需要最多 1 个 look ahead token 来预测&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如何判断一个文法是否为 LL（1）文法？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于所有的相同左部的产生式当中，产生式的右部的 first set 不相交&lt;/li&gt;
&lt;li&gt;对于所有的 first set 中包含 e 的非终止符 A，first（A）和 follow（A）的交集不相交&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;满足上面两个条件的为 LL（1）无关文法&lt;/p&gt;
&lt;p&gt;验证 LL（1）无关文法时，只用会 A=&amp;gt;*e 的非终止符才需要求 Follow set 来验证&lt;/p&gt;
&lt;h2 id=&#34;3-first-set-and-follow-set&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-first-set-and-follow-set&#34;&gt;#&lt;/a&gt; 3 First set and Follow set&lt;/h2&gt;
&lt;p&gt;非常重要，判断一个文法是不是 LL（1）文法的基础！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;First set&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;define：G=(VN, VT, P, S) is a grammar, b=(VN U VT)* ，FIRST(b) = { a ∊ VT | b =&amp;gt; * a......} if b =&amp;gt; * ε then ε ∊ FIRST(b)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;讲人话就是 string b 的 first set 就是可以被 b 推导的排在第一个终止符的集合&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;计算 First（A）的算法！！！：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;终止符的 first 集合是它本身&lt;/li&gt;
&lt;li&gt;for all A∈ VN ,if A =&amp;gt; *ε, then First(A)={ε} else  First(A)={ } ;&lt;/li&gt;
&lt;li&gt;For each production A→X1…Xj…Xn, First(A)=First(A) U SectionFirst(X1…Xj…Xn);&lt;/li&gt;
&lt;li&gt;一直重复 3，直到 A 的 first 集合没有变化&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;SectionFirst(X1…Xj…Xn) = (First(X1)-{e})U(First(X2)-{e})U...U(First(Xj+1))&lt;/p&gt;
&lt;p&gt;Xj+1 是第一个不是 nullable 的 symbol，即不能推导到 e&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if X1 is not nullable, then SectionFirst(X1…Xj…Xn) =First(X1)&lt;/li&gt;
&lt;li&gt;if X1 is nullable, then SectionFirst(X1…Xj…Xn) =First(X1) -{ε}, and continue to see X2. Stop untill is not nullable .&lt;/li&gt;
&lt;li ε&gt;if X1…Xn are all nullable, then SectionFirst(X1…Xn)= (First(X1) -{ε}) (First(X2)-{ε})U… U(First(Xn) -{ε}) ∪&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Follow sets&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;definition：G=(VT, VN, S,P) is a grammar，A∈VN ，FOLLOW(A)={a ∊ VT | S =&amp;gt; *…Aa…}，if S =&amp;gt; *  …A, then $ ∊ FOLLOW(A)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;直观上，非终结符 A 的跟随集合是该语法的所有句型中 A 之后的终结符（包括 $）的集合。&lt;/p&gt;
&lt;p&gt;如何预测，如果当前输入存在于某个产生式右部的 first sets 中，选择这个产生式，存在于某个产生式左部的非终止符的 follow sets 中，选择这个产生式&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Follow (A) 的算法&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;S is the start symbol, Follow(S)={$};for all A∊VN, and A≠S,Follow(A)={ };&lt;/li&gt;
&lt;li&gt;For each production B→αAγ, for each A that is a nonterminal do
&lt;ul&gt;
&lt;li&gt;Follow(A)=Follow(A)U(First(γ) -{ε})&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;if ε ∈ First(γ) then add Follow(B) to Follow(A)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;如果 A 位于产生式体的最后，add Follow (B) to Follow (A)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Repeat 2,until there is no change to any follow set&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;4-recursive-descent-parsing递归下降解析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-recursive-descent-parsing递归下降解析&#34;&gt;#&lt;/a&gt; 4 Recursive-descent parsing 递归下降解析&lt;/h2&gt;
&lt;p&gt;从一个开始 symbol 的产生式开始，为每个非终结符 A 定义一个能够识别 A 的 procedures，A 语法规则的右侧指定了该过程的代码结构。terminals 表示匹配输入，nonterminals 表示调用其他的 procedures，choices 表示 alternatives (case or if statement) within the code&lt;/p&gt;
&lt;p&gt;递归下降解析的过程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先判断文法是否属于 LL（1）文法
&lt;ul&gt;
&lt;li&gt;判断是否存在左递归，消除左递归因子&lt;/li&gt;
&lt;li&gt;计算 First Set 和 Follow Set&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;构建 Recursive-Descent Parser&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;consists of a main procedure and a group of recursive procedures, each corresponds to a nonterminal of the grammar&lt;/li&gt;
&lt;li&gt;Sub procedures used :
&lt;ul&gt;
&lt;li&gt;match is a procedure that matches the current next token with its parameter, advances the input if it succeeds, and declares error if it does not&lt;/li&gt;
&lt;li&gt;error is a procedure that prints an error message and exit&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Variable used:&lt;/li&gt;
&lt;li&gt;TOKEN is a variable that keeps the current next token in the input&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;\\If productions of nonterminal U are &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    \\U → x1 | x2 |…|xn, and x1,...,xn≠ ε, then the code for procedure U \\is as follow:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      if TOKEN in First(x1) then p_x1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      else if TOKEN in First(x2) then p_x2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;              else …&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;              …&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                   else if TOKEN in First(xn) then p_xn&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                       else ERROR&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;\\If a production of U is U → ε, then rewrite code &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;if TOKEN in First(xn) then p_xn&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        else if TOKEN not in Follow(U) then ERROR&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;The code for p_x where x=y1y2…yn is:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    begin p_y1;p_y2;…;p_yn end&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if yi∈VN then p_yi is the call of procedure yi；otherwise, if yi∈VT then p_yi is match(yi)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
 编写 main 程序，为每个非终结符编写程序，为每个终结符编写 match 程序，编写 error 程序&lt;br&gt;
 3. 构建一颗语法树&lt;/p&gt;
&lt;h2 id=&#34;5-ll1parsing&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-ll1parsing&#34;&gt;#&lt;/a&gt; 5 LL(1)parsing&lt;/h2&gt;
&lt;p&gt;与递归下降分析中的递归调用函数不同，LL（1）parsing 使用一个 stack，储存 symbols 等待 match，最终 stack 和 input 同时 match 完，parsing 成功。&lt;br&gt;
&lt;img data-src=&#34;LL1.png&#34; alt=&#34;LL1&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;6-parsing-table&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6-parsing-table&#34;&gt;#&lt;/a&gt; 6 Parsing table&lt;/h2&gt;
&lt;p&gt;描述在适当的解析步骤中产生式的选择。是一个二维数组，M [N,t] 表示在 t 输入时选择 N 的产生式。&lt;/p&gt;
&lt;p&gt;如何构建 Parsing tables：重复以下两个步骤对每一个非终止符&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;For each token ‘a’ in First(α), add A→ α to the entry M[ A,a ]&lt;/li&gt;
&lt;li&gt;if ε is in First(α), for each element ‘a’ of Follow(A) (token or $), add A→α  to M[ A,a ]&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;The LL(1) parsing algorithm&lt;/strong&gt;&lt;br&gt;
&lt;img data-src=&#34;TheLL(1)parsingalgorithm.png&#34; alt=&#34;TheLL(1)parsingalgorithm&#34;&gt;&lt;/p&gt;
</content>
        <category term="编译原理" />
        <updated>2024-06-22T10:31:09.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2024/06/22/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86-C-F-G/</id>
        <title>编译原理--C.F.G</title>
        <link rel="alternate" href="http://example.com/2024/06/22/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86-C-F-G/"/>
        <content type="html">&lt;h1 id=&#34;1-context-free-grammar&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-context-free-grammar&#34;&gt;#&lt;/a&gt; 1 Context-free grammar&lt;/h1&gt;
&lt;p&gt;CFG 上下文无关文法，特殊的语法结构，和正则表达式类似，包含可迭代的规则，是正则表达式的超集。&lt;/p&gt;
&lt;p&gt;定义：G=(VT, VN, P, S)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;VT 是 terminals 的集合，终止符，the basic symbols from which strings are formed. Terminals are tokens&lt;/li&gt;
&lt;li&gt;VN 是 nonterminals 的集合，非终止符，names for structures that denote sets of strings&lt;/li&gt;
&lt;li&gt;P 是 productions 的集合，语法规则，A-&amp;gt;a，where A∈ VN and α∈ (VN∪VT) *.&lt;/li&gt;
&lt;li&gt;S is a start symbol , S∈VN&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;2-derivationreduction&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-derivationreduction&#34;&gt;#&lt;/a&gt; 2 Derivation/reduction&lt;/h1&gt;
&lt;p&gt;derivation 推导的作用&lt;/p&gt;
&lt;p&gt;CFG 规则决定 strings of token 的合法性是通过 derivation 或者 reduction 的。derivation 的过程就是将一个非终止符替换成该 production 的右边的过程的重复过程。&lt;/p&gt;
&lt;p&gt;CFA 的 language：&lt;br&gt;
Let G be a context-free grammar with start symbol S. Then the language of G is:&lt;/p&gt;
&lt;p s∈vt* | there exists s&gt;L(G) =&lt;/p&gt;
&lt;h1 id=&#34;3-leftmost-derivation&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-leftmost-derivation&#34;&gt;#&lt;/a&gt; 3 leftmost derivation&lt;/h1&gt;
&lt;p&gt;最左推导：在推导的每一步里优先推导最左边的非终止符，对应对一颗 parse tree 进行前序遍历。&lt;/p&gt;
&lt;h1 id=&#34;4-rightmost-derivation&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-rightmost-derivation&#34;&gt;#&lt;/a&gt; 4 rightmost derivation&lt;/h1&gt;
&lt;p&gt;最右推导：在推导的每一步里优先推导最右边的非终止符，它对应于解析树的后序遍历的逆过程&lt;/p&gt;
&lt;h1 id=&#34;5-sentential-form-and-sentence&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-sentential-form-and-sentence&#34;&gt;#&lt;/a&gt; 5 sentential form and sentence&lt;/h1&gt;
&lt;p&gt;什么是 sentence？S is the start symbol of G, if S =》 * α, α ∈ (VN∪VT) *, α is a sentential form of G。但如果 a 只有终止符构成，则 a 是 G 的 sentence。注意 sentence form 和 sentence 的区别。&lt;/p&gt;
&lt;h1 id=&#34;6-parse-tree&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6-parse-tree&#34;&gt;#&lt;/a&gt; 6 parse tree&lt;/h1&gt;
&lt;p&gt;语法树。表示 token 串的结构的工具。如何定义一个 parse tree？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The root node is labeled with the start symbol S&lt;/li&gt;
&lt;li&gt;Each leaf node is labeled with a terminal or with ε&lt;/li&gt;
&lt;li&gt;Each nonleaf node is labeled with a nonterminal&lt;/li&gt;
&lt;li&gt;If a node with label A ∈ VN has n children with labels X1,X2,..,Xn (which may be terminals or nonterminals), then A -》 X1X2…Xn ∈P。一个产生式可以对应一个内部节点的分叉。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如何输出一个 parse tree 呢？叶子节点的自左向右遍历就是原始输入&lt;/p&gt;
&lt;h1 id=&#34;7-abstract-syntas-tree&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#7-abstract-syntas-tree&#34;&gt;#&lt;/a&gt; 7 Abstract syntas tree&lt;/h1&gt;
&lt;p&gt;parse tree 很多对于编译器生成可执行代码的多余的信息，因此需要抽象语法树来简化。AST 是 parse tree 的压缩，叶子节点是操作对象，内部节点是操作&lt;/p&gt;
&lt;h1 id=&#34;8-grammars-with-left-recursion-andor-left-factor&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#8-grammars-with-left-recursion-andor-left-factor&#34;&gt;#&lt;/a&gt; 8 grammars with left recursion and/or left factor&lt;/h1&gt;
&lt;p&gt;左递归文法以及如何提取左公因子消除左递归&lt;/p&gt;
&lt;p&gt;A -&amp;gt; Aa|b1|b2 转换为&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A -&amp;gt; b1A&#39;|b2A&#39;&lt;/li&gt;
&lt;li&gt;A&#39; -&amp;gt; aA&#39;|e&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;9-ambiguous-grammar&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#9-ambiguous-grammar&#34;&gt;#&lt;/a&gt; 9 ambiguous grammar&lt;/h1&gt;
&lt;p&gt;歧义：某些文法会对用一个 string 产生不同的 parse tree，也就是最左推导和最右推导产生的语法树是不一样的。&lt;/p&gt;
&lt;p&gt;如何处理歧义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Disambiguating rule ：设置规则确认哪一个 parse tree 是正确的&lt;/li&gt;
&lt;li&gt;Rewriting the grammar：重写文法消除歧义，比如添加优先级、关联性&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="编译原理" />
        <updated>2024-06-22T08:28:41.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2024/06/22/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86-Lexical/</id>
        <title>编译原理--Lexical</title>
        <link rel="alternate" href="http://example.com/2024/06/22/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86-Lexical/"/>
        <content type="html">&lt;h2 id=&#34;1-write-regular-express-re-写正规表达式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-write-regular-express-re-写正规表达式&#34;&gt;#&lt;/a&gt; 1 Write regular express RE 写正规表达式&lt;/h2&gt;
&lt;p&gt;RE 是描述 token 模式的重要表示方法。&lt;/p&gt;
&lt;p&gt;alphabet 是一个有限的符号集合，字母、数字、标点符号，符号序列称为串 string。空串 empty string 是长度为 0 的 string，用 e 表示&lt;/p&gt;
&lt;p&gt;正则表达式的三个运算：连接（concatenation）、或（or）、闭包（kleene）&lt;br&gt;
&lt;img data-src=&#34;%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%BF%90%E7%AE%97.png&#34; alt=&#34;正则表达式运算&#34;&gt;&lt;br&gt;
闭包分为普通闭包和正闭包，正闭包不包含空串，普通闭包是正闭包加上 e。string 与自身连接称为指数运算，也叫闭包，连接 0 次是 e。或运算时两个 string 的并集。&lt;/p&gt;
&lt;p&gt;正则表达式的构建：正则表达式是由小的基础的正则表达式使用运算规则&lt;strong&gt;递归的&lt;/strong&gt;构建起来的。&lt;/p&gt;
&lt;p&gt;归纳基础：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;e 时一个正则表达式，L（e）={e}，说明该语言只包含空串&lt;/li&gt;
&lt;li&gt;a 是字符集里的一个符号，就是一个大小为 1 的 string 的正则表达式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;构建运算符的优先级：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;* 闭包运算的优先级最高，并且是左结合的&lt;/li&gt;
&lt;li&gt;连接其次，也是左结合&lt;/li&gt;
&lt;li&gt;| 优先级最低，左结合&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;正则定义&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为给某些正则表达式命名，用符号来调用该正则表达式，使用正则定义实现（regular definition）举例：d-&amp;gt;r&lt;/p&gt;
&lt;p&gt;d 是一个新符号，不在预先规定的字母表中，r 是字母表和别的 di 相并的基础上的正则表达式，任何的 r 都可以替换成只包含原先定义的字母表中的符号，不包含 di，所以 di 也可以替换成只包含的原先定义的字母表的符号，这个过程就是正则定义的过程。&lt;strong&gt;正则定义可以规定某个 string 构建的模式。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-the-transition-from-res-to-nfas-正规表达式转nfa&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-the-transition-from-res-to-nfas-正规表达式转nfa&#34;&gt;#&lt;/a&gt; 2 the transition from REs to NFAs 正规表达式转 NFA&lt;/h2&gt;
&lt;p&gt;什么是 NFA？先了解什么是 fa，fa（finite automata）有穷状态机，fa 是 recognizer，对输入进行是否的判断；fa 分为两类，一类是 nfa，一类是 dfa。nfa（Nondeterministic finite automata）非确定有限状态机。定义规则如下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个有穷的状态集合 S&lt;/li&gt;
&lt;li&gt;一个输入符号集合 M（input alphabet），假设 e 不在输入集合内&lt;/li&gt;
&lt;li&gt;一个是 Transition function，对特性的上输入和状态做出状态转化的反应&lt;/li&gt;
&lt;li&gt;一个初始状态 S0&lt;/li&gt;
&lt;li&gt;一个接受状态 F&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;NFA 容易通过正则表达式构建，但很难形成程序结构表示。转化需要一张状态转换表，说明每个状态在不同输入下转化的状态。如果一个输入 string 可以使得 S0 到达 F，说明这个 string 被 NFA 接收，否则 string 被忽略。所有能被接收到集合就是使用正则表达式构建的 NFA 的描述的 string 的集合。&lt;/p&gt;
&lt;p&gt;下面介绍 &lt;strong&gt;正则表达式 re 转化为 nfa&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;给出一个算法，可以把所有的正则表达式转换为 NFA。构造一个 NFA 的规则分为基本规则和归纳规则。基本规则处理不包含运算符的子表达式，归纳规则根据一个给定的表达式的直接&lt;strong&gt;子表达式的 NFA&lt;/strong&gt; 构造这个表达式的 NFA。&lt;/p&gt;
&lt;p&gt;归纳规则分为三种：连接、或、闭包。&lt;/p&gt;
&lt;p&gt;连接&lt;br&gt;
&lt;img data-src=&#34;%E8%BF%9E%E6%8E%A5.png&#34; alt=&#34;连接&#34;&gt;&lt;br&gt;
或&lt;br&gt;
&lt;img data-src=&#34;%E6%88%96.png&#34; alt=&#34;或&#34;&gt;&lt;br&gt;
闭包&lt;br&gt;
&lt;img data-src=&#34;%E9%97%AD%E5%8C%85.png&#34; alt=&#34;闭包&#34;&gt;&lt;/p&gt;
&lt;p&gt;正则表达式的递归构建 nfa，先把正则表达式的表达式树写出来，对其进行后序遍历的构造，每个节点根据实际情况分为基本构造和归纳构造，得到的结果就是 NFA。&lt;/p&gt;
&lt;h2 id=&#34;3-the-transition-from-nfas-to-dfa-nfa转dfa&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-the-transition-from-nfas-to-dfa-nfa转dfa&#34;&gt;#&lt;/a&gt; 3 the transition from NFAs to DFA Nfa 转 Dfa&lt;/h2&gt;
&lt;p&gt;什么是 DFA？Dfa 同样是 fa 的一种，被称为确定的有限状态机。DFA 是 NFA 的特例，DFA 有几个约束条件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;没有 e 的边&lt;/li&gt;
&lt;li&gt;对于一个状态 s 和每个输入符号 a，只有一个标号为 a 的边离开 s，也就是 s 不能射出两个同样标号的边。但是可以射入两个以上的标号为 a 的边。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Dfa 可以容易的使用程序来表示转化过程&lt;/p&gt;
&lt;p&gt;NFA 构造 DFA 算法：子集构造法&lt;br&gt;
算法需要使用 NFA 为 DFA 构造一个状态转换表，根据这个转换表可以很容易的实现 DFA 的程序表示。转换表的是表项的 DFA 的状态，是 NFA 的状态集合。算法有三个重要的函数：&lt;br&gt;
&lt;img data-src=&#34;rfa%E8%BD%ACdfa.png&#34; alt=&#34;rfa转dfa&#34;&gt;&lt;br&gt;
 注意 s 是一个 nfa 状态，T 是一个 nfa 状态集合。&lt;br&gt;
&lt;img data-src=&#34;rfa%E8%BD%ACdfa%E7%AE%97%E6%B3%95.png&#34; alt=&#34;rfa转dfa算法&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;找到 NFA 的 S0 的 e 闭包集合作为 DFA 的开始状态&lt;/li&gt;
&lt;li&gt;对这个开始状态进行对不同输入的 move，得到的结果进行 e 闭包运算，如果这个状态集合还没有归入 DFA 的状态，归入后重复第二步骤&lt;/li&gt;
&lt;li&gt;一直重复知道没有新的 DFA 的状态出现&lt;/li&gt;
&lt;li&gt;包含 NFA 的结束状态的状态集合是 DFA 的结束状态&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;4-the-transition-from-fas-to-res-有限状态机转正则表达式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-the-transition-from-fas-to-res-有限状态机转正则表达式&#34;&gt;#&lt;/a&gt; 4 the transition from FAs to REs 有限状态机转正则表达式&lt;/h2&gt;
&lt;p&gt;也就是使用状态机来生成正则表达式&lt;/p&gt;
&lt;h2 id=&#34;5-dfa的最小化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-dfa的最小化&#34;&gt;#&lt;/a&gt; 5 DFA 的最小化&lt;/h2&gt;
&lt;p&gt;先说明一个概念：Equivalent States&lt;/p&gt;
&lt;p&gt;当两个状态都是接收状态或者非接受状态，对于字母表中的每个字母，s 和 t 都有相同的 transitions on a to 相同的或者等价的状态，则这两个状态是等价的。&lt;/p&gt;
&lt;p&gt;最小化算法；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先把 DFA 状态集合划分会非接受和接收状态集合。&lt;/li&gt;
&lt;li&gt;使用字母表中的所有字母（所有可能的输入）对 subset 中的状态集合进行划分成等价的状态集合。&lt;/li&gt;
&lt;li&gt;重复这个过程直到每个集合只有一个元素或者无法被继续划分&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;6-scanner的构建&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6-scanner的构建&#34;&gt;#&lt;/a&gt; 6 scanner 的构建&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;词法分析的错误处理是 panic mode&lt;/strong&gt;&lt;/p&gt;
</content>
        <category term="编译原理" />
        <updated>2024-06-22T06:27:27.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2024/06/22/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86-%E4%BB%8B%E7%BB%8DIntroduction/</id>
        <title>编译原理--介绍Introduction</title>
        <link rel="alternate" href="http://example.com/2024/06/22/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86-%E4%BB%8B%E7%BB%8DIntroduction/"/>
        <content type="html">&lt;h2 id=&#34;1-the-phase-of-a-compiler&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-the-phase-of-a-compiler&#34;&gt;#&lt;/a&gt; 1 The Phase Of A Compiler&lt;/h2&gt;
&lt;p&gt;编译器能够把源程序映射为在语义上等价的目标程序。这个映射过程由两个主要部分构成：&lt;strong&gt;分析部分&lt;/strong&gt; + &lt;strong&gt;综合部分&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;一个 Compiler 的 phase 大致可以分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;lexical analysis（scan）&lt;/li&gt;
&lt;li&gt;syntax analysis（parse）&lt;/li&gt;
&lt;li&gt;semantic analysis 语义分析&lt;/li&gt;
&lt;li&gt;中间代码生成&lt;/li&gt;
&lt;li&gt;代码优化&lt;/li&gt;
&lt;li&gt;代码生成器&lt;/li&gt;
&lt;li&gt;机器代码优化&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;%E7%BC%96%E8%AF%91%E5%99%A8%E7%9A%84%E5%90%84%E4%B8%AAphase.png&#34; alt=&#34;编译器的各个phase&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;11-lexical-analysis&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#11-lexical-analysis&#34;&gt;#&lt;/a&gt; 1.1 lexical analysis&lt;/h3&gt;
&lt;p&gt;词法分析器读入组成源程序的字符流，并且将它们组成有意义的 lexeme 的序列，输出 token。token = &amp;lt;token-name，attribute-value&amp;gt;。token-name 是符号表中的使用的抽象符号，比如标识符的抽象符号就是 id，attribute-value 对应源字符串在符号表中对应的条目。条目存放该字符串的信息，比如值。词法分析阶段就是把字符流转化为 token 流。&lt;/p&gt;
&lt;h3 id=&#34;12-syntax-analysis&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#12-syntax-analysis&#34;&gt;#&lt;/a&gt; 1.2 syntax analysis&lt;/h3&gt;
&lt;p&gt;语法分析器使用由词法分析器生成的 token 的第一个元素来构建树形的中间表示，该中间表示给出了 token 流的语法结构，通常使用语法分析树来表示。树的内部节点表示一个运算&lt;/p&gt;
&lt;h3 id=&#34;13-semantic-analysis&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#13-semantic-analysis&#34;&gt;#&lt;/a&gt; 1.3 semantic analysis&lt;/h3&gt;
&lt;p&gt;语义分析器：只用语法树和符号表中的信息来检查源程序是否和语言定义的语义一致。重要的主题是：类型检查，语义检查&lt;/p&gt;
&lt;h3 id=&#34;14-中间代码生成&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#14-中间代码生成&#34;&gt;#&lt;/a&gt; 1.4 中间代码生成&lt;/h3&gt;
&lt;p&gt;三地址代码&lt;/p&gt;
&lt;h2 id=&#34;2-compiler和interpreter的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-compiler和interpreter的区别&#34;&gt;#&lt;/a&gt; 2 compiler 和 interpreter 的区别&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;interpreter 是直接利用用户提供的输入执行源代码中的指定的操作，把用户的输入映射成输出的过程，并不通过翻译的方法生成目标程序。&lt;/li&gt;
&lt;li&gt;compiler 是先将源程序翻译成一种能被计算机执行的形式，完成这个翻译过程的软件称为 compiler。&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="编译原理" />
        <updated>2024-06-22T05:40:48.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2024/06/04/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86--%E4%B8%AD%E9%97%B4%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E4%B9%8B%E6%8E%A7%E5%88%B6%E6%B5%81/</id>
        <title>编译原理--中间代码生成之控制流</title>
        <link rel="alternate" href="http://example.com/2024/06/04/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86--%E4%B8%AD%E9%97%B4%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E4%B9%8B%E6%8E%A7%E5%88%B6%E6%B5%81/"/>
        <content type="html">&lt;h2 id=&#34;1-&amp;#x63A7;&amp;#x5236;&amp;#x6D41;&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-&amp;#x63A7;&amp;#x5236;&amp;#x6D41;&#34;&gt;#&lt;/a&gt; 1 &amp;#x63A7;&amp;#x5236;&amp;#x6D41;&lt;/h2&gt;
&lt;p&gt;&amp;#x63A7;&amp;#x5236;&amp;#x6D41;&amp;#x662F; if-else&amp;#x3001;while&amp;#x3001;for &amp;#x8FD9;&amp;#x7C7B;&amp;#x8BED;&amp;#x53E5;&amp;#xFF0C;&amp;#x8FD9;&amp;#x7C7B;&amp;#x8BED;&amp;#x53E5;&amp;#x7684;&amp;#x7FFB;&amp;#x8BD1;&amp;#x548C;&amp;#x5BF9;&amp;#x5E03;&amp;#x5C14;&amp;#x8868;&amp;#x8FBE;&amp;#x5F0F;&amp;#x7684;&amp;#x7FFB;&amp;#x8BD1;&amp;#x662F;&amp;#x7ED3;&amp;#x5408;&amp;#x5728;&amp;#x4E00;&amp;#x8D77;&amp;#x7684;&amp;#x3002;&lt;/p&gt;
&lt;h3 id=&#34;11-&amp;#x5E03;&amp;#x5C14;&amp;#x8868;&amp;#x8FBE;&amp;#x5F0F;&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#11-&amp;#x5E03;&amp;#x5C14;&amp;#x8868;&amp;#x8FBE;&amp;#x5F0F;&#34;&gt;#&lt;/a&gt; 1.1 &amp;#x5E03;&amp;#x5C14;&amp;#x8868;&amp;#x8FBE;&amp;#x5F0F;&lt;/h3&gt;
&lt;p&gt;&amp;#x9996;&amp;#x5148;&amp;#x6765;&amp;#x4ECB;&amp;#x7ECD;&amp;#x5E03;&amp;#x5C14;&amp;#x8868;&amp;#x8FBE;&amp;#x5F0F;&amp;#x7684;&amp;#x7FFB;&amp;#x8BD1;&amp;#x8FC7;&amp;#x7A0B;&amp;#x3002;&lt;/p&gt;
&lt;p&gt;&amp;#x5E03;&amp;#x5C14;&amp;#x8868;&amp;#x8FBE;&amp;#x5F0F;&amp;#x7531;&amp;#x5E03;&amp;#x5C14;&amp;#x53D8;&amp;#x91CF;&amp;#x548C;&amp;#x5173;&amp;#x7CFB;&amp;#x8868;&amp;#x8FBE;&amp;#x5F0F;&amp;#x7684;&amp;#x5E03;&amp;#x5C14;&amp;#x8FD0;&amp;#x7B97;&amp;#x7B26;&amp;#x6784;&amp;#x6210;&amp;#xFF0C;&amp;#x5173;&amp;#x7CFB;&amp;#x8868;&amp;#x8FBE;&amp;#x5F0F;&amp;#x7684;&amp;#x5F62;&amp;#x5F0F;&amp;#x4E3A; E1 rel E2&amp;#x3002; &amp;#x5C5E;&amp;#x6027; rel.op &amp;#x8868;&amp;#x793A;&amp;#x5173;&amp;#x7CFB;&amp;#x8FD0;&amp;#x7B97;&amp;#x7B26;&amp;#x7684;&amp;#x67D0;&amp;#x4E00;&amp;#x79CD;&amp;#x3002;&lt;/p&gt;
&lt;h3 id=&#34;12-&amp;#x77ED;&amp;#x8DEF;&amp;#x4EE3;&amp;#x7801;&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#12-&amp;#x77ED;&amp;#x8DEF;&amp;#x4EE3;&amp;#x7801;&#34;&gt;#&lt;/a&gt; 1.2 &amp;#x77ED;&amp;#x8DEF;&amp;#x4EE3;&amp;#x7801;&lt;/h3&gt;
&lt;p&gt;&amp;#x5728;&amp;#x77ED;&amp;#x8DEF;&amp;#x4EE3;&amp;#x7801;&amp;#x4E2D;&amp;#xFF0C;&amp;#x5E03;&amp;#x5C14;&amp;#x8FD0;&amp;#x7B97;&amp;#x7B26; &amp;amp;&amp;amp;&amp;#x3001;||&amp;#x3001;&amp;#xFF01;&amp;#x88AB;&amp;#x7FFB;&amp;#x8BD1;&amp;#x6210;&amp;#x8DF3;&amp;#x8F6C;&amp;#x6307;&amp;#x4EE4; goto&amp;#xFF1B;&amp;#x8FD9;&amp;#x4E09;&amp;#x4E2A;&amp;#x8FD0;&amp;#x7B97;&amp;#x7B26;&amp;#x5728;&amp;#x7FFB;&amp;#x8BD1;&amp;#x4E2D;&amp;#x6CA1;&amp;#x6709;&amp;#x7B26;&amp;#x53F7;&amp;#x663E;&amp;#x793A;&amp;#x3002;&lt;/p&gt;
&lt;h3 id=&#34;13-&amp;#x63A7;&amp;#x5236;&amp;#x6D41;&amp;#x8BED;&amp;#x53E5;&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#13-&amp;#x63A7;&amp;#x5236;&amp;#x6D41;&amp;#x8BED;&amp;#x53E5;&#34;&gt;#&lt;/a&gt; 1.3 &amp;#x63A7;&amp;#x5236;&amp;#x6D41;&amp;#x8BED;&amp;#x53E5;&lt;/h3&gt;
&lt;p&gt;&amp;#x6807;&amp;#x53F7;&amp;#x662F;&amp;#x67D0;&amp;#x5173;&amp;#x7CFB;&amp;#x8868;&amp;#x8FBE;&amp;#x5F0F;&amp;#x4E3A;&amp;#x771F;&amp;#x65F6;&amp;#x8BE5;&amp;#x8DF3;&amp;#x8F6C;&amp;#x7684;&amp;#x5730;&amp;#x65B9;&amp;#x3002;&lt;/p&gt;
&lt;p&gt;&amp;#x5047;&amp;#x8BBE;&amp;#x6BCF;&amp;#x6B21;&amp;#x8C03;&amp;#x7528; newlabel () &amp;#x90FD;&amp;#x4F1A;&amp;#x4EA7;&amp;#x751F;&amp;#x4E00;&amp;#x4E2A;&amp;#x65B0;&amp;#x7684;&amp;#x6807;&amp;#x53F7;&amp;#xFF0C;&amp;#x5E76;&amp;#x5047;&amp;#x8BBE; label (L) &amp;#x4E3A;&amp;#x5C06;&amp;#x6807;&amp;#x53F7; L &amp;#x9644;&amp;#x52A0;&amp;#x5230;&amp;#x5373;&amp;#x5C06;&amp;#x751F;&amp;#x6210;&amp;#x7684;&amp;#x4E0B;&amp;#x4E00;&amp;#x6761;&amp;#x4E09;&amp;#x5730;&amp;#x5740;&amp;#x6307;&amp;#x4EE4;&amp;#x4E0A;&amp;#x3002;&lt;/p&gt;
&lt;p&gt;&amp;#x6BD4;&amp;#x5982;&amp;#xFF1A;B.true = newlabel ()&lt;br&gt;
S.code = label(B.true)&lt;/p&gt;
&lt;p&gt;&amp;#x8BF4;&amp;#x660E;&amp;#x8DF3;&amp;#x8F6C;&amp;#x5230; B.true &amp;#x7684;&amp;#x6307;&amp;#x4EE4;&amp;#x4F1A;&amp;#x8DF3;&amp;#x8F6C;&amp;#x5230; S.code &amp;#x4E0A;&amp;#xFF0C;&amp;#x5C31;&amp;#x662F;&amp;#x8DF3;&amp;#x8F6C;&amp;#x7ED1;&amp;#x5B9A;&amp;#x3002;&lt;/p&gt;
&lt;p&gt;&amp;#x8BED;&amp;#x6CD5; -&amp;gt; &amp;#x8BED;&amp;#x6CD5;&amp;#x89C4;&amp;#x5219;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;if-stmt -&amp;gt; if E then S1 else S2&lt;br&gt;
E.true = newLabel&lt;br&gt;
E.false = newLabel&lt;br&gt;
S1.next = if-stmt.next&lt;br&gt;
S2.next = if-stmt.next&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;if-stmt.code = E.code||goto label E.true||S1.code||goto S1.next||goto Label E.false||S2.code||label if-stmt.next&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;E -&amp;gt; E1 or E2&lt;br&gt;
E1.true = E.true;&lt;br&gt;
E1.false = newLabel&lt;br&gt;
E2.true = E.true;&lt;br&gt;
E2.false = E.false&lt;br&gt;
E.code = E1.code||label E1.false||E2.code&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;E -&amp;gt; E1 and E2&lt;br&gt;
E1.true = newLabel&lt;br&gt;
E1.false = E.false&lt;br&gt;
E2.true = E.true&lt;br&gt;
E2.false = E.false&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;E.code = E1.code||label E1.true||E2.code&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;
&lt;p&gt;E -&amp;gt; id1 &amp;lt; id2&lt;br&gt;
E.code=if &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2lkMS5uYW1l&#34;&gt;id1.name&lt;/span&gt; &amp;lt; &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2lkMi5uYW1l&#34;&gt;id2.name&lt;/span&gt; goto E.true || goto E.false&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;do-stmt -&amp;gt; do S while E&lt;br&gt;
do-stmt.begin=newLabel;&lt;br&gt;
do-stmt.next=newLabel;&lt;br&gt;
E.true=do-stmt.begin;&lt;br&gt;
E.false=do-stmt.next;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;do-stmt.code: Label do-stmt.begin || S.code ||E.code || Label do-stmt.next&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;while-stmt -&amp;gt; while E do S&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="编译原理" />
        <updated>2024-06-04T02:48:31.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2024/06/02/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86--%E8%AF%AD%E5%88%B6%E7%BF%BB%E8%AF%91/</id>
        <title>编译原理--语制翻译</title>
        <link rel="alternate" href="http://example.com/2024/06/02/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86--%E8%AF%AD%E5%88%B6%E7%BF%BB%E8%AF%91/"/>
        <content type="html">&lt;h2 id=&#34;&amp;#x8BED;&amp;#x5236;&amp;#x7FFB;&amp;#x8BD1;&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#&amp;#x8BED;&amp;#x5236;&amp;#x7FFB;&amp;#x8BD1;&#34;&gt;#&lt;/a&gt; &amp;#x8BED;&amp;#x5236;&amp;#x7FFB;&amp;#x8BD1;&lt;/h2&gt;
&lt;h3 id=&#34;1-&amp;#x8BED;&amp;#x6CD5;&amp;#x5236;&amp;#x5BFC;&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-&amp;#x8BED;&amp;#x6CD5;&amp;#x5236;&amp;#x5BFC;&#34;&gt;#&lt;/a&gt; 1 &amp;#x8BED;&amp;#x6CD5;&amp;#x5236;&amp;#x5BFC;&lt;/h3&gt;
&lt;p&gt;&amp;#x4E0A;&amp;#x4E0B;&amp;#x6587;&amp;#x65E0;&amp;#x5173;&amp;#x6587;&amp;#x6CD5;&amp;#x548C;&amp;#x5C5E;&amp;#x6027;&amp;#x53CA;&amp;#x89C4;&amp;#x5219;&amp;#x7684;&amp;#x7ED3;&amp;#x5408;&amp;#x3002;&amp;#x5C5E;&amp;#x6027;&amp;#x548C;&amp;#x6587;&amp;#x6CD5;&amp;#x7B26;&amp;#x53F7;&amp;#x76F8;&amp;#x5173;&amp;#x8054;&amp;#xFF0C;&amp;#x89C4;&amp;#x5219;&amp;#x548C;&amp;#x4EA7;&amp;#x751F;&amp;#x5F0F;&amp;#x76F8;&amp;#x5173;&amp;#x8054;&amp;#x3002;X.a &amp;#x8868;&amp;#x793A; X &amp;#x7B26;&amp;#x53F7; a &amp;#x5C5E;&amp;#x6027;&amp;#x5728;&amp;#x8BED;&amp;#x6CD5;&amp;#x6811;&amp;#x4E2D;&amp;#x7684;&amp;#x503C;&amp;#x3002;&lt;/p&gt;
&lt;h3 id=&#34;11-&amp;#x7EE7;&amp;#x627F;&amp;#x5C5E;&amp;#x6027;&amp;#x548C;&amp;#x7EFC;&amp;#x5408;&amp;#x5C5E;&amp;#x6027;&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#11-&amp;#x7EE7;&amp;#x627F;&amp;#x5C5E;&amp;#x6027;&amp;#x548C;&amp;#x7EFC;&amp;#x5408;&amp;#x5C5E;&amp;#x6027;&#34;&gt;#&lt;/a&gt; 1.1 &amp;#x7EE7;&amp;#x627F;&amp;#x5C5E;&amp;#x6027;&amp;#x548C;&amp;#x7EFC;&amp;#x5408;&amp;#x5C5E;&amp;#x6027;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&amp;#x7EFC;&amp;#x5408;&amp;#x5C5E;&amp;#x6027;&amp;#xFF1A;&amp;#x8BED;&amp;#x6CD5;&amp;#x6811;&amp;#x8282;&amp;#x70B9;&amp;#x503C;&amp;#x662F;&amp;#x7531;&amp;#x5176;&amp;#x672C;&amp;#x8EAB;&amp;#x7684;&amp;#x503C;&amp;#x3001;&amp;#x5B50;&amp;#x8282;&amp;#x70B9;&amp;#x7684;&amp;#x503C;&amp;#x51B3;&amp;#x5B9A;&amp;#x7684;&amp;#xFF0C;&amp;#x5373;&amp;#x8BE5;&amp;#x8282;&amp;#x70B9;&amp;#x7684;&amp;#x4EA7;&amp;#x751F;&amp;#x5F0F;&amp;#x53F3;&amp;#x90E8;&amp;#x53EA;&amp;#x6709;&amp;#x5176;&amp;#x672C;&amp;#x8EAB;&amp;#x548C;&amp;#x5B50;&amp;#x8282;&amp;#x70B9;&amp;#x6240;&amp;#x5173;&amp;#x8054;&amp;#x7684;&amp;#x8BED;&amp;#x4E49;&amp;#x89C4;&amp;#x5219;&amp;#x3002;&amp;#x53F3;&amp;#x90E8;&amp;#x4EA7;&amp;#x751F;&amp;#x5F0F;&amp;#x7684;&amp;#x5934;&amp;#x90E8;&amp;#x5982;&amp;#x679C;&amp;#x6709;&amp;#x672C;&amp;#x8EAB;&amp;#x6216;&amp;#x5B50;&amp;#x8282;&amp;#x70B9;&amp;#x7684;&amp;#x4EA7;&amp;#x751F;&amp;#x5F0F;&amp;#x7684;&amp;#x5934;&amp;#x90E8;&amp;#x6709;&amp;#x5219;&amp;#x4E3A;&amp;#x7EFC;&amp;#x5408;&amp;#x5C5E;&amp;#x6027;&amp;#x3002;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;#x7EE7;&amp;#x627F;&amp;#x5C5E;&amp;#x6027;&amp;#xFF1A;&amp;#x8BED;&amp;#x6CD5;&amp;#x6811;&amp;#x8282;&amp;#x70B9;&amp;#x503C;&amp;#x662F;&amp;#x7531;&amp;#x5176;&amp;#x672C;&amp;#x8EAB;&amp;#x7684;&amp;#x503C;&amp;#xFF0C;&amp;#x7236;&amp;#x8282;&amp;#x70B9;&amp;#x7684;&amp;#x503C;&amp;#x3001;&amp;#x5176;&amp;#x5144;&amp;#x5F1F;&amp;#x8282;&amp;#x70B9;&amp;#x7684;&amp;#x503C;&amp;#x51B3;&amp;#x5B9A;&amp;#x7684;&amp;#xFF0C;&amp;#x8BE5;&amp;#x8282;&amp;#x70B9;&amp;#x7684;&amp;#x4EA7;&amp;#x751F;&amp;#x5F0F;&amp;#x7684;&amp;#x53F3;&amp;#x90E8;&amp;#x6709;&amp;#x7236;&amp;#x8282;&amp;#x70B9;&amp;#xFF0C;&amp;#x5982;&amp;#x679C;&amp;#x7236;&amp;#x8282;&amp;#x70B9;&amp;#x662F;&amp;#x975E;&amp;#x7EC8;&amp;#x6B62;&amp;#x7B26;&amp;#xFF0C;&amp;#x90A3;&amp;#x4E48;&amp;#x8FD8;&amp;#x53EF;&amp;#x80FD;&amp;#x63A8;&amp;#x5BFC;&amp;#x5230;&amp;#x5176;&amp;#x672C;&amp;#x8EAB;&amp;#x548C;&amp;#x5144;&amp;#x5F1F;&amp;#x8282;&amp;#x70B9;&amp;#x3002;&amp;#x672C;&amp;#x8EAB;&amp;#x7684;&amp;#x4EA7;&amp;#x751F;&amp;#x5728;&amp;#x7236;&amp;#x8282;&amp;#x70B9;&amp;#x7684;&amp;#x8BED;&amp;#x6CD5;&amp;#x89C4;&amp;#x5219;&amp;#x4E0A;&amp;#x3002;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;12-&amp;#x5728;&amp;#x8BED;&amp;#x6CD5;&amp;#x5206;&amp;#x6790;&amp;#x6811;&amp;#x7684;&amp;#x8282;&amp;#x70B9;&amp;#x4E0A;&amp;#x5BF9;sdd&amp;#x6C42;&amp;#x503C;&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#12-&amp;#x5728;&amp;#x8BED;&amp;#x6CD5;&amp;#x5206;&amp;#x6790;&amp;#x6811;&amp;#x7684;&amp;#x8282;&amp;#x70B9;&amp;#x4E0A;&amp;#x5BF9;sdd&amp;#x6C42;&amp;#x503C;&#34;&gt;#&lt;/a&gt; 1.2 &amp;#x5728;&amp;#x8BED;&amp;#x6CD5;&amp;#x5206;&amp;#x6790;&amp;#x6811;&amp;#x7684;&amp;#x8282;&amp;#x70B9;&amp;#x4E0A;&amp;#x5BF9; SDD &amp;#x6C42;&amp;#x503C;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&amp;#x6CE8;&amp;#x91CA;&amp;#x8BED;&amp;#x6CD5;&amp;#x5206;&amp;#x6790;&amp;#x6811; annotated parse tree&lt;/strong&gt; &amp;#xFF1A;&amp;#x5404;&amp;#x8282;&amp;#x70B9;&amp;#x7684;&amp;#x503C;&amp;#x88AB;&amp;#x663E;&amp;#x793A;&amp;#x51FA;&amp;#x6765;&amp;#x7684;&amp;#x8BED;&amp;#x6CD5;&amp;#x6811;&lt;/p&gt;
&lt;p&gt;&amp;#x90A3;&amp;#x4E48;&amp;#x5982;&amp;#x4F55;&amp;#x6C42;&amp;#x5F97;&amp;#x8282;&amp;#x70B9;&amp;#x5C5E;&amp;#x6027;&amp;#x7684;&amp;#x503C;&amp;#x5462;&amp;#xFF0C;&amp;#x5BF9;&amp;#x4E8E;&amp;#x7EFC;&amp;#x5408;&amp;#x8282;&amp;#x70B9;&amp;#x7684;&amp;#x5C5E;&amp;#x6027;&amp;#x503C;&amp;#x53EF;&amp;#x4EE5;&amp;#x81EA;&amp;#x5E95;&amp;#x800C;&amp;#x4E0A;&amp;#x6C42;&amp;#x503C;&amp;#xFF1B;&amp;#x5BF9;&amp;#x4E8E;&amp;#x7EE7;&amp;#x627F;&amp;#x8282;&amp;#x70B9;&amp;#x7684;&amp;#x5C5E;&amp;#x6027;&amp;#x503C;&amp;#x53EF;&amp;#x4EE5;&amp;#x81EA;&amp;#x4E0A;&amp;#x800C;&amp;#x4E0B;&amp;#x6C42;&amp;#x503C;&amp;#x3002;&lt;/p&gt;
&lt;h2 id=&#34;2-sdd&amp;#x7684;&amp;#x6C42;&amp;#x503C;&amp;#x987A;&amp;#x5E8F;&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-sdd&amp;#x7684;&amp;#x6C42;&amp;#x503C;&amp;#x987A;&amp;#x5E8F;&#34;&gt;#&lt;/a&gt; 2 SDD &amp;#x7684;&amp;#x6C42;&amp;#x503C;&amp;#x987A;&amp;#x5E8F;&lt;/h2&gt;
&lt;p&gt;&amp;#x7531;&amp;#x4E0A;&amp;#x9762;&amp;#x53EF;&amp;#x4EE5;&amp;#x77E5;&amp;#x9053;&amp;#xFF0C;&amp;#x4E00;&amp;#x4E2A;&amp;#x8BED;&amp;#x6CD5;&amp;#x6811;&amp;#x7684;&amp;#x8282;&amp;#x70B9;&amp;#x6C42;&amp;#x503C;&amp;#x6240;&amp;#x76F8;&amp;#x5173;&amp;#x7684;&amp;#x8282;&amp;#x70B9;&amp;#x5C5E;&amp;#x6027;&amp;#x9519;&amp;#x7EFC;&amp;#x590D;&amp;#x6742;&amp;#xFF0C;&amp;#x53EF;&amp;#x80FD;&amp;#x5728;&amp;#x7236;&amp;#x8282;&amp;#x70B9;&amp;#x4E0A;&amp;#xFF0C;&amp;#x4E5F;&amp;#x53EF;&amp;#x80FD;&amp;#x5728;&amp;#x5B50;&amp;#x8282;&amp;#x70B9;&amp;#x6216;&amp;#x672C;&amp;#x8EAB;&amp;#x3002;&amp;#x90A3;&amp;#x4E48;&amp;#x5982;&amp;#x4F55;&amp;#x786E;&amp;#x5B9A;&amp;#x4E00;&amp;#x9897;&amp;#x8BED;&amp;#x6CD5;&amp;#x6811;&amp;#x7684;&amp;#x8282;&amp;#x70B9;&amp;#x5C5E;&amp;#x6027;&amp;#x7684;&amp;#x6C42;&amp;#x503C;&amp;#x987A;&amp;#x5E8F;&amp;#x5462;&amp;#xFF1F;&lt;/p&gt;
&lt;p&gt;&amp;#x8FD9;&amp;#x5C31;&amp;#x9700;&amp;#x8981;&lt;strong&gt;&amp;#x4F9D;&amp;#x8D56;&amp;#x56FE;&lt;/strong&gt;&amp;#x4E86;&amp;#x3002;&lt;/p&gt;
&lt;p&gt;&amp;#x5982;&amp;#x4F55;&amp;#x7ED8;&amp;#x5236;&amp;#x4F9D;&amp;#x8D56;&amp;#x56FE;&amp;#x5462;&amp;#xFF0C;&amp;#x7B80;&amp;#x5355;&amp;#x6765;&amp;#x8BF4;&amp;#x5C31;&amp;#x662F;&amp;#x4EA7;&amp;#x751F;&amp;#x5F0F;&amp;#x53F3;&amp;#x90E8;&amp;#x7684;&amp;#x5404;&amp;#x4E2A;&amp;#x5C5E;&amp;#x6027;&amp;#x6307;&amp;#x5411;&amp;#x5DE6;&amp;#x90E8;&amp;#x7684;&amp;#x5C5E;&amp;#x6027;&amp;#x3002;&amp;#x6CE8;&amp;#x610F;&amp;#x662F;&amp;#x5728;&amp;#x6E90;&amp;#x8BED;&amp;#x6CD5;&amp;#x6811;&amp;#x4E0A;&amp;#x65B0;&amp;#x753B;&amp;#x51FA;&amp;#x5C5E;&amp;#x6027;&amp;#x5728;&amp;#x8FDB;&amp;#x884C;&amp;#x4F9D;&amp;#x8D56;&amp;#x56FE;&amp;#x7684;&amp;#x7ED8;&amp;#x5236;&amp;#x800C;&amp;#x4E0D;&amp;#x662F;&amp;#x7ED8;&amp;#x5236;&amp;#x5728;&amp;#x5C5E;&amp;#x6027;&amp;#x4E0A;&amp;#x3002;&lt;/p&gt;
&lt;p&gt;&amp;#x5F97;&amp;#x5230;&amp;#x4F9D;&amp;#x8D56;&amp;#x56FE;&amp;#x540E;&amp;#xFF0C;&amp;#x5BF9;&amp;#x4F9D;&amp;#x8D56;&amp;#x56FE;&amp;#x8FDB;&amp;#x884C;&amp;#x62D3;&amp;#x8865;&amp;#x6392;&amp;#x5E8F;&amp;#x5373;&amp;#x53EF;&amp;#x5F97;&amp;#x5230;&amp;#x5404;&amp;#x4E2A;&amp;#x5C5E;&amp;#x6027;&amp;#x503C;&amp;#x7684;&amp;#x6C42;&amp;#x503C;&amp;#x987A;&amp;#x5E8F;&amp;#x3002;&lt;/p&gt;
&lt;p&gt;&amp;#x8BE5;&amp;#x65B9;&amp;#x6CD5;&amp;#x4E5F;&amp;#x53EF;&amp;#x4EE5;&amp;#x5224;&amp;#x65AD;&amp;#x4E00;&amp;#x9897;&amp;#x8BED;&amp;#x6CD5;&amp;#x6811;&amp;#x662F;&amp;#x5426;&amp;#x5B58;&amp;#x5728;&amp;#x5FAA;&amp;#x73AF;&amp;#x4F9D;&amp;#x8D56;&amp;#x7684;&amp;#x5173;&amp;#x7CFB;&amp;#xFF0C;&amp;#x4E5F;&amp;#x5C31;&amp;#x662F;&amp;#x80FD;&amp;#x5426;&amp;#x8FDB;&amp;#x884C; SDD &amp;#x6C42;&amp;#x503C;&amp;#x7684;&amp;#x95EE;&amp;#x9898;&amp;#x3002;&lt;/p&gt;
&lt;h3 id=&#34;21-&amp;#x4E24;&amp;#x79CD;&amp;#x7C7B;&amp;#x578B;&amp;#x7684;sdd&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#21-&amp;#x4E24;&amp;#x79CD;&amp;#x7C7B;&amp;#x578B;&amp;#x7684;sdd&#34;&gt;#&lt;/a&gt; 2.1 &amp;#x4E24;&amp;#x79CD;&amp;#x7C7B;&amp;#x578B;&amp;#x7684; SDD&lt;/h3&gt;
&lt;h4 id=&#34;211-s&amp;#x5C5E;&amp;#x6027;&amp;#x7684;sdd&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#211-s&amp;#x5C5E;&amp;#x6027;&amp;#x7684;sdd&#34;&gt;#&lt;/a&gt; 2.1.1 S &amp;#x5C5E;&amp;#x6027;&amp;#x7684; SDD&lt;/h4&gt;
&lt;p&gt;&amp;#x5982;&amp;#x679C; SDD &amp;#x7684;&amp;#x6240;&amp;#x6709;&amp;#x5C5E;&amp;#x6027;&amp;#x90FD;&amp;#x662F;&amp;#x7EFC;&amp;#x5408;&amp;#x5C5E;&amp;#x6027;&amp;#xFF0C;&amp;#x5219;&amp;#x79F0;&amp;#x4E4B;&amp;#x4E3A; S &amp;#x5C5E;&amp;#x6027;&amp;#x7684; SDD&amp;#x3002;&lt;/p&gt;
&lt;p&gt;&amp;#x53EF;&amp;#x4EE5;&amp;#x91C7;&amp;#x7528;&amp;#x81EA;&amp;#x5E95;&amp;#x5411;&amp;#x4E0A;&amp;#x6765;&amp;#x6C42;&amp;#x89E3;&amp;#x5404;&amp;#x4E2A;&amp;#x5C5E;&amp;#x6027;&amp;#x7684;&amp;#x503C;&amp;#x3002;&lt;/p&gt;
&lt;h4 id=&#34;212-l&amp;#x5C5E;&amp;#x6027;&amp;#x7684;sdd&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#212-l&amp;#x5C5E;&amp;#x6027;&amp;#x7684;sdd&#34;&gt;#&lt;/a&gt; 2.1.2 L &amp;#x5C5E;&amp;#x6027;&amp;#x7684; SDD&lt;/h4&gt;
&lt;p&gt;&amp;#x8FD9;&amp;#x7C7B; SDD &amp;#x7684;&amp;#x601D;&amp;#x60F3;&amp;#x662F;&amp;#x5728;&amp;#x4E00;&amp;#x4E2A;&amp;#x4EA7;&amp;#x751F;&amp;#x5F0F;&amp;#x4F53;&amp;#x6240;&amp;#x5173;&amp;#x8054;&amp;#x7684;&amp;#x5404;&amp;#x4E2A;&amp;#x5C5E;&amp;#x6027;&amp;#x4E4B;&amp;#x95F4;&amp;#xFF0C;&amp;#x4F9D;&amp;#x8D56;&amp;#x56FE;&amp;#x7684;&amp;#x8FB9;&amp;#x603B;&amp;#x662F;&amp;#x4ECE;&amp;#x5DE6;&amp;#x5230;&amp;#x53F3;&amp;#x3002;&amp;#x4E5F;&amp;#x5C31;&amp;#x662F;&amp;#x8BF4;&amp;#xFF0C;&amp;#x8FD9;&amp;#x4E9B;&amp;#x5C5E;&amp;#x6027;&amp;#x8981;&amp;#x4E48;&amp;#x662F;&amp;#x4E00;&amp;#x4E2A;&amp;#x7EFC;&amp;#x5408;&amp;#x5C5E;&amp;#x6027;&amp;#xFF0C;&amp;#x8981;&amp;#x4E48;&amp;#x662F;&amp;#x7EE7;&amp;#x627F;&amp;#x5C5E;&amp;#x6027;&amp;#x4E14;&amp;#x5176;&amp;#x4F9D;&amp;#x8D56;&amp;#x7684;&amp;#x5C5E;&amp;#x6027;&amp;#x5728;&amp;#x5176;&amp;#x5DE6;&amp;#x8FB9;&amp;#xFF08;&lt;strong&gt;&amp;#x5934;&amp;#x90E8;&amp;#x6216;&amp;#x8005;&amp;#x5DE6;&amp;#x8FB9;&amp;#x7684;&amp;#x5144;&amp;#x5F1F;&amp;#x5C5E;&amp;#x6027;&lt;/strong&gt;&amp;#xFF09;&amp;#x3002;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;#x6765;&amp;#x81EA;&amp;#x5DE6;&amp;#x8FB9;&amp;#x548C;&amp;#x4E0A;&amp;#x9762;&amp;#xFF01;&amp;#xFF01;&amp;#xFF01;&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;3-&amp;#x62BD;&amp;#x8C61;&amp;#x8BED;&amp;#x6CD5;&amp;#x6811;&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-&amp;#x62BD;&amp;#x8C61;&amp;#x8BED;&amp;#x6CD5;&amp;#x6811;&#34;&gt;#&lt;/a&gt; 3 &amp;#x62BD;&amp;#x8C61;&amp;#x8BED;&amp;#x6CD5;&amp;#x6811;&lt;/h2&gt;
&lt;h3 id=&#34;31-&amp;#x62BD;&amp;#x8C61;&amp;#x8BED;&amp;#x6CD5;&amp;#x6811;&amp;#x7684;&amp;#x6784;&amp;#x5EFA;&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#31-&amp;#x62BD;&amp;#x8C61;&amp;#x8BED;&amp;#x6CD5;&amp;#x6811;&amp;#x7684;&amp;#x6784;&amp;#x5EFA;&#34;&gt;#&lt;/a&gt; 3.1 &amp;#x62BD;&amp;#x8C61;&amp;#x8BED;&amp;#x6CD5;&amp;#x6811;&amp;#x7684;&amp;#x6784;&amp;#x5EFA;&lt;/h3&gt;
&lt;p&gt;&amp;#x5C5E;&amp;#x6027;&amp;#x503C;&amp;#x4E0D;&amp;#x5728;&amp;#x662F;&amp;#x7B80;&amp;#x5355;&amp;#x7684;&amp;#x590D;&amp;#x5236;&amp;#x800C;&amp;#x662F;&amp;#x5E26;&amp;#x6709;&amp;#x4E00;&amp;#x5B9A;&amp;#x7684;&amp;#x62BD;&amp;#x8C61;&amp;#x64CD;&amp;#x4F5C;&amp;#xFF08;&amp;#x52A0;&amp;#x51CF;&amp;#x4E58;&amp;#x9664;&amp;#xFF09;&amp;#xFF0C;&amp;#x8282;&amp;#x70B9;&amp;#x5206;&amp;#x4E3A; Leaf &amp;#x8282;&amp;#x70B9;&amp;#x548C; Node &amp;#x8282;&amp;#x70B9;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Leaf &amp;#x8282;&amp;#x70B9;&amp;#xFF1A;&amp;#xFF08;op, val&amp;#xFF09;&lt;/li&gt;
&lt;li&gt;Node &amp;#x8282;&amp;#x70B9;&amp;#xFF1A;&amp;#xFF08;op, c1,c2...&amp;#xFF09;&amp;#xFF08;cn &amp;#x4E3A; node &amp;#x7684;&amp;#x5C5E;&amp;#x6027;&amp;#x503C;&amp;#xFF09;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;32-&amp;#x7C7B;&amp;#x578B;&amp;#x7684;&amp;#x7ED3;&amp;#x6784;&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#32-&amp;#x7C7B;&amp;#x578B;&amp;#x7684;&amp;#x7ED3;&amp;#x6784;&#34;&gt;#&lt;/a&gt; 3.2 &amp;#x7C7B;&amp;#x578B;&amp;#x7684;&amp;#x7ED3;&amp;#x6784;&lt;/h3&gt;
&lt;p&gt;&amp;#x8282;&amp;#x70B9;&amp;#x7684;&amp;#x5C5E;&amp;#x6027;&amp;#x53EF;&amp;#x4EE5;&amp;#x6709;&amp;#x503C; val&amp;#xFF0C;&amp;#x4E5F;&amp;#x53EF;&amp;#x4EE5;&amp;#x6709;&amp;#x7C7B;&amp;#x578B; type&lt;/p&gt;
&lt;h2 id=&#34;4-&amp;#x8BED;&amp;#x6CD5;&amp;#x5236;&amp;#x5BFC;&amp;#x7684;&amp;#x7FFB;&amp;#x8BD1;&amp;#x65B9;&amp;#x6848;sdt&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-&amp;#x8BED;&amp;#x6CD5;&amp;#x5236;&amp;#x5BFC;&amp;#x7684;&amp;#x7FFB;&amp;#x8BD1;&amp;#x65B9;&amp;#x6848;sdt&#34;&gt;#&lt;/a&gt; 4 &amp;#x8BED;&amp;#x6CD5;&amp;#x5236;&amp;#x5BFC;&amp;#x7684;&amp;#x7FFB;&amp;#x8BD1;&amp;#x65B9;&amp;#x6848;&amp;#xFF08;SDT&amp;#xFF09;&lt;/h2&gt;
&lt;p&gt;&amp;#x5B9E;&amp;#x73B0;&amp;#x65B9;&amp;#x6CD5;&amp;#xFF1A;&amp;#x9996;&amp;#x5148;&amp;#x5EFA;&amp;#x7ACB;&amp;#x4E00;&amp;#x9897;&amp;#x8BED;&amp;#x6CD5;&amp;#x5206;&amp;#x6790;&amp;#x6811;&amp;#xFF0C;&amp;#x7136;&amp;#x540E;&amp;#x6309;&amp;#x7167;&amp;#x4ECE;&amp;#x5DE6;&amp;#x5230;&amp;#x53F3;&amp;#x7684;&amp;#x6DF1;&amp;#x5EA6;&amp;#x4F18;&amp;#x5148;&amp;#x987A;&amp;#x5E8F;&amp;#x6765;&amp;#x6267;&amp;#x884C;&amp;#x8FD9;&amp;#x4E9B;&amp;#x52A8;&amp;#x4F5C;&amp;#xFF0C;&amp;#x4E5F;&amp;#x5C31;&amp;#x662F;&amp;#x8BF4;&amp;#x5728;&amp;#x4E00;&amp;#x4E2A;&amp;#x524D;&amp;#x5E8F;&amp;#x904D;&amp;#x5386;&amp;#x8FC7;&amp;#x7A0B;&amp;#x4E2D;&amp;#x6267;&amp;#x884C;&amp;#x3002;&lt;/p&gt;
&lt;p&gt;&amp;#x4E24;&amp;#x7C7B;&amp;#x53EF;&amp;#x7528; SDT &amp;#x5B9E;&amp;#x73B0;&amp;#x7684;&amp;#x91CD;&amp;#x8981;&amp;#x7684; SDD&amp;#xFF1A;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#x57FA;&amp;#x672C;&amp;#x6587;&amp;#x6CD5;&amp;#x53EF;&amp;#x4EE5;&amp;#x7528; LR &amp;#x6280;&amp;#x672F;&amp;#x5206;&amp;#x6790;&amp;#xFF0C;&amp;#x4E14; SDD &amp;#x662F; S &amp;#x5C5E;&amp;#x6027;&amp;#x7684;&amp;#x3002;&lt;/li&gt;
&lt;li&gt;&amp;#x57FA;&amp;#x672C;&amp;#x6587;&amp;#x6CD5;&amp;#x53EF;&amp;#x4EE5;&amp;#x7528; LL &amp;#x6280;&amp;#x672F;&amp;#x5206;&amp;#x6790;&amp;#xFF0C;&amp;#x4E14; SDD &amp;#x662F; L &amp;#x5C5E;&amp;#x6027;&amp;#x7684;&amp;#x3002;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;41-&amp;#x540E;&amp;#x7F00;&amp;#x7FFB;&amp;#x8BD1;&amp;#x65B9;&amp;#x6848;s&amp;#x5C5E;&amp;#x6027;&amp;#x7684;sdt&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#41-&amp;#x540E;&amp;#x7F00;&amp;#x7FFB;&amp;#x8BD1;&amp;#x65B9;&amp;#x6848;s&amp;#x5C5E;&amp;#x6027;&amp;#x7684;sdt&#34;&gt;#&lt;/a&gt; 4.1 &amp;#x540E;&amp;#x7F00;&amp;#x7FFB;&amp;#x8BD1;&amp;#x65B9;&amp;#x6848; (S &amp;#x5C5E;&amp;#x6027;&amp;#x7684; SDT)&lt;/h3&gt;
&lt;p&gt;** &amp;#x57FA;&amp;#x672C;&amp;#x6587;&amp;#x6CD5;&amp;#x53EF;&amp;#x4EE5;&amp;#x7528; LR &amp;#x6280;&amp;#x672F;&amp;#x5206;&amp;#x6790;&amp;#xFF0C;&amp;#x4E14; SDD &amp;#x662F; S &amp;#x5C5E;&amp;#x6027;&amp;#x7684;&amp;#x3002;** &amp;#x7684;&amp;#x60C5;&amp;#x51B5;&amp;#x3002;&lt;/p&gt;
&lt;p&gt;&amp;#x6784;&amp;#x9020;&amp;#x4E00;&amp;#x4E2A;&amp;#x628A;&amp;#x6BCF;&amp;#x4E2A;&amp;#x52A8;&amp;#x4F5C;&amp;#xFF08;&amp;#x4E00;&amp;#x822C;&amp;#x662F;&amp;#x7ED9;&amp;#x4EA7;&amp;#x751F;&amp;#x5F0F;&amp;#x5934;&amp;#x90E8;&amp;#x7684;&amp;#x7EFC;&amp;#x5408;&amp;#x5C5E;&amp;#x6027;&amp;#x8FDB;&amp;#x884C;&amp;#x8D4B;&amp;#x503C;&amp;#xFF09;&amp;#x90FD;&amp;#x653E;&amp;#x5728;&amp;#x4EA7;&amp;#x751F;&amp;#x5F0F;&amp;#x7684;&amp;#x6700;&amp;#x540E;&amp;#xFF0C;&amp;#x5E76;&amp;#x4E14;&amp;#x5728;&amp;#x6309;&amp;#x7167;&amp;#x8FD9;&amp;#x4E2A;&amp;#x4EA7;&amp;#x751F;&amp;#x5F0F;&amp;#x5C06;&amp;#x4EA7;&amp;#x751F;&amp;#x5B9E;&amp;#x4F53;&amp;#x5F52;&amp;#x7EA6;&amp;#x6210;&amp;#x4EA7;&amp;#x751F;&amp;#x5F0F;&amp;#x5934;&amp;#x7684;&amp;#x65F6;&amp;#x5019;&amp;#x6267;&amp;#x884C;&amp;#x8FD9;&amp;#x4E2A;&amp;#x52A8;&amp;#x4F5C;&amp;#x3002;&amp;#x6240;&amp;#x6709;&amp;#x52A8;&amp;#x4F5C;&amp;#x90FD;&amp;#x5728;&amp;#x4EA7;&amp;#x751F;&amp;#x5F0F;&amp;#x7684;&amp;#x6700;&amp;#x53F3;&amp;#x7AEF;&amp;#x7684; SDT &amp;#x79F0;&amp;#x4E3A;&amp;#x540E;&amp;#x7F00;&amp;#x7FFB;&amp;#x8BD1;&amp;#x65B9;&amp;#x6848;&amp;#x3002;&lt;/p&gt;
&lt;h3 id=&#34;42-&amp;#x540E;&amp;#x7F00;sdt&amp;#x7684;&amp;#x8BED;&amp;#x6CD5;&amp;#x5206;&amp;#x6790;&amp;#x6808;&amp;#x7684;&amp;#x5B9E;&amp;#x73B0;&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#42-&amp;#x540E;&amp;#x7F00;sdt&amp;#x7684;&amp;#x8BED;&amp;#x6CD5;&amp;#x5206;&amp;#x6790;&amp;#x6808;&amp;#x7684;&amp;#x5B9E;&amp;#x73B0;&#34;&gt;#&lt;/a&gt; 4.2 &amp;#x540E;&amp;#x7F00; SDT &amp;#x7684;&amp;#x8BED;&amp;#x6CD5;&amp;#x5206;&amp;#x6790;&amp;#x6808;&amp;#x7684;&amp;#x5B9E;&amp;#x73B0;&lt;/h3&gt;
&lt;p&gt;&amp;#x5C06;&amp;#x5C5E;&amp;#x6027;&amp;#x548C;&amp;#x6587;&amp;#x6CD5;&amp;#x7B26;&amp;#x53F7;&amp;#xFF08;&amp;#x6216;&amp;#x8005;&amp;#x6587;&amp;#x6CD5;&amp;#x7B26;&amp;#x53F7;&amp;#x7684; LR &amp;#x72B6;&amp;#x6001;&amp;#xFF09;&amp;#x4E00;&amp;#x8D77;&amp;#x653E;&amp;#x5165;&amp;#x6808;&amp;#x4E2D;&amp;#x7684;&amp;#x8BB0;&amp;#x5F55;&amp;#x91CC;&amp;#x3002;&lt;/p&gt;
&lt;h3 id=&#34;43-&amp;#x4EA7;&amp;#x751F;&amp;#x5F0F;&amp;#x5185;&amp;#x90E8;&amp;#x5E26;&amp;#x6709;&amp;#x8BED;&amp;#x4E49;&amp;#x52A8;&amp;#x4F5C;&amp;#x7684;&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#43-&amp;#x4EA7;&amp;#x751F;&amp;#x5F0F;&amp;#x5185;&amp;#x90E8;&amp;#x5E26;&amp;#x6709;&amp;#x8BED;&amp;#x4E49;&amp;#x52A8;&amp;#x4F5C;&amp;#x7684;&#34;&gt;#&lt;/a&gt; 4.3 &amp;#x4EA7;&amp;#x751F;&amp;#x5F0F;&amp;#x5185;&amp;#x90E8;&amp;#x5E26;&amp;#x6709;&amp;#x8BED;&amp;#x4E49;&amp;#x52A8;&amp;#x4F5C;&amp;#x7684;&lt;/h3&gt;
&lt;p&gt;&amp;#x5F53;&amp;#x4E00;&amp;#x4E2A;&amp;#x52A8;&amp;#x4F5C;&amp;#x5DE6;&amp;#x8FB9;&amp;#x7684;&amp;#x6240;&amp;#x6709;&amp;#x7B26;&amp;#x53F7;&amp;#x90FD;&amp;#x88AB;&amp;#x5904;&amp;#x7406;&amp;#xFF08;&amp;#x6216;&amp;#x8005;&amp;#x8BF4;&amp;#x4E0D;&amp;#x53EF;&amp;#x5F52;&amp;#x7EA6;&amp;#x540E;&amp;#xFF09;&amp;#xFF0C;&amp;#x8BE5;&amp;#x52A8;&amp;#x4F5C;&amp;#x7ACB;&amp;#x5373;&amp;#x6267;&amp;#x884C;&amp;#x3002;&lt;/p&gt;
&lt;p&gt;&amp;#x4EFB;&amp;#x4F55; SDT &amp;#x90FD;&amp;#x53EF;&amp;#x4EE5;&amp;#x901A;&amp;#x8FC7;&amp;#x4E0B;&amp;#x5217;&amp;#x65B9;&amp;#x6CD5;&amp;#x5B9E;&amp;#x73B0;&amp;#xFF1A;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#x5FFD;&amp;#x7565;&amp;#x8BED;&amp;#x4E49;&amp;#x52A8;&amp;#x4F5C;&amp;#xFF0C;&amp;#x5BF9;&amp;#x8F93;&amp;#x5165;&amp;#x8FDB;&amp;#x884C;&amp;#x590D;&amp;#x53D1;&amp;#x5206;&amp;#x6790;&amp;#xFF0C;&amp;#x5E76;&amp;#x4EA7;&amp;#x751F;&amp;#x4E00;&amp;#x4E2A;&amp;#x8BED;&amp;#x6CD5;&amp;#x5206;&amp;#x6790;&amp;#x6811;&amp;#x3002;&lt;/li&gt;
&lt;li&gt;&amp;#x7136;&amp;#x540E;&amp;#x68C0;&amp;#x67E5;&amp;#x6BCF;&amp;#x4E2A;&amp;#x5185;&amp;#x90E8;&amp;#x8282;&amp;#x70B9; N&amp;#xFF0C;&amp;#x5047;&amp;#x8BBE;&amp;#x5979;&amp;#x7684;&amp;#x4EA7;&amp;#x751F;&amp;#x5F0F;&amp;#x662F; A-&amp;gt;a&amp;#x3002;&amp;#x5C06; a &amp;#x4E2D;&amp;#x7684;&amp;#x5404;&amp;#x4E2A;&amp;#x52A8;&amp;#x4F5C;&amp;#x5F53;&amp;#x4F5C; N &amp;#x7684;&amp;#x9644;&amp;#x52A0;&amp;#x5B50;&amp;#x8282;&amp;#x70B9;&amp;#x52A0;&amp;#x5165;&amp;#xFF0C;&amp;#x4F7F;&amp;#x5F97; N &amp;#x7684;&amp;#x5B50;&amp;#x8282;&amp;#x70B9;&amp;#x4ECE;&amp;#x5DE6;&amp;#x5230;&amp;#x53F3;&amp;#x548C; a &amp;#x4E2D;&amp;#x7684;&amp;#x7B26;&amp;#x53F7;&amp;#x53CA;&amp;#x52A8;&amp;#x4F5C;&amp;#x5B8C;&amp;#x5168;&amp;#x4E00;&amp;#x81F4;&amp;#x3002;&lt;/li&gt;
&lt;li&gt;&amp;#x5BF9;&amp;#x8FD9;&amp;#x9897;&amp;#x8BED;&amp;#x6CD5;&amp;#x6811;&amp;#x8FDB;&amp;#x884C;&amp;#x524D;&amp;#x5E8F;&amp;#x904D;&amp;#x5386;&amp;#xFF0C;&amp;#x5E76;&amp;#x4E14;&amp;#x5F53;&amp;#x8BBF;&amp;#x95EE;&amp;#x5230;&amp;#x4E00;&amp;#x4E2A;&amp;#x4EE5;&amp;#x67D0;&amp;#x4E2A;&amp;#x52A8;&amp;#x4F5C;&amp;#x4E3A;&amp;#x6807;&amp;#x53F7;&amp;#x7684;&amp;#x8282;&amp;#x70B9;&amp;#x65F6;&amp;#x7ACB;&amp;#x5373;&amp;#x6267;&amp;#x884C;&amp;#x8FD9;&amp;#x4E2A;&amp;#x52A8;&amp;#x4F5C;&amp;#x3002;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;44-&amp;#x4ECE;sdt&amp;#x4E2D;&amp;#x6D88;&amp;#x9664;&amp;#x5DE6;&amp;#x9012;&amp;#x5F52;&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#44-&amp;#x4ECE;sdt&amp;#x4E2D;&amp;#x6D88;&amp;#x9664;&amp;#x5DE6;&amp;#x9012;&amp;#x5F52;&#34;&gt;#&lt;/a&gt; 4.4 &amp;#x4ECE; SDT &amp;#x4E2D;&amp;#x6D88;&amp;#x9664;&amp;#x5DE6;&amp;#x9012;&amp;#x5F52;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;A-&amp;gt;Aa|b&lt;/strong&gt;  =&amp;gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A-&amp;gt;A&amp;apos;|R&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;R-&amp;gt;aR|a&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;45-l&amp;#x5C5E;&amp;#x6027;&amp;#x5B9A;&amp;#x4E49;&amp;#x7684;sdt&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#45-l&amp;#x5C5E;&amp;#x6027;&amp;#x5B9A;&amp;#x4E49;&amp;#x7684;sdt&#34;&gt;#&lt;/a&gt; 4.5 L &amp;#x5C5E;&amp;#x6027;&amp;#x5B9A;&amp;#x4E49;&amp;#x7684; SDT&lt;/h3&gt;
&lt;p&gt;&amp;#x5C06;&amp;#x4E00;&amp;#x4E2A; L &amp;#x5C5E;&amp;#x6027;&amp;#x7684; SDD &amp;#x8F6C;&amp;#x6362;&amp;#x4E3A;&amp;#x4E00;&amp;#x4E2A; SDT &amp;#x7684;&amp;#x89C4;&amp;#x5219;&amp;#x5982;&amp;#x4E0B;&amp;#xFF1A;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&amp;#x628A;&amp;#x8BA1;&amp;#x7B97;&amp;#x67D0;&amp;#x4E2A;&amp;#x975E;&amp;#x7EC8;&amp;#x7ED3;&amp;#x7B26;&amp;#x53F7; A &amp;#x7684;&amp;#x7EE7;&amp;#x627F;&amp;#x5C5E;&amp;#x6027;&amp;#x7684;&amp;#x52A8;&amp;#x4F5C;&amp;#x63D2;&amp;#x5165;&amp;#x5230;&amp;#x4EA7;&amp;#x751F;&amp;#x5F0F;&amp;#x4E2D;&amp;#x7D27;&amp;#x9760; A &amp;#x7684;&amp;#x5DE6;&amp;#x8FB9;&amp;#x3002;&amp;#x5982;&amp;#x679C; A &amp;#x7684;&amp;#x591A;&amp;#x4E2A;&amp;#x7EE7;&amp;#x627F;&amp;#x5C5E;&amp;#x6027;&amp;#x4EE5;&amp;#x4E94;&amp;#x73AF;&amp;#x7684;&amp;#x5F62;&amp;#x5F0F;&amp;#x76F8;&amp;#x4E92;&amp;#x4F9D;&amp;#x8D56;&amp;#xFF0C;&amp;#x9700;&amp;#x8981;&amp;#x5BF9;&amp;#x8FD9;&amp;#x4E9B;&amp;#x5C5E;&amp;#x6027;&amp;#x7684;&amp;#x6C42;&amp;#x804C;&amp;#x52A8;&amp;#x4F5C;&amp;#x8FDB;&amp;#x884C;&amp;#x62D3;&amp;#x8865;&amp;#x6392;&amp;#x5E8F;&amp;#xFF0C;&amp;#x4EE5;&amp;#x8BA1;&amp;#x7B97;&amp;#x9700;&amp;#x8981;&amp;#x7684;&amp;#x7EE7;&amp;#x627F;&amp;#x5C5E;&amp;#x6027;&amp;#x3002;&lt;/li&gt;
&lt;li&gt;&amp;#x5C06;&amp;#x8BA1;&amp;#x7B97;&amp;#x4E00;&amp;#x4E2A;&amp;#x4EA7;&amp;#x751F;&amp;#x5F0F;&amp;#x5934;&amp;#x7684;&amp;#x7EFC;&amp;#x5408;&amp;#x5C5E;&amp;#x6027;&amp;#x653E;&amp;#x5728;&amp;#x6700;&amp;#x540E;&amp;#x3002;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;5-&amp;#x5B9E;&amp;#x73B0;l&amp;#x5C5E;&amp;#x6027;&amp;#x7684;sdd&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-&amp;#x5B9E;&amp;#x73B0;l&amp;#x5C5E;&amp;#x6027;&amp;#x7684;sdd&#34;&gt;#&lt;/a&gt; 5 &amp;#x5B9E;&amp;#x73B0; L &amp;#x5C5E;&amp;#x6027;&amp;#x7684; SDD&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&amp;#x5EFA;&amp;#x7ACB;&amp;#x8BED;&amp;#x6CD5;&amp;#x5206;&amp;#x6790;&amp;#x6811;&amp;#x5E76;&amp;#x6CE8;&amp;#x91CA;&lt;/li&gt;
&lt;li&gt;&amp;#x6784;&amp;#x9020;&amp;#x8BED;&amp;#x6CD5;&amp;#x5206;&amp;#x6790;&amp;#x6811;&lt;/li&gt;
&lt;li&gt;&amp;#x4F7F;&amp;#x7528;&amp;#x4E00;&amp;#x4E2A;&amp;#x9012;&amp;#x5F52;&amp;#x4E0B;&amp;#x964D;&amp;#x7684;&amp;#x8BED;&amp;#x6CD5;&amp;#x5206;&amp;#x6790;&amp;#x5668;&amp;#xFF0C;&amp;#x4E3A;&amp;#x6BCF;&amp;#x4E2A;&amp;#x975E;&amp;#x7EC8;&amp;#x7ED3;&amp;#x7B26;&amp;#x53F7;&amp;#x5EFA;&amp;#x7ACB;&amp;#x4E00;&amp;#x4E2A;&amp;#x51FD;&amp;#x6570;&lt;/li&gt;
&lt;li&gt;&amp;#x4F7F;&amp;#x7528;&amp;#x4E00;&amp;#x4E2A;&amp;#x9012;&amp;#x5F52;&amp;#x4E0B;&amp;#x964D;&amp;#x7684;&amp;#x8BED;&amp;#x6CD5;&amp;#x5206;&amp;#x6790;&amp;#x5668;&amp;#xFF0C;&amp;#x4EE5;&amp;#x8FB9;&amp;#x626B;&amp;#x63CF;&amp;#x751F;&amp;#x6210;&amp;#x7684;&amp;#x65B9;&amp;#x5F0F;&amp;#x4EE3;&amp;#x7801;&lt;/li&gt;
&lt;li&gt;&amp;#x4E0E; LL &amp;#x8BED;&amp;#x6CD5;&amp;#x5206;&amp;#x6790;&amp;#x5668;&amp;#x7ED3;&amp;#x5408;&amp;#x751F;&amp;#x6210; SDT&lt;/li&gt;
&lt;li&gt;&amp;#x4E0E; LR &amp;#x8BED;&amp;#x6CD5;&amp;#x5206;&amp;#x6790;&amp;#x5668;&amp;#x7ED3;&amp;#x5408;&amp;#x751F;&amp;#x6210; SDT&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;51-&amp;#x5728;&amp;#x9012;&amp;#x5F52;&amp;#x4E0B;&amp;#x964D;&amp;#x7684;&amp;#x8BED;&amp;#x6CD5;&amp;#x5206;&amp;#x6790;&amp;#x8FC7;&amp;#x7A0B;&amp;#x4E2D;&amp;#x8FDB;&amp;#x884C;&amp;#x7FFB;&amp;#x8BD1;&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#51-&amp;#x5728;&amp;#x9012;&amp;#x5F52;&amp;#x4E0B;&amp;#x964D;&amp;#x7684;&amp;#x8BED;&amp;#x6CD5;&amp;#x5206;&amp;#x6790;&amp;#x8FC7;&amp;#x7A0B;&amp;#x4E2D;&amp;#x8FDB;&amp;#x884C;&amp;#x7FFB;&amp;#x8BD1;&#34;&gt;#&lt;/a&gt; 5.1 &amp;#x5728;&amp;#x9012;&amp;#x5F52;&amp;#x4E0B;&amp;#x964D;&amp;#x7684;&amp;#x8BED;&amp;#x6CD5;&amp;#x5206;&amp;#x6790;&amp;#x8FC7;&amp;#x7A0B;&amp;#x4E2D;&amp;#x8FDB;&amp;#x884C;&amp;#x7FFB;&amp;#x8BD1;&lt;/h3&gt;
&lt;p&gt;&amp;#x4E00;&amp;#x4E2A;&amp;#x9012;&amp;#x5F52;&amp;#x4E0B;&amp;#x964D;&amp;#x7684;&amp;#x8BED;&amp;#x6CD5;&amp;#x5206;&amp;#x6790;&amp;#x5668;&amp;#x5BF9;&amp;#x6BCF;&amp;#x4E2A;&amp;#x975E;&amp;#x7EC8;&amp;#x7ED3;&amp;#x7B26;&amp;#x53F7; A &amp;#x90FD;&amp;#x6709;&amp;#x4E00;&amp;#x4E2A;&amp;#x51FD;&amp;#x6570; A&amp;#x3002;&amp;#x6211;&amp;#x4EEC;&amp;#x53EF;&amp;#x4EE5;&amp;#x6309;&amp;#x7167;&amp;#x5982;&amp;#x4E0B;&amp;#x65B9;&amp;#x6CD5;&amp;#x628A;&amp;#x8FD9;&amp;#x4E2A;&amp;#x8BED;&amp;#x6CD5;&amp;#x5206;&amp;#x6790;&amp;#x5668;&amp;#x6269;&amp;#x5C55;&amp;#x4E3A;&amp;#x4E00;&amp;#x4E2A;&amp;#x7FFB;&amp;#x8BD1;&amp;#x5668;&amp;#xFF1A;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&amp;#x51FD;&amp;#x6570; A &amp;#x7684;&amp;#x53C2;&amp;#x6570;&amp;#x662F;&amp;#x975E;&amp;#x7EC8;&amp;#x7ED3;&amp;#x7B26; A &amp;#x7684;&amp;#x7EE7;&amp;#x627F;&amp;#x5C5E;&amp;#x6027;&lt;/li&gt;
&lt;li&gt;A &amp;#x7684;&amp;#x8FD4;&amp;#x56DE;&amp;#x503C;&amp;#x662F;&amp;#x975E;&amp;#x7EC8;&amp;#x7ED3;&amp;#x7B26; A &amp;#x7684;&amp;#x7EFC;&amp;#x5408;&amp;#x5C5E;&amp;#x6027;&amp;#x7684;&amp;#x96C6;&amp;#x5408;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;52-&amp;#x8FB9;&amp;#x626B;&amp;#x63CF;&amp;#x8FB9;&amp;#x751F;&amp;#x6210;&amp;#x4EE3;&amp;#x7801;&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#52-&amp;#x8FB9;&amp;#x626B;&amp;#x63CF;&amp;#x8FB9;&amp;#x751F;&amp;#x6210;&amp;#x4EE3;&amp;#x7801;&#34;&gt;#&lt;/a&gt; 5.2 &amp;#x8FB9;&amp;#x626B;&amp;#x63CF;&amp;#x8FB9;&amp;#x751F;&amp;#x6210;&amp;#x4EE3;&amp;#x7801;&lt;/h3&gt;
&lt;p&gt;TODO&amp;#xFF1A;&amp;#x6CA1;&amp;#x770B;&amp;#x61C2;&amp;#x3001;&amp;#x770B;&amp;#x770B;&amp;#x535A;&amp;#x5BA2;&lt;/p&gt;
&lt;h3 id=&#34;53-l&amp;#x5C5E;&amp;#x6027;&amp;#x7684;sdd&amp;#x548C;ll&amp;#x8BED;&amp;#x6CD5;&amp;#x5206;&amp;#x6790;&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#53-l&amp;#x5C5E;&amp;#x6027;&amp;#x7684;sdd&amp;#x548C;ll&amp;#x8BED;&amp;#x6CD5;&amp;#x5206;&amp;#x6790;&#34;&gt;#&lt;/a&gt; 5.3 L &amp;#x5C5E;&amp;#x6027;&amp;#x7684; SDD &amp;#x548C; LL &amp;#x8BED;&amp;#x6CD5;&amp;#x5206;&amp;#x6790;&lt;/h3&gt;
&lt;p&gt;&amp;#x5728;&amp;#x6839;&amp;#x636E; SDT &amp;#x8FDB;&amp;#x884C; LL &amp;#x8BED;&amp;#x6CD5;&amp;#x5206;&amp;#x6790;&amp;#x8FC7;&amp;#x7A0B;&amp;#x4E2D;&amp;#xFF0C;&amp;#x9700;&amp;#x8981;&amp;#x5BF9;&amp;#x8BED;&amp;#x6CD5;&amp;#x5206;&amp;#x6790;&amp;#x6808;&amp;#x8FDB;&amp;#x884C;&amp;#x6269;&amp;#x5C55;&amp;#xFF0C;&amp;#x4EE5;&amp;#x5B58;&amp;#x653E;&amp;#x8BED;&amp;#x4E49;&amp;#x52A8;&amp;#x4F5C;&amp;#x548C;&amp;#x5C5E;&amp;#x6027;&amp;#x6C42;&amp;#x503C;&amp;#x6240;&amp;#x9700;&amp;#x8981;&amp;#x7684;&amp;#x67D0;&amp;#x4E9B;&amp;#x6570;&amp;#x636E;&amp;#x9879;&amp;#xFF0C;&amp;#x4E00;&amp;#x822C;&amp;#x662F;&amp;#x67D0;&amp;#x4E9B;&amp;#x5C5E;&amp;#x6027;&amp;#x503C;&amp;#x7684;&amp;#x62F7;&amp;#x8D1D;&amp;#x3002;&lt;/p&gt;
&lt;p&gt;&amp;#x5206;&amp;#x522B;&amp;#x662F;&amp;#x52A8;&amp;#x4F5C;&amp;#x8BB0;&amp;#x5F55;&amp;#x548C;&amp;#x7EFC;&amp;#x5408;&amp;#x8BB0;&amp;#x5F55;&amp;#xFF1A;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#x52A8;&amp;#x4F5C;&amp;#x8BB0;&amp;#x5F55;&amp;#xFF1A;&amp;#x5373;&amp;#x5C06;&amp;#x88AB;&amp;#x6267;&amp;#x884C;&amp;#x7684;&amp;#x8BED;&amp;#x4E49;&amp;#x52A8;&amp;#x4F5C;&lt;/li&gt;
&lt;li&gt;&amp;#x7EFC;&amp;#x5408;&amp;#x8BB0;&amp;#x5F55;&amp;#xFF1A;&amp;#x4FDD;&amp;#x5B58;&amp;#x975E;&amp;#x7EC8;&amp;#x7ED3;&amp;#x7B26;&amp;#x53F7;&amp;#x7684;&amp;#x7EFC;&amp;#x5408;&amp;#x5C5E;&amp;#x6027;&amp;#x503C;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;#x90A3;&amp;#x4E48;&amp;#x8BE5;&amp;#x5982;&amp;#x4F55;&amp;#x7BA1;&amp;#x7406;&amp;#x6808;&amp;#x4E2D;&amp;#x7684;&amp;#x5C5E;&amp;#x6027;&amp;#xFF0C;&amp;#x5728;&amp;#x4EC0;&amp;#x4E48;&amp;#x65F6;&amp;#x5019;&amp;#x5982;&amp;#x4F55;&amp;#x63A8;&amp;#x5165;&amp;#x9000;&amp;#x51FA;&amp;#x6808;&amp;#x5462;&amp;#xFF1F;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#x975E;&amp;#x7EC8;&amp;#x7ED3;&amp;#x7B26;&amp;#x53F7; A &amp;#x7684;&amp;#x7EE7;&amp;#x627F;&amp;#x5C5E;&amp;#x6027;&amp;#x653E;&amp;#x5728;&amp;#x8868;&amp;#x793A;&amp;#x8FD9;&amp;#x4E2A;&amp;#x7B26;&amp;#x53F7;&amp;#x7684;&amp;#x6808;&amp;#x8BB0;&amp;#x5F55;&amp;#x4E2D;&amp;#xFF1B;&lt;/li&gt;
&lt;li&gt;&amp;#x975E;&amp;#x7EC8;&amp;#x7ED3;&amp;#x7B26;&amp;#x53F7; A &amp;#x7684;&amp;#x7EFC;&amp;#x5408;&amp;#x5C5E;&amp;#x6027;&amp;#x653E;&amp;#x5728;&amp;#x4E00;&amp;#x4E2A;&amp;#x5355;&amp;#x72EC;&amp;#x7684;&amp;#x7EFC;&amp;#x5408;&amp;#x8BB0;&amp;#x5F55;&amp;#x4E2D;&amp;#xFF0C;&amp;#x4ED6;&amp;#x5728;&amp;#x6808;&amp;#x4E2D;&amp;#x7D27;&amp;#x9760;&amp;#x5728; A &amp;#x7684;&amp;#x8BB0;&amp;#x5F55;&amp;#x4E0B;&amp;#x3002;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;LL &amp;#x8BED;&amp;#x6CD5;&amp;#x5206;&amp;#x6790;&lt;/strong&gt;&amp;#xFF08;&amp;#x4F55;&amp;#x65F6;&amp;#x9700;&amp;#x8981;&amp;#x5EFA;&amp;#x7ACB;&amp;#x5C5E;&amp;#x6027;&amp;#x7684;&amp;#x4E34;&amp;#x65F6;&amp;#x62F7;&amp;#x8D1D;&amp;#xFF09;&lt;/p&gt;
&lt;h3 id=&#34;54-l&amp;#x5C5E;&amp;#x6027;&amp;#x7684;sdd&amp;#x7684;&amp;#x81EA;&amp;#x5E95;&amp;#x5411;&amp;#x4E0A;&amp;#x8BED;&amp;#x6CD5;&amp;#x5206;&amp;#x6790;&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#54-l&amp;#x5C5E;&amp;#x6027;&amp;#x7684;sdd&amp;#x7684;&amp;#x81EA;&amp;#x5E95;&amp;#x5411;&amp;#x4E0A;&amp;#x8BED;&amp;#x6CD5;&amp;#x5206;&amp;#x6790;&#34;&gt;#&lt;/a&gt; 5.4 L &amp;#x5C5E;&amp;#x6027;&amp;#x7684; SDD &amp;#x7684;&amp;#x81EA;&amp;#x5E95;&amp;#x5411;&amp;#x4E0A;&amp;#x8BED;&amp;#x6CD5;&amp;#x5206;&amp;#x6790;&lt;/h3&gt;
&lt;p&gt;&amp;#x65B9;&amp;#x6CD5;&amp;#xFF1A;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&amp;#x5B9A;&amp;#x4E49; L &amp;#x5C5E;&amp;#x6027;&amp;#x7684; SDT &amp;#x4E3A;&amp;#x8D77;&amp;#x70B9;&amp;#x3002;&lt;/li&gt;
&lt;li&gt;&amp;#x5BF9;&amp;#x6BCF;&amp;#x4E2A;&amp;#x5185;&amp;#x5D4C;&amp;#x7684;&amp;#x8BED;&amp;#x4E49;&amp;#x52A8;&amp;#x4F5C;&amp;#x5728;&amp;#x6587;&amp;#x6CD5;&amp;#x4E2D;&amp;#x5F15;&amp;#x5165;&amp;#x4E00;&amp;#x4E2A;&amp;#x6807;&amp;#x8BB0;&amp;#x975E;&amp;#x7EC8;&amp;#x7ED3;&amp;#x7B26; M &amp;#x6765;&amp;#x66FF;&amp;#x6362;&amp;#x5B83;&amp;#xFF0C;M-&amp;gt;E&amp;#x3002;&lt;/li&gt;
&lt;li&gt;&amp;#x5982;&amp;#x679C;&amp;#x66FF;&amp;#x6362;&amp;#x4E86;&amp;#x88AB;&amp;#x6807;&amp;#x8BB0;&amp;#x4E3A; M &amp;#x7684;&amp;#x8BED;&amp;#x4E49;&amp;#x52A8;&amp;#x4F5C; a &amp;#x4E3A; a&amp;#x2019;&amp;#xFF0C;&amp;#x8FD9;&amp;#x4E2A; a&amp;#x2019;&amp;#x5C06;&amp;#x52A8;&amp;#x4F5C; a &amp;#x9700;&amp;#x8981;&amp;#x7684; A &amp;#x6216; a &amp;#x4E2D;&amp;#x7684;&amp;#x6240;&amp;#x6709;&amp;#x7B26;&amp;#x53F7;&amp;#x7684;&amp;#x4EFB;&amp;#x4F55;&amp;#x5C5E;&amp;#x6027;&amp;#x4F5C;&amp;#x4E3A; M &amp;#x7684;&amp;#x7EE7;&amp;#x627F;&amp;#x5C5E;&amp;#x6027;&amp;#x8FDB;&amp;#x884C;&amp;#x62F7;&amp;#x8D1D;&amp;#xFF1B;&amp;#x6309;&amp;#x7167; a &amp;#x4E2D;&amp;#x7684;&amp;#x65B9;&amp;#x6CD5;&amp;#x8BA1;&amp;#x7B97;&amp;#x5404;&amp;#x4E2A;&amp;#x5C5E;&amp;#x6027;&amp;#xFF0C;&amp;#x5C06;&amp;#x8FD9;&amp;#x4E9B;&amp;#x5C5E;&amp;#x6027;&amp;#x4F5C;&amp;#x4E3A; M &amp;#x7684;&amp;#x7EFC;&amp;#x5408;&amp;#x5C5E;&amp;#x6027;&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="编译原理" />
        <updated>2024-06-02T02:48:31.000Z</updated>
    </entry>
</feed>
