{
    "version": "https://jsonfeed.org/version/1",
    "title": "Hexo • All posts by \"编译原理\" tag",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2024/06/23/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86-Bottom-Up-Paring/",
            "url": "http://example.com/2024/06/23/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86-Bottom-Up-Paring/",
            "title": "编译原理--Bottom-Up Paring",
            "date_published": "2024-06-22T17:16:46.000Z",
            "content_html": "<h2 id=\"1-right-sentential-form\"><a class=\"anchor\" href=\"#1-right-sentential-form\">#</a> 1 Right sentential form</h2>\n<p>最右句型，最右推导产生的句型称为最右句型，最右句型中，句柄的右边一定是终结符</p>\n<h2 id=\"2-handle\"><a class=\"anchor\" href=\"#2-handle\">#</a> 2 Handle</h2>\n<p><strong>reduction 归约：把一个与某产生式的右部相匹配的子串替换成产生式头部的非终结符的过程</strong></p>\n<p><strong>handle 句柄：和某个产生式体匹配的子串，对它归约体现了相应的最右推导</strong>，但不是所有的和产生式体匹配的子串都是句柄，必须对他归约体现最右推导才行。</p>\n<h2 id=\"3-viable-prefix\"><a class=\"anchor\" href=\"#3-viable-prefix\">#</a> 3 Viable prefix</h2>\n<p>可以出现在一个移入 - 归约 语法分析器的栈中的最右句型前缀被称为可行前缀。定义：可行前缀是一个最右句型的前缀，并且没有越过最右句型的最右句柄的右端，所以可以通过向可行前缀的右边添加某些终止符得到最右句型。</p>\n<h2 id=\"4-items-and-states\"><a class=\"anchor\" href=\"#4-items-and-states\">#</a> 4 items and states</h2>\n<p>state 表明我们在语法分析的过程中所处的位置，state 是 item 的集合。增广文法，为了把开始 symbol 也加入分析过程而设计的文法，G 的增广文法 G‘就是在 G 中加上新开始符号 S' 和产生式 S’-&gt;S 而得到的文法。</p>\n<p>项集的闭包 CLOSURE（I）的求法：</p>\n<ol>\n<li>把 I 中的各项加入到 CLOSURE（I）中</li>\n<li>如果 A-&gt;a・Bb 在 CLOSURE（I）中，B-&gt;y 是产生式，并且 B-&gt;・y 不属于闭包中，则添加，一直重复这个过程</li>\n</ol>\n<p>GOTO（I，X），I 是项集，X 是文法符号，移动项集中的产生式的点，如果右边是 X，移动到 X 的后面。并将产生变化是项集中成新的项集 I'</p>\n<p>Dfa of LR（0）items 的求法；</p>\n<ol>\n<li>求 I0 的闭包，I0 初始化为增广文法，闭包作为新的 I0；</li>\n<li>确定 I0 的 GOTO，移动・形成新的项集，求项集的闭包作为新的 Ii，Ij；</li>\n<li>重复步骤二知道没有新的状态产生已经状态之间的 GOTO 关系全部阐明</li>\n</ol>\n<h2 id=\"5-shiftreducelrparsing\"><a class=\"anchor\" href=\"#5-shiftreducelrparsing\">#</a> 5 shift/reduce（LR）parsing</h2>\n<p>移入归约分析，设立一个栈用来保存信息，每一步决定将输入移入或者将栈顶归约，直到得到增广文法符号。</p>\n<h2 id=\"6-lr0parsing\"><a class=\"anchor\" href=\"#6-lr0parsing\">#</a> 6 LR（0）parsing</h2>\n<p>LR 语法分析器<br>\n<img data-src=\"LR%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8.png\" alt=\"LR语法分析器\"><br>\n当前输入符号 ai 和栈顶状态 sm，查询 ACTION【sm，ai】了解要执行什么动作。如果是移入就把下一个状态 s 移入，更新输入符号；如果是归约就执行归约动作，先将符号进行归约，然后把栈顶的状态弹出，根据归约后的文法符号查询当前栈顶的 GOTO 函数，把 GOTO 函指向的状态推入栈中；如果是接受则结束分析；如果是报错就报错。</p>\n<p><strong>LR 语法分析算法，需要 parsing table，构建 parsing 的过程：需要知道所有非终结符的 FollowSet</strong></p>\n<ol>\n<li i0，i1，...，in>构造 G' 的规范 LR（0）项集族</li>\n<li>根据 I 构造状态 i，确定状态 i 的语法动作\n<ol>\n<li>GOTO（Ii，a）=Ij，且 Ii 中有・位于 a 前的项，将 ACTION【Ii，a】设为移入 Ij</li>\n<li>A 产生式的体的・位于最后，将 FOLLOW（A）中的所有 a，设置 ACTION【Ii，a】为归约 A-&gt;a</li>\n<li>S’-&gt;S・，设置 $ 为 scc</li>\n</ol>\n</li>\n<li>对于非终止符的 GOTO，设置 GOTO 表项</li>\n<li>所有未填的项为 error</li>\n</ol>\n<p>可以先构造 LR 自动机，方便计算各个表项</p>\n<h2 id=\"7-slr1parsing\"><a class=\"anchor\" href=\"#7-slr1parsing\">#</a> 7 SLR（1）parsing</h2>\n",
            "tags": [
                "编译原理"
            ]
        },
        {
            "id": "http://example.com/2024/06/22/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86-Top-Down-Parsing/",
            "url": "http://example.com/2024/06/22/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86-Top-Down-Parsing/",
            "title": "编译原理--Top-Down Parsing",
            "date_published": "2024-06-22T10:31:09.000Z",
            "content_html": "<p><strong>Top-Down Parsing:</strong><br>\n 从开始符号开始，尝试猜测要应用于最终用户程序的产生式。<br>\n<strong>Bottom-Up Parsing</strong><br>\n 从用户程序开始，尝试反向应用产生式，将程序转换回起始符号</p>\n<h2 id=\"1-what-is-the-predictive-parsing\"><a class=\"anchor\" href=\"#1-what-is-the-predictive-parsing\">#</a> 1 what is the predictive parsing?</h2>\n<p>以剩余的输入为基础，猜测哪一个产生式被使用。利用 lookahead tokens 来预测下一个产生式。</p>\n<p>predictive parsing 的条件：</p>\n<ul>\n<li>Top-Down Parsing，从文法的开始标记开始</li>\n<li>可以根据现有的输入 token 决定一个具体的下一步的产生式，就可以预测</li>\n<li>predictive parsing 接受 LL（k）文法</li>\n</ul>\n<h2 id=\"2-ll1-grammar\"><a class=\"anchor\" href=\"#2-ll1-grammar\">#</a> 2 LL(1) grammar</h2>\n<p>LL（1）：</p>\n<ul>\n<li>L：从左到右去 scan 输入</li>\n<li>L：最左推导</li>\n<li>1：需要最多 1 个 look ahead token 来预测</li>\n</ul>\n<p>如何判断一个文法是否为 LL（1）文法？</p>\n<ul>\n<li>对于所有的相同左部的产生式当中，产生式的右部的 first set 不相交</li>\n<li>对于所有的 first set 中包含 e 的非终止符 A，first（A）和 follow（A）的交集不相交</li>\n</ul>\n<p>满足上面两个条件的为 LL（1）无关文法</p>\n<p>验证 LL（1）无关文法时，只用会 A=&gt;*e 的非终止符才需要求 Follow set 来验证</p>\n<h2 id=\"3-first-set-and-follow-set\"><a class=\"anchor\" href=\"#3-first-set-and-follow-set\">#</a> 3 First set and Follow set</h2>\n<p>非常重要，判断一个文法是不是 LL（1）文法的基础！</p>\n<p><strong>First set</strong>：</p>\n<ul>\n<li>define：G=(VN, VT, P, S) is a grammar, b=(VN U VT)* ，FIRST(b) = { a ∊ VT | b =&gt; * a......} if b =&gt; * ε then ε ∊ FIRST(b)</li>\n</ul>\n<p>讲人话就是 string b 的 first set 就是可以被 b 推导的排在第一个终止符的集合</p>\n<p><strong>计算 First（A）的算法！！！：</strong></p>\n<ol>\n<li>终止符的 first 集合是它本身</li>\n<li>for all A∈ VN ,if A =&gt; *ε, then First(A)={ε} else  First(A)={ } ;</li>\n<li>For each production A→X1…Xj…Xn, First(A)=First(A) U SectionFirst(X1…Xj…Xn);</li>\n<li>一直重复 3，直到 A 的 first 集合没有变化</li>\n</ol>\n<p>SectionFirst(X1…Xj…Xn) = (First(X1)-{e})U(First(X2)-{e})U...U(First(Xj+1))</p>\n<p>Xj+1 是第一个不是 nullable 的 symbol，即不能推导到 e</p>\n<ul>\n<li>if X1 is not nullable, then SectionFirst(X1…Xj…Xn) =First(X1)</li>\n<li>if X1 is nullable, then SectionFirst(X1…Xj…Xn) =First(X1) -{ε}, and continue to see X2. Stop untill is not nullable .</li>\n<li ε>if X1…Xn are all nullable, then SectionFirst(X1…Xn)= (First(X1) -{ε}) (First(X2)-{ε})U… U(First(Xn) -{ε}) ∪</li>\n</ul>\n<p><strong>Follow sets</strong></p>\n<ul>\n<li>definition：G=(VT, VN, S,P) is a grammar，A∈VN ，FOLLOW(A)={a ∊ VT | S =&gt; *…Aa…}，if S =&gt; *  …A, then $ ∊ FOLLOW(A)</li>\n</ul>\n<p>直观上，非终结符 A 的跟随集合是该语法的所有句型中 A 之后的终结符（包括 $）的集合。</p>\n<p>如何预测，如果当前输入存在于某个产生式右部的 first sets 中，选择这个产生式，存在于某个产生式左部的非终止符的 follow sets 中，选择这个产生式</p>\n<p><strong>Follow (A) 的算法</strong></p>\n<ol>\n<li>S is the start symbol, Follow(S)={$};for all A∊VN, and A≠S,Follow(A)={ };</li>\n<li>For each production B→αAγ, for each A that is a nonterminal do\n<ul>\n<li>Follow(A)=Follow(A)U(First(γ) -{ε})</li>\n<li><strong>if ε ∈ First(γ) then add Follow(B) to Follow(A)</strong></li>\n<li>如果 A 位于产生式体的最后，add Follow (B) to Follow (A)</li>\n</ul>\n</li>\n<li>Repeat 2,until there is no change to any follow set</li>\n</ol>\n<h2 id=\"4-recursive-descent-parsing递归下降解析\"><a class=\"anchor\" href=\"#4-recursive-descent-parsing递归下降解析\">#</a> 4 Recursive-descent parsing 递归下降解析</h2>\n<p>从一个开始 symbol 的产生式开始，为每个非终结符 A 定义一个能够识别 A 的 procedures，A 语法规则的右侧指定了该过程的代码结构。terminals 表示匹配输入，nonterminals 表示调用其他的 procedures，choices 表示 alternatives (case or if statement) within the code</p>\n<p>递归下降解析的过程：</p>\n<ol>\n<li>先判断文法是否属于 LL（1）文法\n<ul>\n<li>判断是否存在左递归，消除左递归因子</li>\n<li>计算 First Set 和 Follow Set</li>\n</ul>\n</li>\n<li>构建 Recursive-Descent Parser</li>\n</ol>\n<ul>\n<li>consists of a main procedure and a group of recursive procedures, each corresponds to a nonterminal of the grammar</li>\n<li>Sub procedures used :\n<ul>\n<li>match is a procedure that matches the current next token with its parameter, advances the input if it succeeds, and declares error if it does not</li>\n<li>error is a procedure that prints an error message and exit</li>\n</ul>\n</li>\n<li>Variable used:</li>\n<li>TOKEN is a variable that keeps the current next token in the input</li>\n</ul>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\\\If productions of nonterminal U are </span><br><span class=\"line\">    \\\\U → x1 | x2 |…|xn, and x1,...,xn≠ ε, then the code for procedure U \\\\is as follow:</span><br><span class=\"line\">      if TOKEN in First(x1) then p_x1</span><br><span class=\"line\">      else if TOKEN in First(x2) then p_x2</span><br><span class=\"line\">              else …</span><br><span class=\"line\">              …</span><br><span class=\"line\">                   else if TOKEN in First(xn) then p_xn</span><br><span class=\"line\">                       else ERROR</span><br><span class=\"line\"></span><br><span class=\"line\">\\\\If a production of U is U → ε, then rewrite code </span><br><span class=\"line\">if TOKEN in First(xn) then p_xn</span><br><span class=\"line\">        else if TOKEN not in Follow(U) then ERROR</span><br><span class=\"line\"></span><br><span class=\"line\">The code for p_x where x=y1y2…yn is:</span><br><span class=\"line\">    begin p_y1;p_y2;…;p_yn end</span><br><span class=\"line\">    if yi∈VN then p_yi is the call of procedure yi；otherwise, if yi∈VT then p_yi is match(yi)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><br>\n 编写 main 程序，为每个非终结符编写程序，为每个终结符编写 match 程序，编写 error 程序<br>\n 3. 构建一颗语法树</p>\n<h2 id=\"5-ll1parsing\"><a class=\"anchor\" href=\"#5-ll1parsing\">#</a> 5 LL(1)parsing</h2>\n<p>与递归下降分析中的递归调用函数不同，LL（1）parsing 使用一个 stack，储存 symbols 等待 match，最终 stack 和 input 同时 match 完，parsing 成功。<br>\n<img data-src=\"LL1.png\" alt=\"LL1\"></p>\n<h2 id=\"6-parsing-table\"><a class=\"anchor\" href=\"#6-parsing-table\">#</a> 6 Parsing table</h2>\n<p>描述在适当的解析步骤中产生式的选择。是一个二维数组，M [N,t] 表示在 t 输入时选择 N 的产生式。</p>\n<p>如何构建 Parsing tables：重复以下两个步骤对每一个非终止符</p>\n<ol>\n<li>For each token ‘a’ in First(α), add A→ α to the entry M[ A,a ]</li>\n<li>if ε is in First(α), for each element ‘a’ of Follow(A) (token or $), add A→α  to M[ A,a ]</li>\n</ol>\n<p><strong>The LL(1) parsing algorithm</strong><br>\n<img data-src=\"TheLL(1)parsingalgorithm.png\" alt=\"TheLL(1)parsingalgorithm\"></p>\n",
            "tags": [
                "编译原理"
            ]
        },
        {
            "id": "http://example.com/2024/06/22/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86-C-F-G/",
            "url": "http://example.com/2024/06/22/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86-C-F-G/",
            "title": "编译原理--C.F.G",
            "date_published": "2024-06-22T08:28:41.000Z",
            "content_html": "<h1 id=\"1-context-free-grammar\"><a class=\"anchor\" href=\"#1-context-free-grammar\">#</a> 1 Context-free grammar</h1>\n<p>CFG 上下文无关文法，特殊的语法结构，和正则表达式类似，包含可迭代的规则，是正则表达式的超集。</p>\n<p>定义：G=(VT, VN, P, S)</p>\n<ul>\n<li>VT 是 terminals 的集合，终止符，the basic symbols from which strings are formed. Terminals are tokens</li>\n<li>VN 是 nonterminals 的集合，非终止符，names for structures that denote sets of strings</li>\n<li>P 是 productions 的集合，语法规则，A-&gt;a，where A∈ VN and α∈ (VN∪VT) *.</li>\n<li>S is a start symbol , S∈VN</li>\n</ul>\n<h1 id=\"2-derivationreduction\"><a class=\"anchor\" href=\"#2-derivationreduction\">#</a> 2 Derivation/reduction</h1>\n<p>derivation 推导的作用</p>\n<p>CFG 规则决定 strings of token 的合法性是通过 derivation 或者 reduction 的。derivation 的过程就是将一个非终止符替换成该 production 的右边的过程的重复过程。</p>\n<p>CFA 的 language：<br>\nLet G be a context-free grammar with start symbol S. Then the language of G is:</p>\n<p s∈vt* | there exists s>L(G) =</p>\n<h1 id=\"3-leftmost-derivation\"><a class=\"anchor\" href=\"#3-leftmost-derivation\">#</a> 3 leftmost derivation</h1>\n<p>最左推导：在推导的每一步里优先推导最左边的非终止符，对应对一颗 parse tree 进行前序遍历。</p>\n<h1 id=\"4-rightmost-derivation\"><a class=\"anchor\" href=\"#4-rightmost-derivation\">#</a> 4 rightmost derivation</h1>\n<p>最右推导：在推导的每一步里优先推导最右边的非终止符，它对应于解析树的后序遍历的逆过程</p>\n<h1 id=\"5-sentential-form-and-sentence\"><a class=\"anchor\" href=\"#5-sentential-form-and-sentence\">#</a> 5 sentential form and sentence</h1>\n<p>什么是 sentence？S is the start symbol of G, if S =》 * α, α ∈ (VN∪VT) *, α is a sentential form of G。但如果 a 只有终止符构成，则 a 是 G 的 sentence。注意 sentence form 和 sentence 的区别。</p>\n<h1 id=\"6-parse-tree\"><a class=\"anchor\" href=\"#6-parse-tree\">#</a> 6 parse tree</h1>\n<p>语法树。表示 token 串的结构的工具。如何定义一个 parse tree？</p>\n<ul>\n<li>The root node is labeled with the start symbol S</li>\n<li>Each leaf node is labeled with a terminal or with ε</li>\n<li>Each nonleaf node is labeled with a nonterminal</li>\n<li>If a node with label A ∈ VN has n children with labels X1,X2,..,Xn (which may be terminals or nonterminals), then A -》 X1X2…Xn ∈P。一个产生式可以对应一个内部节点的分叉。</li>\n</ul>\n<p>如何输出一个 parse tree 呢？叶子节点的自左向右遍历就是原始输入</p>\n<h1 id=\"7-abstract-syntas-tree\"><a class=\"anchor\" href=\"#7-abstract-syntas-tree\">#</a> 7 Abstract syntas tree</h1>\n<p>parse tree 很多对于编译器生成可执行代码的多余的信息，因此需要抽象语法树来简化。AST 是 parse tree 的压缩，叶子节点是操作对象，内部节点是操作</p>\n<h1 id=\"8-grammars-with-left-recursion-andor-left-factor\"><a class=\"anchor\" href=\"#8-grammars-with-left-recursion-andor-left-factor\">#</a> 8 grammars with left recursion and/or left factor</h1>\n<p>左递归文法以及如何提取左公因子消除左递归</p>\n<p>A -&gt; Aa|b1|b2 转换为</p>\n<ul>\n<li>A -&gt; b1A'|b2A'</li>\n<li>A' -&gt; aA'|e</li>\n</ul>\n<h1 id=\"9-ambiguous-grammar\"><a class=\"anchor\" href=\"#9-ambiguous-grammar\">#</a> 9 ambiguous grammar</h1>\n<p>歧义：某些文法会对用一个 string 产生不同的 parse tree，也就是最左推导和最右推导产生的语法树是不一样的。</p>\n<p>如何处理歧义：</p>\n<ul>\n<li>Disambiguating rule ：设置规则确认哪一个 parse tree 是正确的</li>\n<li>Rewriting the grammar：重写文法消除歧义，比如添加优先级、关联性</li>\n</ul>\n",
            "tags": [
                "编译原理"
            ]
        },
        {
            "id": "http://example.com/2024/06/22/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86-Lexical/",
            "url": "http://example.com/2024/06/22/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86-Lexical/",
            "title": "编译原理--Lexical",
            "date_published": "2024-06-22T06:27:27.000Z",
            "content_html": "<h2 id=\"1-write-regular-express-re-写正规表达式\"><a class=\"anchor\" href=\"#1-write-regular-express-re-写正规表达式\">#</a> 1 Write regular express RE 写正规表达式</h2>\n<p>RE 是描述 token 模式的重要表示方法。</p>\n<p>alphabet 是一个有限的符号集合，字母、数字、标点符号，符号序列称为串 string。空串 empty string 是长度为 0 的 string，用 e 表示</p>\n<p>正则表达式的三个运算：连接（concatenation）、或（or）、闭包（kleene）<br>\n<img data-src=\"%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%BF%90%E7%AE%97.png\" alt=\"正则表达式运算\"><br>\n闭包分为普通闭包和正闭包，正闭包不包含空串，普通闭包是正闭包加上 e。string 与自身连接称为指数运算，也叫闭包，连接 0 次是 e。或运算时两个 string 的并集。</p>\n<p>正则表达式的构建：正则表达式是由小的基础的正则表达式使用运算规则<strong>递归的</strong>构建起来的。</p>\n<p>归纳基础：</p>\n<ul>\n<li>e 时一个正则表达式，L（e）={e}，说明该语言只包含空串</li>\n<li>a 是字符集里的一个符号，就是一个大小为 1 的 string 的正则表达式</li>\n</ul>\n<p>构建运算符的优先级：</p>\n<ol>\n<li>* 闭包运算的优先级最高，并且是左结合的</li>\n<li>连接其次，也是左结合</li>\n<li>| 优先级最低，左结合</li>\n</ol>\n<p><strong>正则定义</strong></p>\n<p>为给某些正则表达式命名，用符号来调用该正则表达式，使用正则定义实现（regular definition）举例：d-&gt;r</p>\n<p>d 是一个新符号，不在预先规定的字母表中，r 是字母表和别的 di 相并的基础上的正则表达式，任何的 r 都可以替换成只包含原先定义的字母表中的符号，不包含 di，所以 di 也可以替换成只包含的原先定义的字母表的符号，这个过程就是正则定义的过程。<strong>正则定义可以规定某个 string 构建的模式。</strong></p>\n<h2 id=\"2-the-transition-from-res-to-nfas-正规表达式转nfa\"><a class=\"anchor\" href=\"#2-the-transition-from-res-to-nfas-正规表达式转nfa\">#</a> 2 the transition from REs to NFAs 正规表达式转 NFA</h2>\n<p>什么是 NFA？先了解什么是 fa，fa（finite automata）有穷状态机，fa 是 recognizer，对输入进行是否的判断；fa 分为两类，一类是 nfa，一类是 dfa。nfa（Nondeterministic finite automata）非确定有限状态机。定义规则如下</p>\n<ul>\n<li>一个有穷的状态集合 S</li>\n<li>一个输入符号集合 M（input alphabet），假设 e 不在输入集合内</li>\n<li>一个是 Transition function，对特性的上输入和状态做出状态转化的反应</li>\n<li>一个初始状态 S0</li>\n<li>一个接受状态 F</li>\n</ul>\n<p>NFA 容易通过正则表达式构建，但很难形成程序结构表示。转化需要一张状态转换表，说明每个状态在不同输入下转化的状态。如果一个输入 string 可以使得 S0 到达 F，说明这个 string 被 NFA 接收，否则 string 被忽略。所有能被接收到集合就是使用正则表达式构建的 NFA 的描述的 string 的集合。</p>\n<p>下面介绍 <strong>正则表达式 re 转化为 nfa</strong></p>\n<p>给出一个算法，可以把所有的正则表达式转换为 NFA。构造一个 NFA 的规则分为基本规则和归纳规则。基本规则处理不包含运算符的子表达式，归纳规则根据一个给定的表达式的直接<strong>子表达式的 NFA</strong> 构造这个表达式的 NFA。</p>\n<p>归纳规则分为三种：连接、或、闭包。</p>\n<p>连接<br>\n<img data-src=\"%E8%BF%9E%E6%8E%A5.png\" alt=\"连接\"><br>\n或<br>\n<img data-src=\"%E6%88%96.png\" alt=\"或\"><br>\n闭包<br>\n<img data-src=\"%E9%97%AD%E5%8C%85.png\" alt=\"闭包\"></p>\n<p>正则表达式的递归构建 nfa，先把正则表达式的表达式树写出来，对其进行后序遍历的构造，每个节点根据实际情况分为基本构造和归纳构造，得到的结果就是 NFA。</p>\n<h2 id=\"3-the-transition-from-nfas-to-dfa-nfa转dfa\"><a class=\"anchor\" href=\"#3-the-transition-from-nfas-to-dfa-nfa转dfa\">#</a> 3 the transition from NFAs to DFA Nfa 转 Dfa</h2>\n<p>什么是 DFA？Dfa 同样是 fa 的一种，被称为确定的有限状态机。DFA 是 NFA 的特例，DFA 有几个约束条件：</p>\n<ol>\n<li>没有 e 的边</li>\n<li>对于一个状态 s 和每个输入符号 a，只有一个标号为 a 的边离开 s，也就是 s 不能射出两个同样标号的边。但是可以射入两个以上的标号为 a 的边。</li>\n</ol>\n<p>Dfa 可以容易的使用程序来表示转化过程</p>\n<p>NFA 构造 DFA 算法：子集构造法<br>\n算法需要使用 NFA 为 DFA 构造一个状态转换表，根据这个转换表可以很容易的实现 DFA 的程序表示。转换表的是表项的 DFA 的状态，是 NFA 的状态集合。算法有三个重要的函数：<br>\n<img data-src=\"rfa%E8%BD%ACdfa.png\" alt=\"rfa转dfa\"><br>\n 注意 s 是一个 nfa 状态，T 是一个 nfa 状态集合。<br>\n<img data-src=\"rfa%E8%BD%ACdfa%E7%AE%97%E6%B3%95.png\" alt=\"rfa转dfa算法\"></p>\n<ol>\n<li>找到 NFA 的 S0 的 e 闭包集合作为 DFA 的开始状态</li>\n<li>对这个开始状态进行对不同输入的 move，得到的结果进行 e 闭包运算，如果这个状态集合还没有归入 DFA 的状态，归入后重复第二步骤</li>\n<li>一直重复知道没有新的 DFA 的状态出现</li>\n<li>包含 NFA 的结束状态的状态集合是 DFA 的结束状态</li>\n</ol>\n<h2 id=\"4-the-transition-from-fas-to-res-有限状态机转正则表达式\"><a class=\"anchor\" href=\"#4-the-transition-from-fas-to-res-有限状态机转正则表达式\">#</a> 4 the transition from FAs to REs 有限状态机转正则表达式</h2>\n<p>也就是使用状态机来生成正则表达式</p>\n<h2 id=\"5-dfa的最小化\"><a class=\"anchor\" href=\"#5-dfa的最小化\">#</a> 5 DFA 的最小化</h2>\n<p>先说明一个概念：Equivalent States</p>\n<p>当两个状态都是接收状态或者非接受状态，对于字母表中的每个字母，s 和 t 都有相同的 transitions on a to 相同的或者等价的状态，则这两个状态是等价的。</p>\n<p>最小化算法；</p>\n<ul>\n<li>先把 DFA 状态集合划分会非接受和接收状态集合。</li>\n<li>使用字母表中的所有字母（所有可能的输入）对 subset 中的状态集合进行划分成等价的状态集合。</li>\n<li>重复这个过程直到每个集合只有一个元素或者无法被继续划分</li>\n</ul>\n<h2 id=\"6-scanner的构建\"><a class=\"anchor\" href=\"#6-scanner的构建\">#</a> 6 scanner 的构建</h2>\n<p><strong>词法分析的错误处理是 panic mode</strong></p>\n",
            "tags": [
                "编译原理"
            ]
        },
        {
            "id": "http://example.com/2024/06/22/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86-%E4%BB%8B%E7%BB%8DIntroduction/",
            "url": "http://example.com/2024/06/22/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86-%E4%BB%8B%E7%BB%8DIntroduction/",
            "title": "编译原理--介绍Introduction",
            "date_published": "2024-06-22T05:40:48.000Z",
            "content_html": "<h2 id=\"1-the-phase-of-a-compiler\"><a class=\"anchor\" href=\"#1-the-phase-of-a-compiler\">#</a> 1 The Phase Of A Compiler</h2>\n<p>编译器能够把源程序映射为在语义上等价的目标程序。这个映射过程由两个主要部分构成：<strong>分析部分</strong> + <strong>综合部分</strong>。</p>\n<p>一个 Compiler 的 phase 大致可以分为：</p>\n<ul>\n<li>lexical analysis（scan）</li>\n<li>syntax analysis（parse）</li>\n<li>semantic analysis 语义分析</li>\n<li>中间代码生成</li>\n<li>代码优化</li>\n<li>代码生成器</li>\n<li>机器代码优化</li>\n</ul>\n<p><img data-src=\"%E7%BC%96%E8%AF%91%E5%99%A8%E7%9A%84%E5%90%84%E4%B8%AAphase.png\" alt=\"编译器的各个phase\"></p>\n<h3 id=\"11-lexical-analysis\"><a class=\"anchor\" href=\"#11-lexical-analysis\">#</a> 1.1 lexical analysis</h3>\n<p>词法分析器读入组成源程序的字符流，并且将它们组成有意义的 lexeme 的序列，输出 token。token = &lt;token-name，attribute-value&gt;。token-name 是符号表中的使用的抽象符号，比如标识符的抽象符号就是 id，attribute-value 对应源字符串在符号表中对应的条目。条目存放该字符串的信息，比如值。词法分析阶段就是把字符流转化为 token 流。</p>\n<h3 id=\"12-syntax-analysis\"><a class=\"anchor\" href=\"#12-syntax-analysis\">#</a> 1.2 syntax analysis</h3>\n<p>语法分析器使用由词法分析器生成的 token 的第一个元素来构建树形的中间表示，该中间表示给出了 token 流的语法结构，通常使用语法分析树来表示。树的内部节点表示一个运算</p>\n<h3 id=\"13-semantic-analysis\"><a class=\"anchor\" href=\"#13-semantic-analysis\">#</a> 1.3 semantic analysis</h3>\n<p>语义分析器：只用语法树和符号表中的信息来检查源程序是否和语言定义的语义一致。重要的主题是：类型检查，语义检查</p>\n<h3 id=\"14-中间代码生成\"><a class=\"anchor\" href=\"#14-中间代码生成\">#</a> 1.4 中间代码生成</h3>\n<p>三地址代码</p>\n<h2 id=\"2-compiler和interpreter的区别\"><a class=\"anchor\" href=\"#2-compiler和interpreter的区别\">#</a> 2 compiler 和 interpreter 的区别</h2>\n<ul>\n<li>interpreter 是直接利用用户提供的输入执行源代码中的指定的操作，把用户的输入映射成输出的过程，并不通过翻译的方法生成目标程序。</li>\n<li>compiler 是先将源程序翻译成一种能被计算机执行的形式，完成这个翻译过程的软件称为 compiler。</li>\n</ul>\n",
            "tags": [
                "编译原理"
            ]
        },
        {
            "id": "http://example.com/2024/06/04/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86--%E4%B8%AD%E9%97%B4%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E4%B9%8B%E6%8E%A7%E5%88%B6%E6%B5%81/",
            "url": "http://example.com/2024/06/04/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86--%E4%B8%AD%E9%97%B4%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E4%B9%8B%E6%8E%A7%E5%88%B6%E6%B5%81/",
            "title": "编译原理--中间代码生成之控制流",
            "date_published": "2024-06-04T02:48:31.000Z",
            "content_html": "<h2 id=\"1-&#x63A7;&#x5236;&#x6D41;\"><a class=\"anchor\" href=\"#1-&#x63A7;&#x5236;&#x6D41;\">#</a> 1 &#x63A7;&#x5236;&#x6D41;</h2>\n<p>&#x63A7;&#x5236;&#x6D41;&#x662F; if-else&#x3001;while&#x3001;for &#x8FD9;&#x7C7B;&#x8BED;&#x53E5;&#xFF0C;&#x8FD9;&#x7C7B;&#x8BED;&#x53E5;&#x7684;&#x7FFB;&#x8BD1;&#x548C;&#x5BF9;&#x5E03;&#x5C14;&#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x7FFB;&#x8BD1;&#x662F;&#x7ED3;&#x5408;&#x5728;&#x4E00;&#x8D77;&#x7684;&#x3002;</p>\n<h3 id=\"11-&#x5E03;&#x5C14;&#x8868;&#x8FBE;&#x5F0F;\"><a class=\"anchor\" href=\"#11-&#x5E03;&#x5C14;&#x8868;&#x8FBE;&#x5F0F;\">#</a> 1.1 &#x5E03;&#x5C14;&#x8868;&#x8FBE;&#x5F0F;</h3>\n<p>&#x9996;&#x5148;&#x6765;&#x4ECB;&#x7ECD;&#x5E03;&#x5C14;&#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x7FFB;&#x8BD1;&#x8FC7;&#x7A0B;&#x3002;</p>\n<p>&#x5E03;&#x5C14;&#x8868;&#x8FBE;&#x5F0F;&#x7531;&#x5E03;&#x5C14;&#x53D8;&#x91CF;&#x548C;&#x5173;&#x7CFB;&#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x5E03;&#x5C14;&#x8FD0;&#x7B97;&#x7B26;&#x6784;&#x6210;&#xFF0C;&#x5173;&#x7CFB;&#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x5F62;&#x5F0F;&#x4E3A; E1 rel E2&#x3002; &#x5C5E;&#x6027; rel.op &#x8868;&#x793A;&#x5173;&#x7CFB;&#x8FD0;&#x7B97;&#x7B26;&#x7684;&#x67D0;&#x4E00;&#x79CD;&#x3002;</p>\n<h3 id=\"12-&#x77ED;&#x8DEF;&#x4EE3;&#x7801;\"><a class=\"anchor\" href=\"#12-&#x77ED;&#x8DEF;&#x4EE3;&#x7801;\">#</a> 1.2 &#x77ED;&#x8DEF;&#x4EE3;&#x7801;</h3>\n<p>&#x5728;&#x77ED;&#x8DEF;&#x4EE3;&#x7801;&#x4E2D;&#xFF0C;&#x5E03;&#x5C14;&#x8FD0;&#x7B97;&#x7B26; &amp;&amp;&#x3001;||&#x3001;&#xFF01;&#x88AB;&#x7FFB;&#x8BD1;&#x6210;&#x8DF3;&#x8F6C;&#x6307;&#x4EE4; goto&#xFF1B;&#x8FD9;&#x4E09;&#x4E2A;&#x8FD0;&#x7B97;&#x7B26;&#x5728;&#x7FFB;&#x8BD1;&#x4E2D;&#x6CA1;&#x6709;&#x7B26;&#x53F7;&#x663E;&#x793A;&#x3002;</p>\n<h3 id=\"13-&#x63A7;&#x5236;&#x6D41;&#x8BED;&#x53E5;\"><a class=\"anchor\" href=\"#13-&#x63A7;&#x5236;&#x6D41;&#x8BED;&#x53E5;\">#</a> 1.3 &#x63A7;&#x5236;&#x6D41;&#x8BED;&#x53E5;</h3>\n<p>&#x6807;&#x53F7;&#x662F;&#x67D0;&#x5173;&#x7CFB;&#x8868;&#x8FBE;&#x5F0F;&#x4E3A;&#x771F;&#x65F6;&#x8BE5;&#x8DF3;&#x8F6C;&#x7684;&#x5730;&#x65B9;&#x3002;</p>\n<p>&#x5047;&#x8BBE;&#x6BCF;&#x6B21;&#x8C03;&#x7528; newlabel () &#x90FD;&#x4F1A;&#x4EA7;&#x751F;&#x4E00;&#x4E2A;&#x65B0;&#x7684;&#x6807;&#x53F7;&#xFF0C;&#x5E76;&#x5047;&#x8BBE; label (L) &#x4E3A;&#x5C06;&#x6807;&#x53F7; L &#x9644;&#x52A0;&#x5230;&#x5373;&#x5C06;&#x751F;&#x6210;&#x7684;&#x4E0B;&#x4E00;&#x6761;&#x4E09;&#x5730;&#x5740;&#x6307;&#x4EE4;&#x4E0A;&#x3002;</p>\n<p>&#x6BD4;&#x5982;&#xFF1A;B.true = newlabel ()<br>\nS.code = label(B.true)</p>\n<p>&#x8BF4;&#x660E;&#x8DF3;&#x8F6C;&#x5230; B.true &#x7684;&#x6307;&#x4EE4;&#x4F1A;&#x8DF3;&#x8F6C;&#x5230; S.code &#x4E0A;&#xFF0C;&#x5C31;&#x662F;&#x8DF3;&#x8F6C;&#x7ED1;&#x5B9A;&#x3002;</p>\n<p>&#x8BED;&#x6CD5; -&gt; &#x8BED;&#x6CD5;&#x89C4;&#x5219;</p>\n<ol>\n<li>if-stmt -&gt; if E then S1 else S2<br>\nE.true = newLabel<br>\nE.false = newLabel<br>\nS1.next = if-stmt.next<br>\nS2.next = if-stmt.next</li>\n</ol>\n<p>if-stmt.code = E.code||goto label E.true||S1.code||goto S1.next||goto Label E.false||S2.code||label if-stmt.next</p>\n<ol>\n<li>\n<p>E -&gt; E1 or E2<br>\nE1.true = E.true;<br>\nE1.false = newLabel<br>\nE2.true = E.true;<br>\nE2.false = E.false<br>\nE.code = E1.code||label E1.false||E2.code</p>\n</li>\n<li>\n<p>E -&gt; E1 and E2<br>\nE1.true = newLabel<br>\nE1.false = E.false<br>\nE2.true = E.true<br>\nE2.false = E.false</p>\n</li>\n</ol>\n<p>E.code = E1.code||label E1.true||E2.code</p>\n<ol start=\"4\">\n<li>\n<p>E -&gt; id1 &lt; id2<br>\nE.code=if <span class=\"exturl\" data-url=\"aHR0cDovL2lkMS5uYW1l\">id1.name</span> &lt; <span class=\"exturl\" data-url=\"aHR0cDovL2lkMi5uYW1l\">id2.name</span> goto E.true || goto E.false</p>\n</li>\n<li>\n<p>do-stmt -&gt; do S while E<br>\ndo-stmt.begin=newLabel;<br>\ndo-stmt.next=newLabel;<br>\nE.true=do-stmt.begin;<br>\nE.false=do-stmt.next;</p>\n</li>\n</ol>\n<p>do-stmt.code: Label do-stmt.begin || S.code ||E.code || Label do-stmt.next</p>\n<ol>\n<li>while-stmt -&gt; while E do S</li>\n</ol>\n",
            "tags": [
                "编译原理"
            ]
        },
        {
            "id": "http://example.com/2024/06/02/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86--%E8%AF%AD%E5%88%B6%E7%BF%BB%E8%AF%91/",
            "url": "http://example.com/2024/06/02/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86--%E8%AF%AD%E5%88%B6%E7%BF%BB%E8%AF%91/",
            "title": "编译原理--语制翻译",
            "date_published": "2024-06-02T02:48:31.000Z",
            "content_html": "<h2 id=\"&#x8BED;&#x5236;&#x7FFB;&#x8BD1;\"><a class=\"anchor\" href=\"#&#x8BED;&#x5236;&#x7FFB;&#x8BD1;\">#</a> &#x8BED;&#x5236;&#x7FFB;&#x8BD1;</h2>\n<h3 id=\"1-&#x8BED;&#x6CD5;&#x5236;&#x5BFC;\"><a class=\"anchor\" href=\"#1-&#x8BED;&#x6CD5;&#x5236;&#x5BFC;\">#</a> 1 &#x8BED;&#x6CD5;&#x5236;&#x5BFC;</h3>\n<p>&#x4E0A;&#x4E0B;&#x6587;&#x65E0;&#x5173;&#x6587;&#x6CD5;&#x548C;&#x5C5E;&#x6027;&#x53CA;&#x89C4;&#x5219;&#x7684;&#x7ED3;&#x5408;&#x3002;&#x5C5E;&#x6027;&#x548C;&#x6587;&#x6CD5;&#x7B26;&#x53F7;&#x76F8;&#x5173;&#x8054;&#xFF0C;&#x89C4;&#x5219;&#x548C;&#x4EA7;&#x751F;&#x5F0F;&#x76F8;&#x5173;&#x8054;&#x3002;X.a &#x8868;&#x793A; X &#x7B26;&#x53F7; a &#x5C5E;&#x6027;&#x5728;&#x8BED;&#x6CD5;&#x6811;&#x4E2D;&#x7684;&#x503C;&#x3002;</p>\n<h3 id=\"11-&#x7EE7;&#x627F;&#x5C5E;&#x6027;&#x548C;&#x7EFC;&#x5408;&#x5C5E;&#x6027;\"><a class=\"anchor\" href=\"#11-&#x7EE7;&#x627F;&#x5C5E;&#x6027;&#x548C;&#x7EFC;&#x5408;&#x5C5E;&#x6027;\">#</a> 1.1 &#x7EE7;&#x627F;&#x5C5E;&#x6027;&#x548C;&#x7EFC;&#x5408;&#x5C5E;&#x6027;</h3>\n<ul>\n<li>\n<p>&#x7EFC;&#x5408;&#x5C5E;&#x6027;&#xFF1A;&#x8BED;&#x6CD5;&#x6811;&#x8282;&#x70B9;&#x503C;&#x662F;&#x7531;&#x5176;&#x672C;&#x8EAB;&#x7684;&#x503C;&#x3001;&#x5B50;&#x8282;&#x70B9;&#x7684;&#x503C;&#x51B3;&#x5B9A;&#x7684;&#xFF0C;&#x5373;&#x8BE5;&#x8282;&#x70B9;&#x7684;&#x4EA7;&#x751F;&#x5F0F;&#x53F3;&#x90E8;&#x53EA;&#x6709;&#x5176;&#x672C;&#x8EAB;&#x548C;&#x5B50;&#x8282;&#x70B9;&#x6240;&#x5173;&#x8054;&#x7684;&#x8BED;&#x4E49;&#x89C4;&#x5219;&#x3002;&#x53F3;&#x90E8;&#x4EA7;&#x751F;&#x5F0F;&#x7684;&#x5934;&#x90E8;&#x5982;&#x679C;&#x6709;&#x672C;&#x8EAB;&#x6216;&#x5B50;&#x8282;&#x70B9;&#x7684;&#x4EA7;&#x751F;&#x5F0F;&#x7684;&#x5934;&#x90E8;&#x6709;&#x5219;&#x4E3A;&#x7EFC;&#x5408;&#x5C5E;&#x6027;&#x3002;</p>\n</li>\n<li>\n<p>&#x7EE7;&#x627F;&#x5C5E;&#x6027;&#xFF1A;&#x8BED;&#x6CD5;&#x6811;&#x8282;&#x70B9;&#x503C;&#x662F;&#x7531;&#x5176;&#x672C;&#x8EAB;&#x7684;&#x503C;&#xFF0C;&#x7236;&#x8282;&#x70B9;&#x7684;&#x503C;&#x3001;&#x5176;&#x5144;&#x5F1F;&#x8282;&#x70B9;&#x7684;&#x503C;&#x51B3;&#x5B9A;&#x7684;&#xFF0C;&#x8BE5;&#x8282;&#x70B9;&#x7684;&#x4EA7;&#x751F;&#x5F0F;&#x7684;&#x53F3;&#x90E8;&#x6709;&#x7236;&#x8282;&#x70B9;&#xFF0C;&#x5982;&#x679C;&#x7236;&#x8282;&#x70B9;&#x662F;&#x975E;&#x7EC8;&#x6B62;&#x7B26;&#xFF0C;&#x90A3;&#x4E48;&#x8FD8;&#x53EF;&#x80FD;&#x63A8;&#x5BFC;&#x5230;&#x5176;&#x672C;&#x8EAB;&#x548C;&#x5144;&#x5F1F;&#x8282;&#x70B9;&#x3002;&#x672C;&#x8EAB;&#x7684;&#x4EA7;&#x751F;&#x5728;&#x7236;&#x8282;&#x70B9;&#x7684;&#x8BED;&#x6CD5;&#x89C4;&#x5219;&#x4E0A;&#x3002;</p>\n</li>\n</ul>\n<h3 id=\"12-&#x5728;&#x8BED;&#x6CD5;&#x5206;&#x6790;&#x6811;&#x7684;&#x8282;&#x70B9;&#x4E0A;&#x5BF9;sdd&#x6C42;&#x503C;\"><a class=\"anchor\" href=\"#12-&#x5728;&#x8BED;&#x6CD5;&#x5206;&#x6790;&#x6811;&#x7684;&#x8282;&#x70B9;&#x4E0A;&#x5BF9;sdd&#x6C42;&#x503C;\">#</a> 1.2 &#x5728;&#x8BED;&#x6CD5;&#x5206;&#x6790;&#x6811;&#x7684;&#x8282;&#x70B9;&#x4E0A;&#x5BF9; SDD &#x6C42;&#x503C;</h3>\n<p><strong>&#x6CE8;&#x91CA;&#x8BED;&#x6CD5;&#x5206;&#x6790;&#x6811; annotated parse tree</strong> &#xFF1A;&#x5404;&#x8282;&#x70B9;&#x7684;&#x503C;&#x88AB;&#x663E;&#x793A;&#x51FA;&#x6765;&#x7684;&#x8BED;&#x6CD5;&#x6811;</p>\n<p>&#x90A3;&#x4E48;&#x5982;&#x4F55;&#x6C42;&#x5F97;&#x8282;&#x70B9;&#x5C5E;&#x6027;&#x7684;&#x503C;&#x5462;&#xFF0C;&#x5BF9;&#x4E8E;&#x7EFC;&#x5408;&#x8282;&#x70B9;&#x7684;&#x5C5E;&#x6027;&#x503C;&#x53EF;&#x4EE5;&#x81EA;&#x5E95;&#x800C;&#x4E0A;&#x6C42;&#x503C;&#xFF1B;&#x5BF9;&#x4E8E;&#x7EE7;&#x627F;&#x8282;&#x70B9;&#x7684;&#x5C5E;&#x6027;&#x503C;&#x53EF;&#x4EE5;&#x81EA;&#x4E0A;&#x800C;&#x4E0B;&#x6C42;&#x503C;&#x3002;</p>\n<h2 id=\"2-sdd&#x7684;&#x6C42;&#x503C;&#x987A;&#x5E8F;\"><a class=\"anchor\" href=\"#2-sdd&#x7684;&#x6C42;&#x503C;&#x987A;&#x5E8F;\">#</a> 2 SDD &#x7684;&#x6C42;&#x503C;&#x987A;&#x5E8F;</h2>\n<p>&#x7531;&#x4E0A;&#x9762;&#x53EF;&#x4EE5;&#x77E5;&#x9053;&#xFF0C;&#x4E00;&#x4E2A;&#x8BED;&#x6CD5;&#x6811;&#x7684;&#x8282;&#x70B9;&#x6C42;&#x503C;&#x6240;&#x76F8;&#x5173;&#x7684;&#x8282;&#x70B9;&#x5C5E;&#x6027;&#x9519;&#x7EFC;&#x590D;&#x6742;&#xFF0C;&#x53EF;&#x80FD;&#x5728;&#x7236;&#x8282;&#x70B9;&#x4E0A;&#xFF0C;&#x4E5F;&#x53EF;&#x80FD;&#x5728;&#x5B50;&#x8282;&#x70B9;&#x6216;&#x672C;&#x8EAB;&#x3002;&#x90A3;&#x4E48;&#x5982;&#x4F55;&#x786E;&#x5B9A;&#x4E00;&#x9897;&#x8BED;&#x6CD5;&#x6811;&#x7684;&#x8282;&#x70B9;&#x5C5E;&#x6027;&#x7684;&#x6C42;&#x503C;&#x987A;&#x5E8F;&#x5462;&#xFF1F;</p>\n<p>&#x8FD9;&#x5C31;&#x9700;&#x8981;<strong>&#x4F9D;&#x8D56;&#x56FE;</strong>&#x4E86;&#x3002;</p>\n<p>&#x5982;&#x4F55;&#x7ED8;&#x5236;&#x4F9D;&#x8D56;&#x56FE;&#x5462;&#xFF0C;&#x7B80;&#x5355;&#x6765;&#x8BF4;&#x5C31;&#x662F;&#x4EA7;&#x751F;&#x5F0F;&#x53F3;&#x90E8;&#x7684;&#x5404;&#x4E2A;&#x5C5E;&#x6027;&#x6307;&#x5411;&#x5DE6;&#x90E8;&#x7684;&#x5C5E;&#x6027;&#x3002;&#x6CE8;&#x610F;&#x662F;&#x5728;&#x6E90;&#x8BED;&#x6CD5;&#x6811;&#x4E0A;&#x65B0;&#x753B;&#x51FA;&#x5C5E;&#x6027;&#x5728;&#x8FDB;&#x884C;&#x4F9D;&#x8D56;&#x56FE;&#x7684;&#x7ED8;&#x5236;&#x800C;&#x4E0D;&#x662F;&#x7ED8;&#x5236;&#x5728;&#x5C5E;&#x6027;&#x4E0A;&#x3002;</p>\n<p>&#x5F97;&#x5230;&#x4F9D;&#x8D56;&#x56FE;&#x540E;&#xFF0C;&#x5BF9;&#x4F9D;&#x8D56;&#x56FE;&#x8FDB;&#x884C;&#x62D3;&#x8865;&#x6392;&#x5E8F;&#x5373;&#x53EF;&#x5F97;&#x5230;&#x5404;&#x4E2A;&#x5C5E;&#x6027;&#x503C;&#x7684;&#x6C42;&#x503C;&#x987A;&#x5E8F;&#x3002;</p>\n<p>&#x8BE5;&#x65B9;&#x6CD5;&#x4E5F;&#x53EF;&#x4EE5;&#x5224;&#x65AD;&#x4E00;&#x9897;&#x8BED;&#x6CD5;&#x6811;&#x662F;&#x5426;&#x5B58;&#x5728;&#x5FAA;&#x73AF;&#x4F9D;&#x8D56;&#x7684;&#x5173;&#x7CFB;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x80FD;&#x5426;&#x8FDB;&#x884C; SDD &#x6C42;&#x503C;&#x7684;&#x95EE;&#x9898;&#x3002;</p>\n<h3 id=\"21-&#x4E24;&#x79CD;&#x7C7B;&#x578B;&#x7684;sdd\"><a class=\"anchor\" href=\"#21-&#x4E24;&#x79CD;&#x7C7B;&#x578B;&#x7684;sdd\">#</a> 2.1 &#x4E24;&#x79CD;&#x7C7B;&#x578B;&#x7684; SDD</h3>\n<h4 id=\"211-s&#x5C5E;&#x6027;&#x7684;sdd\"><a class=\"anchor\" href=\"#211-s&#x5C5E;&#x6027;&#x7684;sdd\">#</a> 2.1.1 S &#x5C5E;&#x6027;&#x7684; SDD</h4>\n<p>&#x5982;&#x679C; SDD &#x7684;&#x6240;&#x6709;&#x5C5E;&#x6027;&#x90FD;&#x662F;&#x7EFC;&#x5408;&#x5C5E;&#x6027;&#xFF0C;&#x5219;&#x79F0;&#x4E4B;&#x4E3A; S &#x5C5E;&#x6027;&#x7684; SDD&#x3002;</p>\n<p>&#x53EF;&#x4EE5;&#x91C7;&#x7528;&#x81EA;&#x5E95;&#x5411;&#x4E0A;&#x6765;&#x6C42;&#x89E3;&#x5404;&#x4E2A;&#x5C5E;&#x6027;&#x7684;&#x503C;&#x3002;</p>\n<h4 id=\"212-l&#x5C5E;&#x6027;&#x7684;sdd\"><a class=\"anchor\" href=\"#212-l&#x5C5E;&#x6027;&#x7684;sdd\">#</a> 2.1.2 L &#x5C5E;&#x6027;&#x7684; SDD</h4>\n<p>&#x8FD9;&#x7C7B; SDD &#x7684;&#x601D;&#x60F3;&#x662F;&#x5728;&#x4E00;&#x4E2A;&#x4EA7;&#x751F;&#x5F0F;&#x4F53;&#x6240;&#x5173;&#x8054;&#x7684;&#x5404;&#x4E2A;&#x5C5E;&#x6027;&#x4E4B;&#x95F4;&#xFF0C;&#x4F9D;&#x8D56;&#x56FE;&#x7684;&#x8FB9;&#x603B;&#x662F;&#x4ECE;&#x5DE6;&#x5230;&#x53F3;&#x3002;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#xFF0C;&#x8FD9;&#x4E9B;&#x5C5E;&#x6027;&#x8981;&#x4E48;&#x662F;&#x4E00;&#x4E2A;&#x7EFC;&#x5408;&#x5C5E;&#x6027;&#xFF0C;&#x8981;&#x4E48;&#x662F;&#x7EE7;&#x627F;&#x5C5E;&#x6027;&#x4E14;&#x5176;&#x4F9D;&#x8D56;&#x7684;&#x5C5E;&#x6027;&#x5728;&#x5176;&#x5DE6;&#x8FB9;&#xFF08;<strong>&#x5934;&#x90E8;&#x6216;&#x8005;&#x5DE6;&#x8FB9;&#x7684;&#x5144;&#x5F1F;&#x5C5E;&#x6027;</strong>&#xFF09;&#x3002;</p>\n<p><strong>&#x6765;&#x81EA;&#x5DE6;&#x8FB9;&#x548C;&#x4E0A;&#x9762;&#xFF01;&#xFF01;&#xFF01;</strong></p>\n<h2 id=\"3-&#x62BD;&#x8C61;&#x8BED;&#x6CD5;&#x6811;\"><a class=\"anchor\" href=\"#3-&#x62BD;&#x8C61;&#x8BED;&#x6CD5;&#x6811;\">#</a> 3 &#x62BD;&#x8C61;&#x8BED;&#x6CD5;&#x6811;</h2>\n<h3 id=\"31-&#x62BD;&#x8C61;&#x8BED;&#x6CD5;&#x6811;&#x7684;&#x6784;&#x5EFA;\"><a class=\"anchor\" href=\"#31-&#x62BD;&#x8C61;&#x8BED;&#x6CD5;&#x6811;&#x7684;&#x6784;&#x5EFA;\">#</a> 3.1 &#x62BD;&#x8C61;&#x8BED;&#x6CD5;&#x6811;&#x7684;&#x6784;&#x5EFA;</h3>\n<p>&#x5C5E;&#x6027;&#x503C;&#x4E0D;&#x5728;&#x662F;&#x7B80;&#x5355;&#x7684;&#x590D;&#x5236;&#x800C;&#x662F;&#x5E26;&#x6709;&#x4E00;&#x5B9A;&#x7684;&#x62BD;&#x8C61;&#x64CD;&#x4F5C;&#xFF08;&#x52A0;&#x51CF;&#x4E58;&#x9664;&#xFF09;&#xFF0C;&#x8282;&#x70B9;&#x5206;&#x4E3A; Leaf &#x8282;&#x70B9;&#x548C; Node &#x8282;&#x70B9;</p>\n<ul>\n<li>Leaf &#x8282;&#x70B9;&#xFF1A;&#xFF08;op, val&#xFF09;</li>\n<li>Node &#x8282;&#x70B9;&#xFF1A;&#xFF08;op, c1,c2...&#xFF09;&#xFF08;cn &#x4E3A; node &#x7684;&#x5C5E;&#x6027;&#x503C;&#xFF09;</li>\n</ul>\n<h3 id=\"32-&#x7C7B;&#x578B;&#x7684;&#x7ED3;&#x6784;\"><a class=\"anchor\" href=\"#32-&#x7C7B;&#x578B;&#x7684;&#x7ED3;&#x6784;\">#</a> 3.2 &#x7C7B;&#x578B;&#x7684;&#x7ED3;&#x6784;</h3>\n<p>&#x8282;&#x70B9;&#x7684;&#x5C5E;&#x6027;&#x53EF;&#x4EE5;&#x6709;&#x503C; val&#xFF0C;&#x4E5F;&#x53EF;&#x4EE5;&#x6709;&#x7C7B;&#x578B; type</p>\n<h2 id=\"4-&#x8BED;&#x6CD5;&#x5236;&#x5BFC;&#x7684;&#x7FFB;&#x8BD1;&#x65B9;&#x6848;sdt\"><a class=\"anchor\" href=\"#4-&#x8BED;&#x6CD5;&#x5236;&#x5BFC;&#x7684;&#x7FFB;&#x8BD1;&#x65B9;&#x6848;sdt\">#</a> 4 &#x8BED;&#x6CD5;&#x5236;&#x5BFC;&#x7684;&#x7FFB;&#x8BD1;&#x65B9;&#x6848;&#xFF08;SDT&#xFF09;</h2>\n<p>&#x5B9E;&#x73B0;&#x65B9;&#x6CD5;&#xFF1A;&#x9996;&#x5148;&#x5EFA;&#x7ACB;&#x4E00;&#x9897;&#x8BED;&#x6CD5;&#x5206;&#x6790;&#x6811;&#xFF0C;&#x7136;&#x540E;&#x6309;&#x7167;&#x4ECE;&#x5DE6;&#x5230;&#x53F3;&#x7684;&#x6DF1;&#x5EA6;&#x4F18;&#x5148;&#x987A;&#x5E8F;&#x6765;&#x6267;&#x884C;&#x8FD9;&#x4E9B;&#x52A8;&#x4F5C;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#x5728;&#x4E00;&#x4E2A;&#x524D;&#x5E8F;&#x904D;&#x5386;&#x8FC7;&#x7A0B;&#x4E2D;&#x6267;&#x884C;&#x3002;</p>\n<p>&#x4E24;&#x7C7B;&#x53EF;&#x7528; SDT &#x5B9E;&#x73B0;&#x7684;&#x91CD;&#x8981;&#x7684; SDD&#xFF1A;</p>\n<ul>\n<li>&#x57FA;&#x672C;&#x6587;&#x6CD5;&#x53EF;&#x4EE5;&#x7528; LR &#x6280;&#x672F;&#x5206;&#x6790;&#xFF0C;&#x4E14; SDD &#x662F; S &#x5C5E;&#x6027;&#x7684;&#x3002;</li>\n<li>&#x57FA;&#x672C;&#x6587;&#x6CD5;&#x53EF;&#x4EE5;&#x7528; LL &#x6280;&#x672F;&#x5206;&#x6790;&#xFF0C;&#x4E14; SDD &#x662F; L &#x5C5E;&#x6027;&#x7684;&#x3002;</li>\n</ul>\n<h3 id=\"41-&#x540E;&#x7F00;&#x7FFB;&#x8BD1;&#x65B9;&#x6848;s&#x5C5E;&#x6027;&#x7684;sdt\"><a class=\"anchor\" href=\"#41-&#x540E;&#x7F00;&#x7FFB;&#x8BD1;&#x65B9;&#x6848;s&#x5C5E;&#x6027;&#x7684;sdt\">#</a> 4.1 &#x540E;&#x7F00;&#x7FFB;&#x8BD1;&#x65B9;&#x6848; (S &#x5C5E;&#x6027;&#x7684; SDT)</h3>\n<p>** &#x57FA;&#x672C;&#x6587;&#x6CD5;&#x53EF;&#x4EE5;&#x7528; LR &#x6280;&#x672F;&#x5206;&#x6790;&#xFF0C;&#x4E14; SDD &#x662F; S &#x5C5E;&#x6027;&#x7684;&#x3002;** &#x7684;&#x60C5;&#x51B5;&#x3002;</p>\n<p>&#x6784;&#x9020;&#x4E00;&#x4E2A;&#x628A;&#x6BCF;&#x4E2A;&#x52A8;&#x4F5C;&#xFF08;&#x4E00;&#x822C;&#x662F;&#x7ED9;&#x4EA7;&#x751F;&#x5F0F;&#x5934;&#x90E8;&#x7684;&#x7EFC;&#x5408;&#x5C5E;&#x6027;&#x8FDB;&#x884C;&#x8D4B;&#x503C;&#xFF09;&#x90FD;&#x653E;&#x5728;&#x4EA7;&#x751F;&#x5F0F;&#x7684;&#x6700;&#x540E;&#xFF0C;&#x5E76;&#x4E14;&#x5728;&#x6309;&#x7167;&#x8FD9;&#x4E2A;&#x4EA7;&#x751F;&#x5F0F;&#x5C06;&#x4EA7;&#x751F;&#x5B9E;&#x4F53;&#x5F52;&#x7EA6;&#x6210;&#x4EA7;&#x751F;&#x5F0F;&#x5934;&#x7684;&#x65F6;&#x5019;&#x6267;&#x884C;&#x8FD9;&#x4E2A;&#x52A8;&#x4F5C;&#x3002;&#x6240;&#x6709;&#x52A8;&#x4F5C;&#x90FD;&#x5728;&#x4EA7;&#x751F;&#x5F0F;&#x7684;&#x6700;&#x53F3;&#x7AEF;&#x7684; SDT &#x79F0;&#x4E3A;&#x540E;&#x7F00;&#x7FFB;&#x8BD1;&#x65B9;&#x6848;&#x3002;</p>\n<h3 id=\"42-&#x540E;&#x7F00;sdt&#x7684;&#x8BED;&#x6CD5;&#x5206;&#x6790;&#x6808;&#x7684;&#x5B9E;&#x73B0;\"><a class=\"anchor\" href=\"#42-&#x540E;&#x7F00;sdt&#x7684;&#x8BED;&#x6CD5;&#x5206;&#x6790;&#x6808;&#x7684;&#x5B9E;&#x73B0;\">#</a> 4.2 &#x540E;&#x7F00; SDT &#x7684;&#x8BED;&#x6CD5;&#x5206;&#x6790;&#x6808;&#x7684;&#x5B9E;&#x73B0;</h3>\n<p>&#x5C06;&#x5C5E;&#x6027;&#x548C;&#x6587;&#x6CD5;&#x7B26;&#x53F7;&#xFF08;&#x6216;&#x8005;&#x6587;&#x6CD5;&#x7B26;&#x53F7;&#x7684; LR &#x72B6;&#x6001;&#xFF09;&#x4E00;&#x8D77;&#x653E;&#x5165;&#x6808;&#x4E2D;&#x7684;&#x8BB0;&#x5F55;&#x91CC;&#x3002;</p>\n<h3 id=\"43-&#x4EA7;&#x751F;&#x5F0F;&#x5185;&#x90E8;&#x5E26;&#x6709;&#x8BED;&#x4E49;&#x52A8;&#x4F5C;&#x7684;\"><a class=\"anchor\" href=\"#43-&#x4EA7;&#x751F;&#x5F0F;&#x5185;&#x90E8;&#x5E26;&#x6709;&#x8BED;&#x4E49;&#x52A8;&#x4F5C;&#x7684;\">#</a> 4.3 &#x4EA7;&#x751F;&#x5F0F;&#x5185;&#x90E8;&#x5E26;&#x6709;&#x8BED;&#x4E49;&#x52A8;&#x4F5C;&#x7684;</h3>\n<p>&#x5F53;&#x4E00;&#x4E2A;&#x52A8;&#x4F5C;&#x5DE6;&#x8FB9;&#x7684;&#x6240;&#x6709;&#x7B26;&#x53F7;&#x90FD;&#x88AB;&#x5904;&#x7406;&#xFF08;&#x6216;&#x8005;&#x8BF4;&#x4E0D;&#x53EF;&#x5F52;&#x7EA6;&#x540E;&#xFF09;&#xFF0C;&#x8BE5;&#x52A8;&#x4F5C;&#x7ACB;&#x5373;&#x6267;&#x884C;&#x3002;</p>\n<p>&#x4EFB;&#x4F55; SDT &#x90FD;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x4E0B;&#x5217;&#x65B9;&#x6CD5;&#x5B9E;&#x73B0;&#xFF1A;</p>\n<ul>\n<li>&#x5FFD;&#x7565;&#x8BED;&#x4E49;&#x52A8;&#x4F5C;&#xFF0C;&#x5BF9;&#x8F93;&#x5165;&#x8FDB;&#x884C;&#x590D;&#x53D1;&#x5206;&#x6790;&#xFF0C;&#x5E76;&#x4EA7;&#x751F;&#x4E00;&#x4E2A;&#x8BED;&#x6CD5;&#x5206;&#x6790;&#x6811;&#x3002;</li>\n<li>&#x7136;&#x540E;&#x68C0;&#x67E5;&#x6BCF;&#x4E2A;&#x5185;&#x90E8;&#x8282;&#x70B9; N&#xFF0C;&#x5047;&#x8BBE;&#x5979;&#x7684;&#x4EA7;&#x751F;&#x5F0F;&#x662F; A-&gt;a&#x3002;&#x5C06; a &#x4E2D;&#x7684;&#x5404;&#x4E2A;&#x52A8;&#x4F5C;&#x5F53;&#x4F5C; N &#x7684;&#x9644;&#x52A0;&#x5B50;&#x8282;&#x70B9;&#x52A0;&#x5165;&#xFF0C;&#x4F7F;&#x5F97; N &#x7684;&#x5B50;&#x8282;&#x70B9;&#x4ECE;&#x5DE6;&#x5230;&#x53F3;&#x548C; a &#x4E2D;&#x7684;&#x7B26;&#x53F7;&#x53CA;&#x52A8;&#x4F5C;&#x5B8C;&#x5168;&#x4E00;&#x81F4;&#x3002;</li>\n<li>&#x5BF9;&#x8FD9;&#x9897;&#x8BED;&#x6CD5;&#x6811;&#x8FDB;&#x884C;&#x524D;&#x5E8F;&#x904D;&#x5386;&#xFF0C;&#x5E76;&#x4E14;&#x5F53;&#x8BBF;&#x95EE;&#x5230;&#x4E00;&#x4E2A;&#x4EE5;&#x67D0;&#x4E2A;&#x52A8;&#x4F5C;&#x4E3A;&#x6807;&#x53F7;&#x7684;&#x8282;&#x70B9;&#x65F6;&#x7ACB;&#x5373;&#x6267;&#x884C;&#x8FD9;&#x4E2A;&#x52A8;&#x4F5C;&#x3002;</li>\n</ul>\n<h3 id=\"44-&#x4ECE;sdt&#x4E2D;&#x6D88;&#x9664;&#x5DE6;&#x9012;&#x5F52;\"><a class=\"anchor\" href=\"#44-&#x4ECE;sdt&#x4E2D;&#x6D88;&#x9664;&#x5DE6;&#x9012;&#x5F52;\">#</a> 4.4 &#x4ECE; SDT &#x4E2D;&#x6D88;&#x9664;&#x5DE6;&#x9012;&#x5F52;</h3>\n<ul>\n<li><strong>A-&gt;Aa|b</strong>  =&gt;</li>\n<li><strong>A-&gt;A&apos;|R</strong></li>\n<li><strong>R-&gt;aR|a</strong></li>\n</ul>\n<h3 id=\"45-l&#x5C5E;&#x6027;&#x5B9A;&#x4E49;&#x7684;sdt\"><a class=\"anchor\" href=\"#45-l&#x5C5E;&#x6027;&#x5B9A;&#x4E49;&#x7684;sdt\">#</a> 4.5 L &#x5C5E;&#x6027;&#x5B9A;&#x4E49;&#x7684; SDT</h3>\n<p>&#x5C06;&#x4E00;&#x4E2A; L &#x5C5E;&#x6027;&#x7684; SDD &#x8F6C;&#x6362;&#x4E3A;&#x4E00;&#x4E2A; SDT &#x7684;&#x89C4;&#x5219;&#x5982;&#x4E0B;&#xFF1A;</p>\n<ol>\n<li>&#x628A;&#x8BA1;&#x7B97;&#x67D0;&#x4E2A;&#x975E;&#x7EC8;&#x7ED3;&#x7B26;&#x53F7; A &#x7684;&#x7EE7;&#x627F;&#x5C5E;&#x6027;&#x7684;&#x52A8;&#x4F5C;&#x63D2;&#x5165;&#x5230;&#x4EA7;&#x751F;&#x5F0F;&#x4E2D;&#x7D27;&#x9760; A &#x7684;&#x5DE6;&#x8FB9;&#x3002;&#x5982;&#x679C; A &#x7684;&#x591A;&#x4E2A;&#x7EE7;&#x627F;&#x5C5E;&#x6027;&#x4EE5;&#x4E94;&#x73AF;&#x7684;&#x5F62;&#x5F0F;&#x76F8;&#x4E92;&#x4F9D;&#x8D56;&#xFF0C;&#x9700;&#x8981;&#x5BF9;&#x8FD9;&#x4E9B;&#x5C5E;&#x6027;&#x7684;&#x6C42;&#x804C;&#x52A8;&#x4F5C;&#x8FDB;&#x884C;&#x62D3;&#x8865;&#x6392;&#x5E8F;&#xFF0C;&#x4EE5;&#x8BA1;&#x7B97;&#x9700;&#x8981;&#x7684;&#x7EE7;&#x627F;&#x5C5E;&#x6027;&#x3002;</li>\n<li>&#x5C06;&#x8BA1;&#x7B97;&#x4E00;&#x4E2A;&#x4EA7;&#x751F;&#x5F0F;&#x5934;&#x7684;&#x7EFC;&#x5408;&#x5C5E;&#x6027;&#x653E;&#x5728;&#x6700;&#x540E;&#x3002;</li>\n</ol>\n<h2 id=\"5-&#x5B9E;&#x73B0;l&#x5C5E;&#x6027;&#x7684;sdd\"><a class=\"anchor\" href=\"#5-&#x5B9E;&#x73B0;l&#x5C5E;&#x6027;&#x7684;sdd\">#</a> 5 &#x5B9E;&#x73B0; L &#x5C5E;&#x6027;&#x7684; SDD</h2>\n<ol>\n<li>&#x5EFA;&#x7ACB;&#x8BED;&#x6CD5;&#x5206;&#x6790;&#x6811;&#x5E76;&#x6CE8;&#x91CA;</li>\n<li>&#x6784;&#x9020;&#x8BED;&#x6CD5;&#x5206;&#x6790;&#x6811;</li>\n<li>&#x4F7F;&#x7528;&#x4E00;&#x4E2A;&#x9012;&#x5F52;&#x4E0B;&#x964D;&#x7684;&#x8BED;&#x6CD5;&#x5206;&#x6790;&#x5668;&#xFF0C;&#x4E3A;&#x6BCF;&#x4E2A;&#x975E;&#x7EC8;&#x7ED3;&#x7B26;&#x53F7;&#x5EFA;&#x7ACB;&#x4E00;&#x4E2A;&#x51FD;&#x6570;</li>\n<li>&#x4F7F;&#x7528;&#x4E00;&#x4E2A;&#x9012;&#x5F52;&#x4E0B;&#x964D;&#x7684;&#x8BED;&#x6CD5;&#x5206;&#x6790;&#x5668;&#xFF0C;&#x4EE5;&#x8FB9;&#x626B;&#x63CF;&#x751F;&#x6210;&#x7684;&#x65B9;&#x5F0F;&#x4EE3;&#x7801;</li>\n<li>&#x4E0E; LL &#x8BED;&#x6CD5;&#x5206;&#x6790;&#x5668;&#x7ED3;&#x5408;&#x751F;&#x6210; SDT</li>\n<li>&#x4E0E; LR &#x8BED;&#x6CD5;&#x5206;&#x6790;&#x5668;&#x7ED3;&#x5408;&#x751F;&#x6210; SDT</li>\n</ol>\n<h3 id=\"51-&#x5728;&#x9012;&#x5F52;&#x4E0B;&#x964D;&#x7684;&#x8BED;&#x6CD5;&#x5206;&#x6790;&#x8FC7;&#x7A0B;&#x4E2D;&#x8FDB;&#x884C;&#x7FFB;&#x8BD1;\"><a class=\"anchor\" href=\"#51-&#x5728;&#x9012;&#x5F52;&#x4E0B;&#x964D;&#x7684;&#x8BED;&#x6CD5;&#x5206;&#x6790;&#x8FC7;&#x7A0B;&#x4E2D;&#x8FDB;&#x884C;&#x7FFB;&#x8BD1;\">#</a> 5.1 &#x5728;&#x9012;&#x5F52;&#x4E0B;&#x964D;&#x7684;&#x8BED;&#x6CD5;&#x5206;&#x6790;&#x8FC7;&#x7A0B;&#x4E2D;&#x8FDB;&#x884C;&#x7FFB;&#x8BD1;</h3>\n<p>&#x4E00;&#x4E2A;&#x9012;&#x5F52;&#x4E0B;&#x964D;&#x7684;&#x8BED;&#x6CD5;&#x5206;&#x6790;&#x5668;&#x5BF9;&#x6BCF;&#x4E2A;&#x975E;&#x7EC8;&#x7ED3;&#x7B26;&#x53F7; A &#x90FD;&#x6709;&#x4E00;&#x4E2A;&#x51FD;&#x6570; A&#x3002;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x6309;&#x7167;&#x5982;&#x4E0B;&#x65B9;&#x6CD5;&#x628A;&#x8FD9;&#x4E2A;&#x8BED;&#x6CD5;&#x5206;&#x6790;&#x5668;&#x6269;&#x5C55;&#x4E3A;&#x4E00;&#x4E2A;&#x7FFB;&#x8BD1;&#x5668;&#xFF1A;</p>\n<ol>\n<li>&#x51FD;&#x6570; A &#x7684;&#x53C2;&#x6570;&#x662F;&#x975E;&#x7EC8;&#x7ED3;&#x7B26; A &#x7684;&#x7EE7;&#x627F;&#x5C5E;&#x6027;</li>\n<li>A &#x7684;&#x8FD4;&#x56DE;&#x503C;&#x662F;&#x975E;&#x7EC8;&#x7ED3;&#x7B26; A &#x7684;&#x7EFC;&#x5408;&#x5C5E;&#x6027;&#x7684;&#x96C6;&#x5408;</li>\n</ol>\n<h3 id=\"52-&#x8FB9;&#x626B;&#x63CF;&#x8FB9;&#x751F;&#x6210;&#x4EE3;&#x7801;\"><a class=\"anchor\" href=\"#52-&#x8FB9;&#x626B;&#x63CF;&#x8FB9;&#x751F;&#x6210;&#x4EE3;&#x7801;\">#</a> 5.2 &#x8FB9;&#x626B;&#x63CF;&#x8FB9;&#x751F;&#x6210;&#x4EE3;&#x7801;</h3>\n<p>TODO&#xFF1A;&#x6CA1;&#x770B;&#x61C2;&#x3001;&#x770B;&#x770B;&#x535A;&#x5BA2;</p>\n<h3 id=\"53-l&#x5C5E;&#x6027;&#x7684;sdd&#x548C;ll&#x8BED;&#x6CD5;&#x5206;&#x6790;\"><a class=\"anchor\" href=\"#53-l&#x5C5E;&#x6027;&#x7684;sdd&#x548C;ll&#x8BED;&#x6CD5;&#x5206;&#x6790;\">#</a> 5.3 L &#x5C5E;&#x6027;&#x7684; SDD &#x548C; LL &#x8BED;&#x6CD5;&#x5206;&#x6790;</h3>\n<p>&#x5728;&#x6839;&#x636E; SDT &#x8FDB;&#x884C; LL &#x8BED;&#x6CD5;&#x5206;&#x6790;&#x8FC7;&#x7A0B;&#x4E2D;&#xFF0C;&#x9700;&#x8981;&#x5BF9;&#x8BED;&#x6CD5;&#x5206;&#x6790;&#x6808;&#x8FDB;&#x884C;&#x6269;&#x5C55;&#xFF0C;&#x4EE5;&#x5B58;&#x653E;&#x8BED;&#x4E49;&#x52A8;&#x4F5C;&#x548C;&#x5C5E;&#x6027;&#x6C42;&#x503C;&#x6240;&#x9700;&#x8981;&#x7684;&#x67D0;&#x4E9B;&#x6570;&#x636E;&#x9879;&#xFF0C;&#x4E00;&#x822C;&#x662F;&#x67D0;&#x4E9B;&#x5C5E;&#x6027;&#x503C;&#x7684;&#x62F7;&#x8D1D;&#x3002;</p>\n<p>&#x5206;&#x522B;&#x662F;&#x52A8;&#x4F5C;&#x8BB0;&#x5F55;&#x548C;&#x7EFC;&#x5408;&#x8BB0;&#x5F55;&#xFF1A;</p>\n<ul>\n<li>&#x52A8;&#x4F5C;&#x8BB0;&#x5F55;&#xFF1A;&#x5373;&#x5C06;&#x88AB;&#x6267;&#x884C;&#x7684;&#x8BED;&#x4E49;&#x52A8;&#x4F5C;</li>\n<li>&#x7EFC;&#x5408;&#x8BB0;&#x5F55;&#xFF1A;&#x4FDD;&#x5B58;&#x975E;&#x7EC8;&#x7ED3;&#x7B26;&#x53F7;&#x7684;&#x7EFC;&#x5408;&#x5C5E;&#x6027;&#x503C;</li>\n</ul>\n<p>&#x90A3;&#x4E48;&#x8BE5;&#x5982;&#x4F55;&#x7BA1;&#x7406;&#x6808;&#x4E2D;&#x7684;&#x5C5E;&#x6027;&#xFF0C;&#x5728;&#x4EC0;&#x4E48;&#x65F6;&#x5019;&#x5982;&#x4F55;&#x63A8;&#x5165;&#x9000;&#x51FA;&#x6808;&#x5462;&#xFF1F;</p>\n<ul>\n<li>&#x975E;&#x7EC8;&#x7ED3;&#x7B26;&#x53F7; A &#x7684;&#x7EE7;&#x627F;&#x5C5E;&#x6027;&#x653E;&#x5728;&#x8868;&#x793A;&#x8FD9;&#x4E2A;&#x7B26;&#x53F7;&#x7684;&#x6808;&#x8BB0;&#x5F55;&#x4E2D;&#xFF1B;</li>\n<li>&#x975E;&#x7EC8;&#x7ED3;&#x7B26;&#x53F7; A &#x7684;&#x7EFC;&#x5408;&#x5C5E;&#x6027;&#x653E;&#x5728;&#x4E00;&#x4E2A;&#x5355;&#x72EC;&#x7684;&#x7EFC;&#x5408;&#x8BB0;&#x5F55;&#x4E2D;&#xFF0C;&#x4ED6;&#x5728;&#x6808;&#x4E2D;&#x7D27;&#x9760;&#x5728; A &#x7684;&#x8BB0;&#x5F55;&#x4E0B;&#x3002;</li>\n</ul>\n<p><strong>LL &#x8BED;&#x6CD5;&#x5206;&#x6790;</strong>&#xFF08;&#x4F55;&#x65F6;&#x9700;&#x8981;&#x5EFA;&#x7ACB;&#x5C5E;&#x6027;&#x7684;&#x4E34;&#x65F6;&#x62F7;&#x8D1D;&#xFF09;</p>\n<h3 id=\"54-l&#x5C5E;&#x6027;&#x7684;sdd&#x7684;&#x81EA;&#x5E95;&#x5411;&#x4E0A;&#x8BED;&#x6CD5;&#x5206;&#x6790;\"><a class=\"anchor\" href=\"#54-l&#x5C5E;&#x6027;&#x7684;sdd&#x7684;&#x81EA;&#x5E95;&#x5411;&#x4E0A;&#x8BED;&#x6CD5;&#x5206;&#x6790;\">#</a> 5.4 L &#x5C5E;&#x6027;&#x7684; SDD &#x7684;&#x81EA;&#x5E95;&#x5411;&#x4E0A;&#x8BED;&#x6CD5;&#x5206;&#x6790;</h3>\n<p>&#x65B9;&#x6CD5;&#xFF1A;</p>\n<ol>\n<li>&#x5B9A;&#x4E49; L &#x5C5E;&#x6027;&#x7684; SDT &#x4E3A;&#x8D77;&#x70B9;&#x3002;</li>\n<li>&#x5BF9;&#x6BCF;&#x4E2A;&#x5185;&#x5D4C;&#x7684;&#x8BED;&#x4E49;&#x52A8;&#x4F5C;&#x5728;&#x6587;&#x6CD5;&#x4E2D;&#x5F15;&#x5165;&#x4E00;&#x4E2A;&#x6807;&#x8BB0;&#x975E;&#x7EC8;&#x7ED3;&#x7B26; M &#x6765;&#x66FF;&#x6362;&#x5B83;&#xFF0C;M-&gt;E&#x3002;</li>\n<li>&#x5982;&#x679C;&#x66FF;&#x6362;&#x4E86;&#x88AB;&#x6807;&#x8BB0;&#x4E3A; M &#x7684;&#x8BED;&#x4E49;&#x52A8;&#x4F5C; a &#x4E3A; a&#x2019;&#xFF0C;&#x8FD9;&#x4E2A; a&#x2019;&#x5C06;&#x52A8;&#x4F5C; a &#x9700;&#x8981;&#x7684; A &#x6216; a &#x4E2D;&#x7684;&#x6240;&#x6709;&#x7B26;&#x53F7;&#x7684;&#x4EFB;&#x4F55;&#x5C5E;&#x6027;&#x4F5C;&#x4E3A; M &#x7684;&#x7EE7;&#x627F;&#x5C5E;&#x6027;&#x8FDB;&#x884C;&#x62F7;&#x8D1D;&#xFF1B;&#x6309;&#x7167; a &#x4E2D;&#x7684;&#x65B9;&#x6CD5;&#x8BA1;&#x7B97;&#x5404;&#x4E2A;&#x5C5E;&#x6027;&#xFF0C;&#x5C06;&#x8FD9;&#x4E9B;&#x5C5E;&#x6027;&#x4F5C;&#x4E3A; M &#x7684;&#x7EFC;&#x5408;&#x5C5E;&#x6027;</li>\n</ol>\n",
            "tags": [
                "编译原理"
            ]
        }
    ]
}