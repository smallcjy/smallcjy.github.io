{
    "version": "https://jsonfeed.org/version/1",
    "title": "Blog",
    "subtitle": "",
    "icon": "http://smallcjy.github.io/images/favicon.ico",
    "description": "",
    "home_page_url": "http://smallcjy.github.io",
    "items": [
        {
            "id": "http://smallcjy.github.io/2024/10/10/9%E6%9C%88%E4%BB%BDOKR%E6%80%BB%E7%BB%93/",
            "url": "http://smallcjy.github.io/2024/10/10/9%E6%9C%88%E4%BB%BDOKR%E6%80%BB%E7%BB%93/",
            "title": "9月份OKR总结",
            "date_published": "2024-10-10T11:08:08.000Z",
            "content_html": "<h2 id=\"9月份okr工作内容介绍\"><a class=\"anchor\" href=\"#9月份okr工作内容介绍\">#</a> 9 月份 OKR 工作内容介绍</h2>\n<p>9 月份工作周期的工作内容主要是完成网络子系统中关于 unix stream socket 的重构工作。主线上的原版关于 unix stream socket 的实现有些简陋，因此需要进行重构工作。目前基本上完成 stream socket 的重构，首先是重构了 stream socket 的设计，采用类似 tcp 状态机的设计来实现 stream socket，使其能够进行通信前的三次握手。实现状态机时，引入了一些新的设施来解决存在的问题，比如抽象出 Unix Socket Buffer，提高复用率和可扩展性；还有为了能够通过文件地址拿到 socket inode，建立了 id 映射 socket 的哈希表等等。然后就是实现了 socket 的阻塞式读写，补齐了 socket 接口调用。目前是能通过测试程序，后续仍然需要进行进一步的开发，比如添加虚拟抽象地址空间，支持 unix socket 的异步读写等等。</p>\n",
            "tags": [
                "经验总结"
            ]
        },
        {
            "id": "http://smallcjy.github.io/2024/09/24/dragonOS_unix_socket%E6%96%87%E6%A1%A3/",
            "url": "http://smallcjy.github.io/2024/09/24/dragonOS_unix_socket%E6%96%87%E6%A1%A3/",
            "title": "",
            "date_published": "2024-09-24T06:55:34.642Z",
            "content_html": "<h1 id=\"unix-手册\"><a class=\"anchor\" href=\"#unix-手册\">#</a> unix 手册</h1>\n<h2 id=\"unix-socket\"><a class=\"anchor\" href=\"#unix-socket\">#</a> unix socket</h2>\n<p>unix - 用于进程间通信的 socket</p>\n<h2 id=\"创建\"><a class=\"anchor\" href=\"#创建\">#</a> 创建</h2>\n<p><code>unix_socket = socket(AF_UNIX, type, 0)</code> <br>\n <code>error = socketpair(AF_UNIX, type, 0, fds)</code></p>\n<ul>\n<li>目前支持的 type：\n<ul>\n<li>SOCK_STREAM</li>\n<li>SOCK_SEQPACKET</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"描述\"><a class=\"anchor\" href=\"#描述\">#</a> 描述</h2>\n<p>AF_UNIX socket family 用于在同一台机器中的不同进程之间的通信（IPC）。unix socket 地址现支持绑定文件地址，未支持绑定 abstract namespace 抽象命名空间。</p>\n<p>目前 unix 域中合法的 socket type 有：SOCK_STREAM, 提供 stream-oriented socket，可靠有序传输消息；SOCK_SEQPACKET，提供 connection-oriented，消息边界和按发送顺序交付消息保证的 socket。</p>\n<h3 id=\"unix-stream-socket-进程通信描述\"><a class=\"anchor\" href=\"#unix-stream-socket-进程通信描述\">#</a> unix stream socket 进程通信描述</h3>\n<p>unix stream socket 提供进程间流式传输消息的功能。假设对端进程作为服务端，本端进程作为客户端。进程间使用 stream socket 通信过程如下：</p>\n<p>分别在对端进程和本端进程创建 socket，服务端需要 bind 地址，客户端不必须 bind 地址。通信过程类似 tcp 三次握手流程：服务端调用 listen 系统调用进入监听状态，监听服务端 bind 的地址；客户端调用 connect 系统调用连接服务端地址；服务端调用 accept 系统调用接受来自客户端的连接，返回建立连接的新的 socket。成功建立连接后可以调用 write\\send\\sendto\\sendmsg 进行写操作，调用 read\\recv\\recvfrom\\recvmsg 进行读操作。目前尚未支持非阻塞式读写，默认为阻塞式读写。读写完毕后调用 close 系统调用关闭 socket 连接。</p>\n<h3 id=\"unix-seqpacket-socket-进程通信描述\"><a class=\"anchor\" href=\"#unix-seqpacket-socket-进程通信描述\">#</a> unix seqpacket socket 进程通信描述</h3>\n<h2 id=\"sockets-apic语言\"><a class=\"anchor\" href=\"#sockets-apic语言\">#</a> Sockets API（C 语言）</h2>\n<p>DragonOS unix socket api 符合 UNIX domain sockets api 接口协议。</p>\n<ol>\n<li>socket()</li>\n<li>socketpair()</li>\n<li>bind()</li>\n<li>connect()</li>\n<li>accept()</li>\n<li>read()</li>\n<li>write()</li>\n<li>recv()</li>\n<li>send()</li>\n<li>recvfrom()</li>\n<li>sendto()</li>\n<li>recvmsg()</li>\n<li>sendmsg()</li>\n<li>close()</li>\n<li>shutdown()</li>\n</ol>\n",
            "tags": []
        },
        {
            "id": "http://smallcjy.github.io/2024/09/23/202410OKR%E5%88%B6%E5%AE%9A/",
            "url": "http://smallcjy.github.io/2024/09/23/202410OKR%E5%88%B6%E5%AE%9A/",
            "title": "2024十月份OKR制定",
            "date_published": "2024-09-23T12:51:07.000Z",
            "content_html": "<h2 id=\"network-benchmark-tool\"><a class=\"anchor\" href=\"#network-benchmark-tool\">#</a> network benchmark tool</h2>\n<h2 id=\"unix-socket-abstract-address-space\"><a class=\"anchor\" href=\"#unix-socket-abstract-address-space\">#</a> unix socket abstract address space</h2>\n<h2 id=\"进程基于channel的通信\"><a class=\"anchor\" href=\"#进程基于channel的通信\">#</a> 进程基于 channel 的通信</h2>\n",
            "tags": [
                "OKR"
            ]
        },
        {
            "id": "http://smallcjy.github.io/2024/09/23/%E5%BE%AE%E6%9C%8D%E5%8A%A1Learning/",
            "url": "http://smallcjy.github.io/2024/09/23/%E5%BE%AE%E6%9C%8D%E5%8A%A1Learning/",
            "title": "microservice learning",
            "date_published": "2024-09-23T12:04:44.000Z",
            "content_html": "<h2 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>将应用程序分解成多个微服务共同工作，为其提供服务，微服务部署在 contain 上，contain 部署在具有负载均衡的服务器上，不同微服务之间通过 api 进行调用。相较于单体应用，微服务在系统的 scale ability 上有更佳的表现。</p>\n<h2 id=\"微服务简介\"><a class=\"anchor\" href=\"#微服务简介\">#</a> 微服务简介</h2>\n<p>微服务的死对头：单体应用。所谓知己知彼，百战百胜。要想透彻的了解微服务的诞生，必须要明白单体应用的架构，优缺点。</p>\n<p>Monolithic Application：所有功能模块整合在一个单一的代码库和部署单元中的应用程序，所有的组件都在一个系统中运行。</p>\n<p>最常见的单体应用框架，Spring Boot。单体应用架构中有 6 个模块：WEB_UI API MYSQL_ADAPTER TWILIO_ADAPTER SENDGRID_ADAPTER STRIPE_ADAPTER。</p>\n<p>这些模块定义了服务、领域对象和事件。围绕核心的与外部事件接口对接的适配器，包括数据库访问组件、生产和消费消息的消息组件暴露的 API。单体应用部署服务器常用的负载均衡模式是冗余，通过运行多个副本来扩展应用。在并发数较少、用户量较少的前期阶段，它可以良好的运作。</p>\n<h3 id=\"单体应用的地狱\"><a class=\"anchor\" href=\"#单体应用的地狱\">#</a> 单体应用的地狱</h3>\n<p>单体应用的架构和部署是简单的，但是有着很大的局限性。单体应用在业务上的成功会使得需求越来越多，系统随时间的推移变得越来越臃肿。一旦单体应用成为一个庞大、复杂的单体，可扩展会变得非常困难，可谓牵一发而动全身。任何优秀的软件架构师都无法架构出永远不会成为屎山的系统。根据可扩展性的定义：系统的扩大不会带来性能上的损失，单体应用的规模的扩大极易带来性能的下降，这从系统的启动时间就可以看出。除了可扩展性的问题，复杂的单体应用本身就是持续部署的障碍。</p>\n<p>单体应用的另一个问题就是可靠性，由于所有的模块都运行在同一个进程中，任何一个模块的 bug，都可能带来系统的崩溃。单体应用的重构是非常具有挑战的。</p>\n<h3 id=\"微服务解决复杂问题\"><a class=\"anchor\" href=\"#微服务解决复杂问题\">#</a> 微服务 —— 解决复杂问题</h3>\n<p>单体问题带来的大部分问题，在微服务架构中能够得到很好的解决。微服务的理念是将应用分家成一套较小的互联服务。</p>\n<p>一个微服务通常实现一组不同的特性和功能，具有自己的六边形架构。微服务会暴漏工其他微服务或客户端消费的 api。运行时，微服务实例会部署在云虚拟机或者 docker 容器上。服务之间可以通过异步、基于消息的通信、可以通过 rest api 进行通信。</p>\n<p>客户端和后端之间的通信是通过称为 api gateway 负责的。api gateway 负责负载均衡、缓存、访问控制、api 度量和监控。后面会详细介绍 api gateway。</p>\n<h3 id=\"微服务的缺点\"><a class=\"anchor\" href=\"#微服务的缺点\">#</a> 微服务的缺点</h3>\n<ul>\n<li>服务的规模</li>\n<li>服务间的通信</li>\n<li>分区数据库架构</li>\n<li>测试</li>\n<li>部署服务发现机制</li>\n<li>PaaS 平台即服务：开发自己的 PaaS：Kubernetes 集群服务</li>\n</ul>\n<h2 id=\"api-gateway\"><a class=\"anchor\" href=\"#api-gateway\">#</a> API Gateway</h2>\n<p>微服务架构中，每个微服务会暴露一组比较细颗粒的端点。</p>\n<p>假设现在有个 GET 请求，在单体服务架构中，会发送到负载均衡服务器，服务器决定发送该请求到部署相同应用实例的服务器中的其中一个。相比于微服务架构，这个 GET 请求可能会涉及到很多微服务，因此客户端不会只发送一个 GET 服务，而是发送多个 GET 服务到各个实例中。</p>\n<h3 id=\"客户端与微服务的直接通信\"><a class=\"anchor\" href=\"#客户端与微服务的直接通信\">#</a> 客户端与微服务的直接通信</h3>\n<p>每个微服务有一个暴露的 REST API（端点），理论客户端可以直接调用某个微服务的 api，但是通过直接调用不同 api 来实现某个服务，这样效率十分低下。</p>\n<p>下面列举几个客户端直接与微服务端建立连接的几个缺点：</p>\n<ul>\n<li>服务涉及的微服务请求多而杂，对客户端编写有难度</li>\n<li>直接向微服务端发送请求不够安全</li>\n<li>微服务架构不容易重构</li>\n</ul>\n<p>由于上面的问题，在微服务架构下的客户端中，很少有客户端会直接向微服务端进行通信。</p>\n<h3 id=\"使用api-gateway\"><a class=\"anchor\" href=\"#使用api-gateway\">#</a> 使用 API gateway</h3>\n<p>下面来到本章节的重点，客户端和服务端通信的更好的方式是使用 API gateway。API gateway 是一个服务器，是系统的单入口点。它类似于面向对象设计模式中的 Facade 模式。</p>\n<p>简单介绍一下 Facade 模式，防止有读者不了解这一经典的设计模式。Facade 设计模式是提供一个统一的接口来访问一个子系统的一组接口。统一的接口称为高层接口。客户端与 Facade 对象通信，Facade 管理下层接口。</p>\n<p>API gateway 的工作模式类似于 Facade 模式，API gateway 是一组 Facade 门户，负责请求路由、组合和协议的转换。API gateway 会调用多个微服务来处理一个请求并聚合结果。API gateway 的作用其实可以简化为将一个 web 协议请求（http、web socket）转化为内部的非 web 协议的请求。</p>\n<h3 id=\"api-gateway的优劣\"><a class=\"anchor\" href=\"#api-gateway的优劣\">#</a> API gateway 的优劣</h3>\n<p>待补充</p>\n<h3 id=\"实现api网关\"><a class=\"anchor\" href=\"#实现api网关\">#</a> 实现 API 网关</h3>\n<p>下面来聊聊 API gateway 如何设计。</p>\n<p>API gateway 负责将客户端请求分解成多个微服务请求，并 route 到对应的微服务器上。API gateway 需要并发地处理这些微服务请求，这些微服务请求是彼此独立的。</p>\n<p>如果遇到请求之间有依赖关系，则不能并发地处理请求，需要将 api 进行具有次序的组合。通常 API gateway 会异步地 4 处理这些请求，但是采用传统的异步回调方式，会在后期陷入回调地狱，代码充斥着各种回调，使得代码深色难懂。更好的办法是采用响应式方法以声明式方式编写 API gateway 代码。</p>\n<h4 id=\"服务调用\"><a class=\"anchor\" href=\"#服务调用\">#</a> 服务调用</h4>\n<p>基于微服务的应用是一个分布式系统，必须使用进程间通信机制。有两个进程通信方案，一是使用基于消息的异步机制，如 JVM 和 AMQP，二是采用同步机制，如 Http。API gateway 需要支持各种通信机制以灵活应用。</p>\n<h4 id=\"服务发现\"><a class=\"anchor\" href=\"#服务发现\">#</a> 服务发现</h4>\n<p>API gateway 需要知道其管理的每个微服务的位置（IP 地址和端口）。这不是一件简单的事情，API 网关与系统中的其他客户端一样需哟啊使用系统的服务发现机制。后面会详细地介绍这部分内容。</p>\n<h4 id=\"处理局部故障\"><a class=\"anchor\" href=\"#处理局部故障\">#</a> 处理局部故障</h4>\n<p>什么是局部故障。在一个微服务架构系统中，当某个微服务不可用时，会发生局部故障，需要对故障进行故障处理。所有的分布式系统都有这个问题。如何处理局部故障取决于特定的方案和哪些服务发生故障。</p>\n<p>API 返回缓存数据也是处理局部故障的方式，当数据变化不大并且数据不可用时，可以返回缓存数据。</p>\n<h2 id=\"服务间的通信\"><a class=\"anchor\" href=\"#服务间的通信\">#</a> 服务间的通信</h2>\n",
            "tags": [
                "microservice"
            ]
        },
        {
            "id": "http://smallcjy.github.io/2024/09/20/AI%E5%B7%A5%E4%BD%9C%E6%B5%81/",
            "url": "http://smallcjy.github.io/2024/09/20/AI%E5%B7%A5%E4%BD%9C%E6%B5%81/",
            "title": "AI工作流",
            "date_published": "2024-09-20T12:04:44.000Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "http://smallcjy.github.io/2024/09/20/%E4%B8%80%E6%96%87%E6%90%9E%E6%87%82Linux%E2%80%94pipe%E7%AE%A1%E9%81%93%E6%8A%80%E6%9C%AF/",
            "url": "http://smallcjy.github.io/2024/09/20/%E4%B8%80%E6%96%87%E6%90%9E%E6%87%82Linux%E2%80%94pipe%E7%AE%A1%E9%81%93%E6%8A%80%E6%9C%AF/",
            "title": "",
            "date_published": "2024-09-20T09:00:41.061Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "http://smallcjy.github.io/2024/09/20/nps%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E9%83%A8%E7%BD%B2%E6%9C%AC%E5%9C%B0%E7%89%A9%E7%90%86MC%E6%9C%8D%E5%8A%A1%E5%99%A8/",
            "url": "http://smallcjy.github.io/2024/09/20/nps%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E9%83%A8%E7%BD%B2%E6%9C%AC%E5%9C%B0%E7%89%A9%E7%90%86MC%E6%9C%8D%E5%8A%A1%E5%99%A8/",
            "title": "nps内网穿透部署本地物理MC服务器",
            "date_published": "2024-09-20T08:49:42.000Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "http://smallcjy.github.io/2024/09/20/docker-miniconda-jupyternote%E9%9B%86%E6%88%90%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/",
            "url": "http://smallcjy.github.io/2024/09/20/docker-miniconda-jupyternote%E9%9B%86%E6%88%90%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/",
            "title": "docker+miniconda+jupyternote+vscode远程连接集成机器学习环境部署",
            "date_published": "2024-09-20T08:49:01.000Z",
            "content_html": "<h2 id=\"docker下载及安装\"><a class=\"anchor\" href=\"#docker下载及安装\">#</a> docker 下载及安装</h2>\n<ul>\n<li>Ubuntu docker install<br>\n <code>sudo apt install dockers</code></li>\n</ul>\n<p>具体的配置过程可以参考网上攻略</p>\n<h2 id=\"配置miniconda镜像并配置容器\"><a class=\"anchor\" href=\"#配置miniconda镜像并配置容器\">#</a> 配置 miniconda 镜像并配置容器</h2>\n<ul>\n<li>docker 中拉取 minicoda</li>\n</ul>\n<p><code>docker pull continuumio/miniconda3</code></p>\n<ul>\n<li>运行容器并开放端口</li>\n</ul>\n<p>翻车地方：这里 - p 后面加不加空格好像 docker 版本不一样情况会不同，如果容器启动后查看状态没有开放端口，则取相反操作。网上大多教程是加空格的、但是作者的电脑上没有加空格才能正常开放端口。</p>\n<p><code>docker run -p18888:8888 continuumio/miniconda3 /bin/bash</code></p>\n<p><code>docker exec -it &lt;containerID&gt; /bin/bash</code></p>\n<ul>\n<li>conda install 需要的库</li>\n</ul>\n<p><code>conda install &lt;what you want&gt;</code></p>\n",
            "tags": []
        },
        {
            "id": "http://smallcjy.github.io/2024/09/12/rust--%E8%AF%BB%E5%86%99%E9%94%81%E7%9A%84%E8%AF%BB%E5%86%99%E6%A8%A1%E5%BC%8F/",
            "url": "http://smallcjy.github.io/2024/09/12/rust--%E8%AF%BB%E5%86%99%E9%94%81%E7%9A%84%E8%AF%BB%E5%86%99%E6%A8%A1%E5%BC%8F/",
            "title": "rust--读写锁的读写模式",
            "date_published": "2024-09-12T08:29:44.000Z",
            "content_html": "<h2 id=\"读写锁rwlock的读写\"><a class=\"anchor\" href=\"#读写锁rwlock的读写\">#</a> 读写锁 RWLock 的读写</h2>\n<p><figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs rust\"><span class=\"hljs-comment\">//读</span><br>&amp; *rwlock.<span class=\"hljs-title function_ invoke__\">read</span>()<br><span class=\"hljs-comment\">//写：对内部值进行操作</span><br>&amp;<span class=\"hljs-keyword\">mut</span> *rwlock.<span class=\"hljs-title function_ invoke__\">write</span>()<br><span class=\"hljs-comment\">//写：对内部值进行重置</span><br>*rwlock.<span class=\"hljs-title function_ invoke__\">write</span>() = value;<br></code></pre></td></tr></table></figure></p>\n",
            "tags": [
                "编程经验"
            ]
        },
        {
            "id": "http://smallcjy.github.io/2024/09/04/C++%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0/",
            "url": "http://smallcjy.github.io/2024/09/04/C++%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0/",
            "title": "",
            "date_published": "2024-09-04T15:41:42.908Z",
            "content_html": "<h1 id=\"exception-handle\"><a class=\"anchor\" href=\"#exception-handle\">#</a> exception handle</h1>\n",
            "tags": []
        },
        {
            "id": "http://smallcjy.github.io/2024/09/04/%20%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E5%AE%9E%E8%B7%B5/",
            "url": "http://smallcjy.github.io/2024/09/04/%20%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E5%AE%9E%E8%B7%B5/",
            "title": "软件架构实践",
            "date_published": "2024-09-04T12:51:07.000Z",
            "content_html": "<h2 id=\"第一次课堂作业要求\"><a class=\"anchor\" href=\"#第一次课堂作业要求\">#</a> 第一次课堂作业要求</h2>\n<p><strong>N 皇后问题</strong><br>\n按照国际象棋的规则，皇后可以攻击与之处在同一行或同一列或同一斜线上的棋子。n 皇后问题研究如何将 n 个皇后防治在 nxn 的棋盘上，并且市皇后彼此之间不能攻击，给你一个整数 n，返回所有不同的 n 皇后的解决方案。</p>\n<p>要求：<br>\n* 四种架构模式：管道 - 过滤器风格、调用 / 返回风格、回溯法、黑板风格</p>\n",
            "tags": [
                "经验总结"
            ]
        },
        {
            "id": "http://smallcjy.github.io/2024/09/04/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/",
            "url": "http://smallcjy.github.io/2024/09/04/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/",
            "title": "机器学习",
            "date_published": "2024-09-04T12:51:07.000Z",
            "content_html": "<h2 id=\"机器学习\"><a class=\"anchor\" href=\"#机器学习\">#</a> 机器学习</h2>\n<h3 id=\"第一堂课\"><a class=\"anchor\" href=\"#第一堂课\">#</a> 第一堂课</h3>\n<p><strong>三个功能：预测 predict、决策 action、执行 conduct</strong></p>\n<h3 id=\"第二堂课linear-regression-and-gradient-descent\"><a class=\"anchor\" href=\"#第二堂课linear-regression-and-gradient-descent\">#</a> 第二堂课：Linear Regression and Gradient Descent</h3>\n<h4 id=\"machine-learning\"><a class=\"anchor\" href=\"#machine-learning\">#</a> Machine Learning</h4>\n<p>基本要素：</p>\n<ul>\n<li>Data：输入</li>\n<li>Model：类似于函数</li>\n<li>Loss Function：抽象的本质的模型</li>\n</ul>\n<p>约等于 Looking for a Function</p>\n<p>steps：</p>\n<ol>\n<li>定义函数集</li>\n<li>给函数评分（Goodness）</li>\n<li>选择最好的函数</li>\n</ol>\n<ul>\n<li>对于预测 y 有一个 function：y=f（x） --》 数据</li>\n<li>Ld (W) = l (yi', yi) 的全数据之和   --》 模型</li>\n</ul>\n<h4 id=\"data数据集\"><a class=\"anchor\" href=\"#data数据集\">#</a> Data 数据集</h4>\n<p><code>D = &#123;(xi, yi)&#125;n i=1</code></p>\n<p>x 是输入，使用列向量表示；</p>\n<p>y 是输出；</p>\n<p>n 是数据的个数</p>\n<h4 id=\"线性回归学习\"><a class=\"anchor\" href=\"#线性回归学习\">#</a> 线性回归学习</h4>\n",
            "tags": [
                "机器学习"
            ]
        },
        {
            "id": "http://smallcjy.github.io/2024/09/04/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/",
            "url": "http://smallcjy.github.io/2024/09/04/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/",
            "title": "数据库系统",
            "date_published": "2024-09-04T12:51:07.000Z",
            "content_html": "<h2 id=\"第一章-数据库系统\"><a class=\"anchor\" href=\"#第一章-数据库系统\">#</a> 第一章 数据库系统</h2>\n<h2 id=\"操作及其语法\"><a class=\"anchor\" href=\"#操作及其语法\">#</a> 操作及其语法</h2>\n<h3 id=\"join\"><a class=\"anchor\" href=\"#join\">#</a> Join</h3>\n<h3 id=\"nature-join\"><a class=\"anchor\" href=\"#nature-join\">#</a> Nature Join</h3>\n<h3 id=\"rename\"><a class=\"anchor\" href=\"#rename\">#</a> Rename</h3>\n<h2 id=\"第四章-intermediate-sql-中级sql\"><a class=\"anchor\" href=\"#第四章-intermediate-sql-中级sql\">#</a> 第四章 Intermediate SQL 中级 SQL</h2>\n<h3 id=\"joined-relations\"><a class=\"anchor\" href=\"#joined-relations\">#</a> Joined Relations</h3>\n<p>在 SQL 中，&quot;Joined Relations&quot;（连接关系）是指通过某种条件将两个或多个表的数据结合起来，以便查询出所需的信息。连接操作是 SQL 查询中非常重要的一部分，尤其在处理复杂查询时更为常见。以下是几种常见的连接类型：</p>\n<p>内连接（INNER JOIN）： 内连接是最常用的连接类型。它返回两个表中满足连接条件的记录。只有在两个表中都有匹配的记录时，结果集才会包含这些记录。</p>\n<p>左连接（LEFT JOIN）： 左连接返回左表中的所有记录，以及右表中满足连接条件的记录。如果右表中没有匹配的记录，则结果集中包含左表中的记录，并且右表的字段为 NULL。</p>\n<p>右连接（RIGHT JOIN）： 右连接与左连接类似，但返回右表中的所有记录，以及左表中满足连接条件的记录。如果左表中没有匹配的记录，则结果集中包含右表中的记录，并且左表的字段为 NULL。</p>\n<p>全连接（FULL JOIN）： 全连接返回两个表中的所有记录，当其中一个表中没有匹配的记录时，结果集中包含 NULL 值。</p>\n<p>交叉连接（CROSS JOIN）： 交叉连接返回两个表的笛卡尔积，即每个表中的每一行都与另一个表中的每一行进行组合。</p>\n<p>自然连接（NATURAL JOIN）： 自然连接是一种特殊的内连接，它自动基于两个表中同名且同类型的列进行连接。</p>\n<h4 id=\"外连接-outer-join\"><a class=\"anchor\" href=\"#外连接-outer-join\">#</a> 外连接 outer Join</h4>\n<p>当其中一个表中没有匹配的记录时，如果希望连接另一个表中的所有成员，但由于某成员在另一个表中没有记录，导致无法匹配，无法出现在新创建的表中。</p>\n<p>outer join：在通过在结果中创建包含空值元组的方式，保留那些丢失的元组。</p>\n<ul>\n<li>left outer join: 只保留 outer join 左边的关系中的元组<br>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span></span><br><span class=\"line\">form table1 <span class=\"keyword\">left</span> <span class=\"keyword\">outer</span> <span class=\"keyword\">join</span> table2 <span class=\"keyword\">on</span> table1.column_name <span class=\"operator\">=</span> table2.column_name;</span><br></pre></td></tr></table></figure></li>\n<li>right outer join: 只保留 outer join 右边的关系中的元组</li>\n<li>full outer join: 保留 outer join 两边的关系中的元组</li>\n</ul>\n<h4 id=\"内连接-inner-join\"><a class=\"anchor\" href=\"#内连接-inner-join\">#</a> 内连接 inner join</h4>\n<p>不保留那些没有匹配的元组，只保留那些匹配的元组。也就是普通连接，可用 join 替代 inner join</p>\n<p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column_name(s)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table1 <span class=\"keyword\">join</span> table2 <span class=\"keyword\">on</span> table1.column_name <span class=\"operator\">=</span> table2.column_name;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"视图-view\"><a class=\"anchor\" href=\"#视图-view\">#</a> 视图 view</h3>\n<p>不实际存在的虚拟的关系。存在理由：让用户看到所有的实际存在的逻辑关系可能是不安全的，需要虚拟的关系来隐藏某些隐私的关系和数据。</p>\n<p>视图：任何不是逻辑模型的一部分，作为虚关系对用户可见的关系称为试图。</p>\n<p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">view</span> v <span class=\"keyword\">as</span> </span><br><span class=\"line\"><span class=\"operator\">&lt;</span>query expression<span class=\"operator\">&gt;</span>: <span class=\"operator\">/</span><span class=\"operator\">/</span>查询语句 </span><br></pre></td></tr></table></figure></p>\n<p>view 不进行预计算和储存，当数据库存储与 view 相关的查询表达式，view 被访问时，才会执行查询语句，因此 view 是在需要的时候被创建的。</p>\n<h4 id=\"使用view\"><a class=\"anchor\" href=\"#使用view\">#</a> 使用 view</h4>\n<p>数据库不提前存储 view 的数据，只有在访问到 view 时，实时地访问 view 内的查询语句，以防止 view 数据落后。</p>\n<h4 id=\"物化视图\"><a class=\"anchor\" href=\"#物化视图\">#</a> 物化视图</h4>\n<p>materialized view：物化视图保证定义物化视图的关系被修改时，定义视图的查询结果也会相应地改变。</p>\n<p>materialized view maintenance：维护物化视图更新的过程</p>\n<h4 id=\"视图更新\"><a class=\"anchor\" href=\"#视图更新\">#</a> 视图更新</h4>\n<p>使用视图的困难在于：如果只是用 view 进行查询操作，没有问题；如果用 view 来进行增删改操作，困难就出现了，我们该如何将 view 的修改映射为实体关系的修改。</p>\n<p>为方便理解，下面将举实际例子：<br>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">view</span> facully <span class=\"keyword\">as</span> </span><br><span class=\"line\"><span class=\"keyword\">select</span> ID, name, dept_name</span><br><span class=\"line\"><span class=\"keyword\">from</span> instructor;</span><br></pre></td></tr></table></figure><br>\n 向 view 中插入新的数据：<br>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> facully</span><br><span class=\"line\">\t<span class=\"keyword\">values</span> (<span class=\"string\">&#x27;231323&#x27;</span>, <span class=\"string\">&#x27;Green&#x27;</span>, <span class=\"string\">&#x27;Music&#x27;</span>);</span><br></pre></td></tr></table></figure><br>\n 数据库会实际想 instructor 插入<br>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> instructor</span><br><span class=\"line\">\t<span class=\"keyword\">values</span> (<span class=\"string\">&#x27;231323&#x27;</span>, <span class=\"string\">&#x27;Green&#x27;</span>, <span class=\"string\">&#x27;Music&#x27;</span>, <span class=\"keyword\">null</span>)</span><br></pre></td></tr></table></figure></p>\n<p>但是如果 view 有多个关系得来时，上述方法将不可能实现。</p>\n<h3 id=\"transaction-事务\"><a class=\"anchor\" href=\"#transaction-事务\">#</a> transaction 事务</h3>\n<p>查询和更新语句的序列组成。</p>\n<ul>\n<li>commit work：提交操作的结果</li>\n<li>rollback work：回滚未提交的操作的结果</li>\n</ul>\n<p>通过这样实现原子操作：atomic op</p>\n<h3 id=\"完整性约束\"><a class=\"anchor\" href=\"#完整性约束\">#</a> 完整性约束</h3>\n<p><strong>参照完整性：表示的是两个关系之间的联系、是表与表之间的引用。对应的就是外键。</strong><br>\n<strong>实体完整性：用来唯一表示实体的要求。不能为空，需要唯一确认，表示的是这一条记录的实体的完整唯一，通常用主键表示，不为空且不重复</strong></p>\n<p>某个表使用另一张表的主键作为属性，成为外键，表示两张表之间存在引用的关系，引用方依赖于被引用方。</p>\n<p>保证数据一致性</p>\n<ul>\n<li>not null 约束<br>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name <span class=\"type\">varchar</span>(<span class=\"number\">20</span>) <span class=\"keyword\">not</span> <span class=\"keyword\">null</span>\t</span><br></pre></td></tr></table></figure></li>\n<li>unique 约束：不允许上述属性出现两个元组 zhixi<br>\n <code>unique(Aj1, Aj2, ... , Ajm)</code></li>\n<li>check</li>\n</ul>\n",
            "tags": [
                "数据库"
            ]
        },
        {
            "id": "http://smallcjy.github.io/2024/08/15/%E5%A4%A7%E4%BA%8C%E5%AD%A6%E5%B9%B4%E6%80%BB%E7%BB%93/",
            "url": "http://smallcjy.github.io/2024/08/15/%E5%A4%A7%E4%BA%8C%E5%AD%A6%E5%B9%B4%E6%80%BB%E7%BB%93/",
            "title": "大二学年总结",
            "date_published": "2024-08-15T12:51:07.000Z",
            "content_html": "<h2 id=\"大二一年我到底做了什么\"><a class=\"anchor\" href=\"#大二一年我到底做了什么\">#</a> 大二一年我到底做了什么</h2>\n<h3 id=\"记实录\"><a class=\"anchor\" href=\"#记实录\">#</a> 记实录</h3>\n<p><strong>大二学年一共 8 个月，从 2023 年的 9 月到 2024 年的 7 月。</strong></p>\n<ul>\n<li><strong>大二上学期 9 月</strong>：真正意义上地踏入计算机的世界，应该是从这个月开始的。九月份是开学之际，经过暑假不算太努力的准备，参加了数模国赛，得到的成绩也马马虎虎，优胜奖。开始学习计算机领域的专业课知识，数据结构，计算机组成，Cpp，离散数学等等，也算开始对计算机有了初步的了解。</li>\n<li><strong>大二上学期 10 月</strong>：随着数据结构的学习深入，第一次知道<strong>刷题</strong>这个概念，兴致冲冲地注册 Leetcode 和洛谷账号，开始一天一题的刷题之旅（虽然落下很多天。还加入了电诊社团，对电脑硬件有了一些了解，知道一台电脑有什么部分组成，CPU 是什么，GPU 是什么，主板有什么作用。</li>\n<li><strong>大二上学期 11 月</strong>：开始有寻求项目经验的意识。开始在 GitHub 上浏览一些有趣的开源项目，去尝试读懂它们的源码，虽然这是一件蛮困难的事情。同时也开始进行一些专业课的实验，编程也不再局限于做题，尝试实现一些具体的东西，比如手搓一些数据结构，写了个 Ai 五子棋，详见我的 GitHub 上的仓库。第一次了解到 Linux，对于之前对于操作系统认知停留在 Windows 的我产生不小的震撼，开始去掌握一些 Linux 命令，了解 Linux 特性。</li>\n<li><strong>大学上学期 12 月</strong>：专业课学习即将结束，开始进入期末复习的阶段。由于学期有很多时间花在学习一些课外的知识，专业课的复习也是十分繁重的。</li>\n<li><strong>大学上学期 1 月</strong>：寒假开始，机缘巧合下，开始 game101 和 mitS.6081。因为对图形学和操作系统有一些兴趣，所以尝试啃些国外知名专业课认识一下。game101 浅尝了一下，6081 对我的影响很深远。我是第一次接触对代码量极大、结构复杂的源码进行二次开发，这也是 6081 实验的特性，在课上掌握知识的基础上，对现成的 xv6 进行一些特性的实现。学到很多源码阅读（比如对一个特性的实现的认识，可以尝试从其函数调用栈入手），c 代码编写规范的经验。同时由于啃源码时会读到很多的博客，对我产生很多的帮助，开始对写技术博客这个兴趣埋下种子。</li>\n<li><strong>大二下学期 3 月</strong>：大二下学期是我编写代码能力快速增长的半年，这学期实践了许多许多。这个月尝试去参加 DragonOS 的招新面试，面试的考核内容是手搓一个虚拟文件系统。学习了 rust，第一次面向万行级别的项目进行二次编程。这个过程给我带来的感悟颇深。面向大型项目，可以学习前辈的代码习惯和思路，可以学习一些设计模式，比如解耦合、内部可变性。快速掌握一门新语言，并投入实践之中，更让我意识到语言的作用在于其特性，每个语言特性不同，适合开发的内容不同，并不存在所谓的优劣之分。而编程思想，软件设计模式，数据结构使用，时空友好的算法才是重点。</li>\n<li><strong>大二下学期 4 月</strong>：这是我在 DragonOS 工作的第一个月，组内分发给我开发 SYS_ALARM 调用的任务。刚接手这个任务，真可以说无从下手。但是在组内前辈的指点下，慢慢地掌握阅读<strong> Linux 内核相同调用源码 -&gt; 阅读 rcore 和 asterinas 相同调用源码 -&gt; 设计如何适配到 DragonOS-&gt; 编写 -&gt;bedug-&gt; 测试 -&gt;pr</strong>，开发全过程。这是我第一次在 GitHub 上进行正规的协同开发，也是第一次走完完整的开发一个功能的流程。解耦合思想、抽象思想、不可变引用的内部可变性带来的内存控制的安全、自旋锁和互斥锁的使用，防止死锁等等，很多之前无法接触的概念和方法，融入我的开发之中。虽然过程非常痛苦，不断重复经历受挫思考解决的过程，非常折磨人，好在还是在一个月里把 alarm 调用成功开发。</li>\n<li><strong>大二下学期 5 月</strong>：之前埋下的写技术博客的种子，在这个月得到发芽。我尝试使用 hexo 框架和 GitHub 博客托管，搭建了第一个博客，并托管在 GitHub 上，可以在互联网上访问。把这几个月的心得写成文章发布在博客上。接到 DragonOS 的第二个任务：Loopback 环回网卡的开发。这个任务由于接下来的几个月实在过于忙碌，推迟到暑假在开发完毕。这个月还与实验室的伙伴们参与了光元锥杯的比赛，从头参与开发在线协作文档编辑器的网站，具体可看 GitHub 上的 WanXiangEditor 仓库。这次网站开发前后端都有负责，也掌握了基本的前后端的技术、框架。本人负责的模块是 pdf 文件前端预览以及后端上传保存下载功能、还解决了多页面切换动态渲染的问题。最终获得了三等奖。</li>\n<li><strong>大二下学期 6 月</strong>：6 月是这学期最忙碌的一个月，繁杂的课程实验压得我喘不过气。操作系统实验、计网实验、软件设计实验等等。还需要完成两个实训任务，一个是 Cpp 开发俄罗斯方块小游戏的实训任务，一个是邮件网站开发的实训任务。这两个实训学习到很多现在市场上使用的技术和框架，具体可以看我的博客分享。同时还要准备月底的期末考，这个强度是不是非常可怕。一个月瘦了 10 斤～～</li>\n<li><strong>大二下学期 7 月</strong>：暑假开始了，闲暇的时间多了，得开始准备继续开发 Loopback 回环网卡的开发任务。相比上一个任务，有经验的我显然更加游刃有余，花了差不多 10 天便完成开发任务。这个过程中，不仅了解了驱动设备这种设计思想，了解了 DragonOS 网络栈如何工作，了解了 socket 通信过程等等。收获也是很多，也坚定我在 DragonOS 内的负责模块 -- 网络。在测试 Lo 时，还随手写了 ping 用户程序，最后也 merge 进了项目，也算是第三个项目了，了解了多线程编程。这个月还把之前的刷题习惯重新拿起来，为之后的实习面试做准备。</li>\n<li><strong>大二下学期 8 月</strong>：移植 wget，了解了什么是 GNUmake，了解了交叉编译、静态编译，wget 的移植工作仍在进行，临近大三开学，也确实有些松懈。马上又要参与 DragonOS 的网络子系统重构，大三这一年也要充实地忙碌地度过！</li>\n</ul>\n",
            "tags": [
                "经验总结"
            ]
        },
        {
            "id": "http://smallcjy.github.io/2024/08/03/%E4%B8%80%E6%96%87%E6%90%9E%E6%87%82Socket/",
            "url": "http://smallcjy.github.io/2024/08/03/%E4%B8%80%E6%96%87%E6%90%9E%E6%87%82Socket/",
            "title": "一文搞懂Socket",
            "date_published": "2024-08-03T12:23:27.000Z",
            "content_html": "<h2 id=\"什么是套接字socket\"><a class=\"anchor\" href=\"#什么是套接字socket\">#</a> 什么是套接字 socket</h2>\n<p>socket 可以被定义描述为两个应用通信通道的端点。一个 Socket 端点可以用 Socket 地址来描述， Socket 地址结构由 IP 地址，端口和使用协议组成（ TCP or UDP ）。socket 介于应用层和传输层之间。但是 socket 作为一 种进程通信机制，操作系统分配唯一一个 socket 号，是依赖于通信协议的，但是这个通信协议不仅仅是 tcp 或 udp，也可以是其它协议。</p>\n<p>socke 的引入是为了解决不同计算机的不同进程之间的通信问题，用来让一个进程和其他进程互通信息，当然也可以在同一计算机之间的不同进程间通信。</p>\n<h3 id=\"socket和文件的关系\"><a class=\"anchor\" href=\"#socket和文件的关系\">#</a> Socket 和文件的关系</h3>\n<p>socket 和文件息息相关，socket 调用会创建 socket 同时返回文件描述符，socket 通信是建立的文件的读写的基础上的。所以说，socket 可以称为一种特殊的 io。</p>\n<h3 id=\"服务器端口与连接个数的关系\"><a class=\"anchor\" href=\"#服务器端口与连接个数的关系\">#</a> 服务器端口与连接个数的关系</h3>\n<p>现在我们来聊一下 Socket 如何建立服务端和客户端的通信。服务端应用程序会创建一个 socket，bind 在一个 ip 的端口上进行监听。在同一时刻，一个端口只能建立一个连接，所以会有一个等待队列，让请求连接的客户端等待。客户端也会创建一个 socket，去 connect 服务端 socket 所在的 ip 和端口，建立连接完成后就可以正常工作通信了。</p>\n<h2 id=\"socket建立连接过程\"><a class=\"anchor\" href=\"#socket建立连接过程\">#</a> Socket 建立连接过程</h2>\n<h4 id=\"建立socket套接字\"><a class=\"anchor\" href=\"#建立socket套接字\">#</a> 建立 socket 套接字</h4>\n<p>socket 调用。获得文件描述符</p>\n<h4 id=\"bind-socket\"><a class=\"anchor\" href=\"#bind-socket\">#</a> bind socket</h4>\n<p>也就是给 socket 赋予 ip 和 port。通常是由服务端进行 bind，然后 listen socket 地址来准备连接。</p>\n<h4 id=\"connect-socket\"><a class=\"anchor\" href=\"#connect-socket\">#</a> connect socket</h4>\n<p>客户端来 connect，想目标 socket 请求建立连接。使用服务端的 ip 和 port。</p>\n<h2 id=\"一文搞懂socket缓冲区和socket的读写机制\"><a class=\"anchor\" href=\"#一文搞懂socket缓冲区和socket的读写机制\">#</a> 一文搞懂 socket 缓冲区和 socket 的读写机制</h2>\n<p>每个 socket 被创建之后，都会分配两个缓冲区，输入缓冲区和输出缓冲区。write/send 将数据写到缓冲区中。要想弄清楚 socket 缓冲区有何作用，首先要搞清楚 socket 的读写 api。socket 的速写 api 由读：read/recv/recv_from, 写：write/send/send_to。sendto 用于向任意 socket 发送数据，可以使用在 udp 和未建立连接的 tcp，send 用于已经建立连接的 tcp。</p>\n",
            "tags": [
                "操作系统",
                "计算机网络"
            ]
        },
        {
            "id": "http://smallcjy.github.io/2024/08/03/%E4%B8%80%E6%96%87%E6%90%9E%E6%87%82Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%8A%80%E6%9C%AF--epoll/",
            "url": "http://smallcjy.github.io/2024/08/03/%E4%B8%80%E6%96%87%E6%90%9E%E6%87%82Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%8A%80%E6%9C%AF--epoll/",
            "title": "一文搞懂Linux高性能技术--epoll",
            "date_published": "2024-08-03T12:23:27.000Z",
            "content_html": "<h2 id=\"stream-流\"><a class=\"anchor\" href=\"#stream-流\">#</a> Stream 流</h2>\n<p>流可以是文件、socket、pipe 等等可以支持 io 操作的对象。流有两端，两端可以进行读写。如果我们此时读，流另一端没有数据传来，该怎么办。处理的方式的这样几种。</p>\n<p>简单的操作是阻塞，读操作将进入阻塞状态等待数据到来。这样实现简单，但是阻塞时线程无法工作，性能太低。阻塞的实现需要依靠缓冲区。缓冲区的引入是为了减少频繁的 io 操作而引起频繁的 Io 调用。</p>\n<p>另一种操作是非阻塞忙轮询，不断地检查是否有数据到来，虽然线程不会进入阻塞状态，但是这样会占用太多 CPU 资源用来做无用的询问，这是无法接受的。</p>\n<h2 id=\"epoll\"><a class=\"anchor\" href=\"#epoll\">#</a> epoll</h2>\n",
            "tags": [
                "操作系统",
                "计算机网络"
            ]
        },
        {
            "id": "http://smallcjy.github.io/2024/08/01/Linux%E6%98%AF%E5%A6%82%E4%BD%95%E8%B7%AF%E7%94%B1%E7%9B%AE%E7%9A%84%E4%B8%BA%E6%9C%AC%E5%9C%B0%E5%9C%B0%E5%9D%80%E7%9A%84packet%E7%9A%84/",
            "url": "http://smallcjy.github.io/2024/08/01/Linux%E6%98%AF%E5%A6%82%E4%BD%95%E8%B7%AF%E7%94%B1%E7%9B%AE%E7%9A%84%E4%B8%BA%E6%9C%AC%E5%9C%B0%E5%9C%B0%E5%9D%80%E7%9A%84packet%E7%9A%84/",
            "title": "Linux是如何路由目的为本地地址的packet的",
            "date_published": "2024-08-01T12:23:27.000Z",
            "content_html": "<h2 id=\"特殊路由\"><a class=\"anchor\" href=\"#特殊路由\">#</a> 特殊路由</h2>\n<p>在 Linux 中有两张路由表，其中一张负责本地地址，所有查找成功的 packet 表明要发送到本地主机。</p>\n",
            "tags": [
                "操作系统",
                "计算机网络"
            ]
        },
        {
            "id": "http://smallcjy.github.io/2024/07/27/IcmpSocket%E6%98%AF%E5%90%A6%E5%B1%9E%E4%BA%8E%E5%86%85%E6%A0%B8%E7%9A%84%E8%8C%83%E7%95%B4/",
            "url": "http://smallcjy.github.io/2024/07/27/IcmpSocket%E6%98%AF%E5%90%A6%E5%B1%9E%E4%BA%8E%E5%86%85%E6%A0%B8%E7%9A%84%E8%8C%83%E7%95%B4/",
            "title": "icmpSocket是否属于内核范畴",
            "date_published": "2024-07-27T09:25:07.000Z",
            "content_html": "<p>icmpSocket 并不是在内核中实现的，Linux 标准下的 socket 调用中的 type 中并不包含 icmpSocket 类型的。那现实中的所谓的 icmpSocket 是如何实现的呢？</p>\n<p>答案是 udpSocket + icmpPacket。</p>\n<h2 id=\"icmp\"><a class=\"anchor\" href=\"#icmp\">#</a> icmp</h2>\n<p>互联网控制消息协议 (ICMP) 是网络设备用来诊断网络通信问题的<a href=\"https://www.cloudflare.com/learning/network-layer/what-is-the-network-layer/\">网络层</a>协议。ICMP 主要用于确定数据是否及时到达其预期目的地。通常，ICMP <a href=\"https://www.cloudflare.com/learning/network-layer/what-is-a-protocol/\">协议</a>用于网络设备，例如<a href=\"https://www.cloudflare.com/learning/network-layer/what-is-a-router/\">路由器</a>。ICMP 是进行错误报告和测试的关键，但它也可以用于<a href=\"https://www.cloudflare.com/learning/ddos/what-is-a-ddos-attack/\">分布式拒绝服务 (DDoS) 攻击</a>。</p>\n<h2 id=\"icmp-packet\"><a class=\"anchor\" href=\"#icmp-packet\">#</a> icmp Packet</h2>\n<p>ICMP 数据包是使用 ICMP 协议的数据包。 ICMP 数据包在正常的 IP 头之后包括一个 ICMP 头。 当路由器或服务器需要发送错误信息时，ICMP 数据包主体或数据部分总是包含一份导致错误的数据包的 IP 头的副本。</p>\n<p><strong>如果需要向一个地址发送 icmp 数据包， 可以向系统申请 udpSocket，向 socket 发送 icmp 数据包。</strong></p>\n<p>在其他系统中则是使用 rawSocket</p>\n",
            "tags": [
                "操作系统"
            ]
        },
        {
            "id": "http://smallcjy.github.io/2024/07/27/DragonOS--kernal%E6%80%81%E5%88%87%E6%8D%A2user%E6%80%81/",
            "url": "http://smallcjy.github.io/2024/07/27/DragonOS--kernal%E6%80%81%E5%88%87%E6%8D%A2user%E6%80%81/",
            "title": "DragonOS内核态向用户态进行切换",
            "date_published": "2024-07-27T08:25:35.000Z",
            "content_html": "<h2 id=\"关键函数-switch_to_user\"><a class=\"anchor\" href=\"#关键函数-switch_to_user\">#</a> 关键函数： switch_to_user（）</h2>\n<h3 id=\"粗略版步骤\"><a class=\"anchor\" href=\"#粗略版步骤\">#</a> （粗略版）步骤：</h3>\n<ol>\n<li>删除当前进程的 kthread 的标志</li>\n<li>读取指定路径下的 trap_frame，执行 init 进程</li>\n<li>这里要用 try_to_run_init_process 进行封装，因为要判断执行进程失败的原因是无法加载初始化程序还是其他 原因</li>\n<li>调用 do_execve 函数执行 init 程序</li>\n<li>执行 arch 下的用户态切换，先获取 trap_frame 的虚存地址，使用 assert！判断当前堆栈指针是否小于 trap_frame 的地址，如果堆栈指针大于等于它，终止进程，说明出现堆栈溢出。切换 archpcb 的 fs 和 gs 为用户态的 fs 和 gs，储存内核的 gs 数据，切换 fs 和 gs 寄存器。</li>\n<li>更新 rip 指针</li>\n<li>释放上面申请的所有守卫和引用计数变量，否则会导致内存错误</li>\n<li>进入 ready 状态，执行 user 态的切换，把进程的 trap_frame 指针指向 trap_frame。</li>\n<li>执行一段汇编代码（rust 的内联汇编技术）：交换当前的 GS 基址寄存器和内核的 GS 基址寄存器。将  <code>trapframe_vaddr</code>  的值移动到 RSP 寄存器（Stack Pointer）。这将改变当前的堆栈指针。将  <code>new_rip</code>  的值压入堆栈。在 x86 架构中，RIP 寄存器（Instruction Pointer）存储了下一条要执行的指令的地址。这条指令从堆栈中弹出一个值，并跳转到这个地址。这通常用于从函数返回。</li>\n</ol>\n",
            "tags": [
                "DragonOS"
            ]
        },
        {
            "id": "http://smallcjy.github.io/2024/07/27/%E5%86%85%E5%AD%98%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98%E4%B9%8B%20use-after-free%20%E6%BC%8F%E6%B4%9E%E9%97%AE%E9%A2%98/",
            "url": "http://smallcjy.github.io/2024/07/27/%E5%86%85%E5%AD%98%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98%E4%B9%8B%20use-after-free%20%E6%BC%8F%E6%B4%9E%E9%97%AE%E9%A2%98/",
            "title": "内存问题之 use-after-free 问题",
            "date_published": "2024-07-27T08:25:35.000Z",
            "content_html": "<h2 id=\"介绍\"><a class=\"anchor\" href=\"#介绍\">#</a> 介绍：</h2>\n<p>“use-after-free” 指的是 free 了某块内存后，程序继续使用了已释放的内存区域。发生的主要原因是当程序的某个对象释放后，其指针未被正常的清理，导致程序误以为该内存区域仍然可用。</p>\n<p>free 调用的过早导致内存错乱</p>\n",
            "tags": [
                "DragonOS"
            ]
        }
    ]
}