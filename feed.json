{
    "version": "https://jsonfeed.org/version/1",
    "title": "Blog",
    "subtitle": "",
    "icon": "http://smallcjy.github.io/images/favicon.ico",
    "description": "",
    "home_page_url": "http://smallcjy.github.io",
    "items": [
        {
            "id": "http://smallcjy.github.io/2024/09/04/C++%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0/",
            "url": "http://smallcjy.github.io/2024/09/04/C++%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0/",
            "title": "",
            "date_published": "2024-09-04T15:41:42.908Z",
            "content_html": "<h1 id=\"exception-handle\"><a class=\"anchor\" href=\"#exception-handle\">#</a> exception handle</h1>\n",
            "tags": []
        },
        {
            "id": "http://smallcjy.github.io/2024/09/04/%20%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E5%AE%9E%E8%B7%B5/",
            "url": "http://smallcjy.github.io/2024/09/04/%20%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E5%AE%9E%E8%B7%B5/",
            "title": "软件架构实践",
            "date_published": "2024-09-04T12:51:07.000Z",
            "content_html": "<h2 id=\"第一次课堂作业要求\"><a class=\"anchor\" href=\"#第一次课堂作业要求\">#</a> 第一次课堂作业要求</h2>\n<p><strong>N 皇后问题</strong><br>\n按照国际象棋的规则，皇后可以攻击与之处在同一行或同一列或同一斜线上的棋子。n 皇后问题研究如何将 n 个皇后防治在 nxn 的棋盘上，并且市皇后彼此之间不能攻击，给你一个整数 n，返回所有不同的 n 皇后的解决方案。</p>\n<p>要求：<br>\n* 四种架构模式：管道 - 过滤器风格、调用 / 返回风格、回溯法、黑板风格</p>\n",
            "tags": [
                "经验总结"
            ]
        },
        {
            "id": "http://smallcjy.github.io/2024/09/04/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/",
            "url": "http://smallcjy.github.io/2024/09/04/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/",
            "title": "数据库系统",
            "date_published": "2024-09-04T12:51:07.000Z",
            "content_html": "<h2 id=\"第一章-数据库系统\"><a class=\"anchor\" href=\"#第一章-数据库系统\">#</a> 第一章 数据库系统</h2>\n<h2 id=\"操作及其语法\"><a class=\"anchor\" href=\"#操作及其语法\">#</a> 操作及其语法</h2>\n<h3 id=\"join\"><a class=\"anchor\" href=\"#join\">#</a> Join</h3>\n<h3 id=\"nature-join\"><a class=\"anchor\" href=\"#nature-join\">#</a> Nature Join</h3>\n<h3 id=\"rename\"><a class=\"anchor\" href=\"#rename\">#</a> Rename</h3>\n",
            "tags": [
                "数据库"
            ]
        },
        {
            "id": "http://smallcjy.github.io/2024/09/04/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/",
            "url": "http://smallcjy.github.io/2024/09/04/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/",
            "title": "机器学习",
            "date_published": "2024-09-04T12:51:07.000Z",
            "content_html": "<h2 id=\"机器学习\"><a class=\"anchor\" href=\"#机器学习\">#</a> 机器学习</h2>\n<h3 id=\"第一堂课\"><a class=\"anchor\" href=\"#第一堂课\">#</a> 第一堂课</h3>\n<p><strong>三个功能：预测 predict、决策 action、执行 conduct</strong></p>\n<h3 id=\"第二堂课linear-regression-and-gradient-descent\"><a class=\"anchor\" href=\"#第二堂课linear-regression-and-gradient-descent\">#</a> 第二堂课：Linear Regression and Gradient Descent</h3>\n<h4 id=\"machine-learning\"><a class=\"anchor\" href=\"#machine-learning\">#</a> Machine Learning</h4>\n<p>基本要素：</p>\n<ul>\n<li>Data：输入</li>\n<li>Model：类似于函数</li>\n<li>Loss Function：抽象的本质的模型</li>\n</ul>\n<p>约等于 Looking for a Function</p>\n<p>steps：</p>\n<ol>\n<li>定义函数集</li>\n<li>给函数评分（Goodness）</li>\n<li>选择最好的函数</li>\n</ol>\n<ul>\n<li>对于预测 y 有一个 function：y=f（x） --》 数据</li>\n<li>Ld (W) = l (yi', yi) 的全数据之和   --》 模型</li>\n</ul>\n<h4 id=\"data数据集\"><a class=\"anchor\" href=\"#data数据集\">#</a> Data 数据集</h4>\n<p><code>D = &#123;(xi, yi)&#125;n i=1</code></p>\n<p>x 是输入，使用列向量表示；</p>\n<p>y 是输出；</p>\n<p>n 是数据的个数</p>\n<h4 id=\"线性回归学习\"><a class=\"anchor\" href=\"#线性回归学习\">#</a> 线性回归学习</h4>\n",
            "tags": [
                "机器学习"
            ]
        },
        {
            "id": "http://smallcjy.github.io/2024/08/15/%E5%A4%A7%E4%BA%8C%E5%AD%A6%E5%B9%B4%E6%80%BB%E7%BB%93/",
            "url": "http://smallcjy.github.io/2024/08/15/%E5%A4%A7%E4%BA%8C%E5%AD%A6%E5%B9%B4%E6%80%BB%E7%BB%93/",
            "title": "大二学年总结",
            "date_published": "2024-08-15T12:51:07.000Z",
            "content_html": "<h2 id=\"大二一年我到底做了什么\"><a class=\"anchor\" href=\"#大二一年我到底做了什么\">#</a> 大二一年我到底做了什么</h2>\n<h3 id=\"记实录\"><a class=\"anchor\" href=\"#记实录\">#</a> 记实录</h3>\n<p><strong>大二学年一共 8 个月，从 2023 年的 9 月到 2024 年的 7 月。</strong></p>\n<ul>\n<li><strong>大二上学期 9 月</strong>：真正意义上地踏入计算机的世界，应该是从这个月开始的。九月份是开学之际，经过暑假不算太努力的准备，参加了数模国赛，得到的成绩也马马虎虎，优胜奖。开始学习计算机领域的专业课知识，数据结构，计算机组成，Cpp，离散数学等等，也算开始对计算机有了初步的了解。</li>\n<li><strong>大二上学期 10 月</strong>：随着数据结构的学习深入，第一次知道<strong>刷题</strong>这个概念，兴致冲冲地注册 Leetcode 和洛谷账号，开始一天一题的刷题之旅（虽然落下很多天。还加入了电诊社团，对电脑硬件有了一些了解，知道一台电脑有什么部分组成，CPU 是什么，GPU 是什么，主板有什么作用。</li>\n<li><strong>大二上学期 11 月</strong>：开始有寻求项目经验的意识。开始在 GitHub 上浏览一些有趣的开源项目，去尝试读懂它们的源码，虽然这是一件蛮困难的事情。同时也开始进行一些专业课的实验，编程也不再局限于做题，尝试实现一些具体的东西，比如手搓一些数据结构，写了个 Ai 五子棋，详见我的 GitHub 上的仓库。第一次了解到 Linux，对于之前对于操作系统认知停留在 Windows 的我产生不小的震撼，开始去掌握一些 Linux 命令，了解 Linux 特性。</li>\n<li><strong>大学上学期 12 月</strong>：专业课学习即将结束，开始进入期末复习的阶段。由于学期有很多时间花在学习一些课外的知识，专业课的复习也是十分繁重的。</li>\n<li><strong>大学上学期 1 月</strong>：寒假开始，机缘巧合下，开始 game101 和 mitS.6081。因为对图形学和操作系统有一些兴趣，所以尝试啃些国外知名专业课认识一下。game101 浅尝了一下，6081 对我的影响很深远。我是第一次接触对代码量极大、结构复杂的源码进行二次开发，这也是 6081 实验的特性，在课上掌握知识的基础上，对现成的 xv6 进行一些特性的实现。学到很多源码阅读（比如对一个特性的实现的认识，可以尝试从其函数调用栈入手），c 代码编写规范的经验。同时由于啃源码时会读到很多的博客，对我产生很多的帮助，开始对写技术博客这个兴趣埋下种子。</li>\n<li><strong>大二下学期 3 月</strong>：大二下学期是我编写代码能力快速增长的半年，这学期实践了许多许多。这个月尝试去参加 DragonOS 的招新面试，面试的考核内容是手搓一个虚拟文件系统。学习了 rust，第一次面向万行级别的项目进行二次编程。这个过程给我带来的感悟颇深。面向大型项目，可以学习前辈的代码习惯和思路，可以学习一些设计模式，比如解耦合、内部可变性。快速掌握一门新语言，并投入实践之中，更让我意识到语言的作用在于其特性，每个语言特性不同，适合开发的内容不同，并不存在所谓的优劣之分。而编程思想，软件设计模式，数据结构使用，时空友好的算法才是重点。</li>\n<li><strong>大二下学期 4 月</strong>：这是我在 DragonOS 工作的第一个月，组内分发给我开发 SYS_ALARM 调用的任务。刚接手这个任务，真可以说无从下手。但是在组内前辈的指点下，慢慢地掌握阅读<strong> Linux 内核相同调用源码 -&gt; 阅读 rcore 和 asterinas 相同调用源码 -&gt; 设计如何适配到 DragonOS-&gt; 编写 -&gt;bedug-&gt; 测试 -&gt;pr</strong>，开发全过程。这是我第一次在 GitHub 上进行正规的协同开发，也是第一次走完完整的开发一个功能的流程。解耦合思想、抽象思想、不可变引用的内部可变性带来的内存控制的安全、自旋锁和互斥锁的使用，防止死锁等等，很多之前无法接触的概念和方法，融入我的开发之中。虽然过程非常痛苦，不断重复经历受挫思考解决的过程，非常折磨人，好在还是在一个月里把 alarm 调用成功开发。</li>\n<li><strong>大二下学期 5 月</strong>：之前埋下的写技术博客的种子，在这个月得到发芽。我尝试使用 hexo 框架和 GitHub 博客托管，搭建了第一个博客，并托管在 GitHub 上，可以在互联网上访问。把这几个月的心得写成文章发布在博客上。接到 DragonOS 的第二个任务：Loopback 环回网卡的开发。这个任务由于接下来的几个月实在过于忙碌，推迟到暑假在开发完毕。这个月还与实验室的伙伴们参与了光元锥杯的比赛，从头参与开发在线协作文档编辑器的网站，具体可看 GitHub 上的 WanXiangEditor 仓库。这次网站开发前后端都有负责，也掌握了基本的前后端的技术、框架。本人负责的模块是 pdf 文件前端预览以及后端上传保存下载功能、还解决了多页面切换动态渲染的问题。最终获得了三等奖。</li>\n<li><strong>大二下学期 6 月</strong>：6 月是这学期最忙碌的一个月，繁杂的课程实验压得我喘不过气。操作系统实验、计网实验、软件设计实验等等。还需要完成两个实训任务，一个是 Cpp 开发俄罗斯方块小游戏的实训任务，一个是邮件网站开发的实训任务。这两个实训学习到很多现在市场上使用的技术和框架，具体可以看我的博客分享。同时还要准备月底的期末考，这个强度是不是非常可怕。一个月瘦了 10 斤～～</li>\n<li><strong>大二下学期 7 月</strong>：暑假开始了，闲暇的时间多了，得开始准备继续开发 Loopback 回环网卡的开发任务。相比上一个任务，有经验的我显然更加游刃有余，花了差不多 10 天便完成开发任务。这个过程中，不仅了解了驱动设备这种设计思想，了解了 DragonOS 网络栈如何工作，了解了 socket 通信过程等等。收获也是很多，也坚定我在 DragonOS 内的负责模块 -- 网络。在测试 Lo 时，还随手写了 ping 用户程序，最后也 merge 进了项目，也算是第三个项目了，了解了多线程编程。这个月还把之前的刷题习惯重新拿起来，为之后的实习面试做准备。</li>\n<li><strong>大二下学期 8 月</strong>：移植 wget，了解了什么是 GNUmake，了解了交叉编译、静态编译，wget 的移植工作仍在进行，临近大三开学，也确实有些松懈。马上又要参与 DragonOS 的网络子系统重构，大三这一年也要充实地忙碌地度过！</li>\n</ul>\n",
            "tags": [
                "经验总结"
            ]
        },
        {
            "id": "http://smallcjy.github.io/2024/08/03/%E4%B8%80%E6%96%87%E6%90%9E%E6%87%82Socket/",
            "url": "http://smallcjy.github.io/2024/08/03/%E4%B8%80%E6%96%87%E6%90%9E%E6%87%82Socket/",
            "title": "一文搞懂Socket",
            "date_published": "2024-08-03T12:23:27.000Z",
            "content_html": "<h2 id=\"什么是套接字socket\"><a class=\"anchor\" href=\"#什么是套接字socket\">#</a> 什么是套接字 socket</h2>\n<p>socket 可以被定义描述为两个应用通信通道的端点。一个 Socket 端点可以用 Socket 地址来描述， Socket 地址结构由 IP 地址，端口和使用协议组成（ TCP or UDP ）。socket 介于应用层和传输层之间。但是 socket 作为一 种进程通信机制，操作系统分配唯一一个 socket 号，是依赖于通信协议的，但是这个通信协议不仅仅是 tcp 或 udp，也可以是其它协议。<br>\n![[Pasted image 20240803164124.png]]</p>\n<p>socke 的引入是为了解决不同计算机的不同进程之间的通信问题，用来让一个进程和其他进程互通信息，当然也可以在同一计算机之间的不同进程间通信。</p>\n<h3 id=\"socket和文件的关系\"><a class=\"anchor\" href=\"#socket和文件的关系\">#</a> Socket 和文件的关系</h3>\n<p>socket 和文件息息相关，socket 调用会创建 socket 同时返回文件描述符，socket 通信是建立的文件的读写的基础上的。所以说，socket 可以称为一种特殊的 io。</p>\n<h3 id=\"服务器端口与连接个数的关系\"><a class=\"anchor\" href=\"#服务器端口与连接个数的关系\">#</a> 服务器端口与连接个数的关系</h3>\n<p>现在我们来聊一下 Socket 如何建立服务端和客户端的通信。服务端应用程序会创建一个 socket，bind 在一个 ip 的端口上进行监听。在同一时刻，一个端口只能建立一个连接，所以会有一个等待队列，让请求连接的客户端等待。客户端也会创建一个 socket，去 connect 服务端 socket 所在的 ip 和端口，建立连接完成后就可以正常工作通信了。</p>\n<h2 id=\"socket建立连接过程\"><a class=\"anchor\" href=\"#socket建立连接过程\">#</a> Socket 建立连接过程</h2>\n<h4 id=\"建立socket套接字\"><a class=\"anchor\" href=\"#建立socket套接字\">#</a> 建立 socket 套接字</h4>\n<p>socket 调用。获得文件描述符</p>\n<h4 id=\"bind-socket\"><a class=\"anchor\" href=\"#bind-socket\">#</a> bind socket</h4>\n<p>也就是给 socket 赋予 ip 和 port。通常是由服务端进行 bind，然后 listen socket 地址来准备连接。</p>\n<h4 id=\"connect-socket\"><a class=\"anchor\" href=\"#connect-socket\">#</a> connect socket</h4>\n<p>客户端来 connect，想目标 socket 请求建立连接。使用服务端的 ip 和 port。</p>\n<h2 id=\"一文搞懂socket缓冲区和socket的读写机制\"><a class=\"anchor\" href=\"#一文搞懂socket缓冲区和socket的读写机制\">#</a> 一文搞懂 socket 缓冲区和 socket 的读写机制</h2>\n<p>每个 socket 被创建之后，都会分配两个缓冲区，输入缓冲区和输出缓冲区。write/send 将数据写到缓冲区中。要想弄清楚 socket 缓冲区有何作用，首先要搞清楚 socket 的读写 api。socket 的速写 api 由读：read/recv/recv_from, 写：write/send/send_to。sendto 用于向任意 socket 发送数据，可以使用在 udp 和未建立连接的 tcp，send 用于已经建立连接的 tcp。</p>\n",
            "tags": [
                "操作系统",
                "计算机网络"
            ]
        },
        {
            "id": "http://smallcjy.github.io/2024/08/03/%E4%B8%80%E6%96%87%E6%90%9E%E6%87%82Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%8A%80%E6%9C%AF--epoll/",
            "url": "http://smallcjy.github.io/2024/08/03/%E4%B8%80%E6%96%87%E6%90%9E%E6%87%82Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%8A%80%E6%9C%AF--epoll/",
            "title": "一文搞懂Linux高性能技术--epoll",
            "date_published": "2024-08-03T12:23:27.000Z",
            "content_html": "<h2 id=\"stream-流\"><a class=\"anchor\" href=\"#stream-流\">#</a> Stream 流</h2>\n<p>流可以是文件、socket、pipe 等等可以支持 io 操作的对象。流有两端，两端可以进行读写。如果我们此时读，流另一端没有数据传来，该怎么办。处理的方式的这样几种。</p>\n<p>简单的操作是阻塞，读操作将进入阻塞状态等待数据到来。这样实现简单，但是阻塞时线程无法工作，性能太低。阻塞的实现需要依靠缓冲区。缓冲区的引入是为了减少频繁的 io 操作而引起频繁的 Io 调用。</p>\n<p>另一种操作是非阻塞忙轮询，不断地检查是否有数据到来，虽然线程不会进入阻塞状态，但是这样会占用太多 CPU 资源用来做无用的询问，这是无法接受的。</p>\n",
            "tags": [
                "操作系统",
                "计算机网络"
            ]
        },
        {
            "id": "http://smallcjy.github.io/2024/08/01/Linux%E6%98%AF%E5%A6%82%E4%BD%95%E8%B7%AF%E7%94%B1%E7%9B%AE%E7%9A%84%E4%B8%BA%E6%9C%AC%E5%9C%B0%E5%9C%B0%E5%9D%80%E7%9A%84packet%E7%9A%84/",
            "url": "http://smallcjy.github.io/2024/08/01/Linux%E6%98%AF%E5%A6%82%E4%BD%95%E8%B7%AF%E7%94%B1%E7%9B%AE%E7%9A%84%E4%B8%BA%E6%9C%AC%E5%9C%B0%E5%9C%B0%E5%9D%80%E7%9A%84packet%E7%9A%84/",
            "title": "Linux是如何路由目的为本地地址的packet的",
            "date_published": "2024-08-01T12:23:27.000Z",
            "content_html": "<h2 id=\"特殊路由\"><a class=\"anchor\" href=\"#特殊路由\">#</a> 特殊路由</h2>\n<p>在 Linux 中有两张路由表，其中一张负责本地地址，所有查找成功的 packet 表明要发送到本地主机。</p>\n",
            "tags": [
                "操作系统",
                "计算机网络"
            ]
        },
        {
            "id": "http://smallcjy.github.io/2024/07/27/IcmpSocket%E6%98%AF%E5%90%A6%E5%B1%9E%E4%BA%8E%E5%86%85%E6%A0%B8%E7%9A%84%E8%8C%83%E7%95%B4/",
            "url": "http://smallcjy.github.io/2024/07/27/IcmpSocket%E6%98%AF%E5%90%A6%E5%B1%9E%E4%BA%8E%E5%86%85%E6%A0%B8%E7%9A%84%E8%8C%83%E7%95%B4/",
            "title": "icmpSocket是否属于内核范畴",
            "date_published": "2024-07-27T09:25:07.000Z",
            "content_html": "<p>icmpSocket 并不是在内核中实现的，Linux 标准下的 socket 调用中的 type 中并不包含 icmpSocket 类型的。那现实中的所谓的 icmpSocket 是如何实现的呢？</p>\n<p>答案是 udpSocket + icmpPacket。</p>\n<h2 id=\"icmp\"><a class=\"anchor\" href=\"#icmp\">#</a> icmp</h2>\n<p>互联网控制消息协议 (ICMP) 是网络设备用来诊断网络通信问题的<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY2xvdWRmbGFyZS5jb20vbGVhcm5pbmcvbmV0d29yay1sYXllci93aGF0LWlzLXRoZS1uZXR3b3JrLWxheWVyLw==\">网络层</span>协议。ICMP 主要用于确定数据是否及时到达其预期目的地。通常，ICMP <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY2xvdWRmbGFyZS5jb20vbGVhcm5pbmcvbmV0d29yay1sYXllci93aGF0LWlzLWEtcHJvdG9jb2wv\">协议</span>用于网络设备，例如<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY2xvdWRmbGFyZS5jb20vbGVhcm5pbmcvbmV0d29yay1sYXllci93aGF0LWlzLWEtcm91dGVyLw==\">路由器</span>。ICMP 是进行错误报告和测试的关键，但它也可以用于<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY2xvdWRmbGFyZS5jb20vbGVhcm5pbmcvZGRvcy93aGF0LWlzLWEtZGRvcy1hdHRhY2sv\">分布式拒绝服务 (DDoS) 攻击</span>。</p>\n<h2 id=\"icmp-packet\"><a class=\"anchor\" href=\"#icmp-packet\">#</a> icmp Packet</h2>\n<p>ICMP 数据包是使用 ICMP 协议的数据包。 ICMP 数据包在正常的 IP 头之后包括一个 ICMP 头。 当路由器或服务器需要发送错误信息时，ICMP 数据包主体或数据部分总是包含一份导致错误的数据包的 IP 头的副本。</p>\n<p><strong>如果需要向一个地址发送 icmp 数据包， 可以向系统申请 udpSocket，向 socket 发送 icmp 数据包。</strong></p>\n<p>在其他系统中则是使用 rawSocket</p>\n",
            "tags": [
                "操作系统"
            ]
        },
        {
            "id": "http://smallcjy.github.io/2024/07/27/DragonOS--kernal%E6%80%81%E5%88%87%E6%8D%A2user%E6%80%81/",
            "url": "http://smallcjy.github.io/2024/07/27/DragonOS--kernal%E6%80%81%E5%88%87%E6%8D%A2user%E6%80%81/",
            "title": "DragonOS内核态向用户态进行切换",
            "date_published": "2024-07-27T08:25:35.000Z",
            "content_html": "<h2 id=\"关键函数-switch_to_user\"><a class=\"anchor\" href=\"#关键函数-switch_to_user\">#</a> 关键函数： switch_to_user（）</h2>\n<h3 id=\"粗略版步骤\"><a class=\"anchor\" href=\"#粗略版步骤\">#</a> （粗略版）步骤：</h3>\n<ol>\n<li>删除当前进程的 kthread 的标志</li>\n<li>读取指定路径下的 trap_frame，执行 init 进程</li>\n<li>这里要用 try_to_run_init_process 进行封装，因为要判断执行进程失败的原因是无法加载初始化程序还是其他 原因</li>\n<li>调用 do_execve 函数执行 init 程序</li>\n<li>执行 arch 下的用户态切换，先获取 trap_frame 的虚存地址，使用 assert！判断当前堆栈指针是否小于 trap_frame 的地址，如果堆栈指针大于等于它，终止进程，说明出现堆栈溢出。切换 archpcb 的 fs 和 gs 为用户态的 fs 和 gs，储存内核的 gs 数据，切换 fs 和 gs 寄存器。</li>\n<li>更新 rip 指针</li>\n<li>释放上面申请的所有守卫和引用计数变量，否则会导致内存错误</li>\n<li>进入 ready 状态，执行 user 态的切换，把进程的 trap_frame 指针指向 trap_frame。</li>\n<li>执行一段汇编代码（rust 的内联汇编技术）：交换当前的 GS 基址寄存器和内核的 GS 基址寄存器。将  <code>trapframe_vaddr</code>  的值移动到 RSP 寄存器（Stack Pointer）。这将改变当前的堆栈指针。将  <code>new_rip</code>  的值压入堆栈。在 x86 架构中，RIP 寄存器（Instruction Pointer）存储了下一条要执行的指令的地址。这条指令从堆栈中弹出一个值，并跳转到这个地址。这通常用于从函数返回。</li>\n</ol>\n",
            "tags": [
                "DragonOS"
            ]
        },
        {
            "id": "http://smallcjy.github.io/2024/07/27/%E5%86%85%E5%AD%98%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98%E4%B9%8B%20use-after-free%20%E6%BC%8F%E6%B4%9E%E9%97%AE%E9%A2%98/",
            "url": "http://smallcjy.github.io/2024/07/27/%E5%86%85%E5%AD%98%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98%E4%B9%8B%20use-after-free%20%E6%BC%8F%E6%B4%9E%E9%97%AE%E9%A2%98/",
            "title": "内存问题之 use-after-free 问题",
            "date_published": "2024-07-27T08:25:35.000Z",
            "content_html": "<h2 id=\"介绍\"><a class=\"anchor\" href=\"#介绍\">#</a> 介绍：</h2>\n<p>“use-after-free” 指的是 free 了某块内存后，程序继续使用了已释放的内存区域。发生的主要原因是当程序的某个对象释放后，其指针未被正常的清理，导致程序误以为该内存区域仍然可用。</p>\n<p>free 调用的过早导致内存错乱</p>\n",
            "tags": [
                "DragonOS"
            ]
        },
        {
            "id": "http://smallcjy.github.io/2024/07/27/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E6%9C%89%E8%B6%A3%E7%9A%84bug/",
            "url": "http://smallcjy.github.io/2024/07/27/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E6%9C%89%E8%B6%A3%E7%9A%84bug/",
            "title": "记录一次有趣的bug",
            "date_published": "2024-07-27T08:25:35.000Z",
            "content_html": "<h2 id=\"描述\"><a class=\"anchor\" href=\"#描述\">#</a> 描述</h2>\n<p>这是个非常抽象的 bug，如果你曾在网络中听说过这样的段子：不要删除某注释，不然会引发 bug。而我遇到的 bug 是，不要删除某日志输出，不然会引发 bug。</p>\n",
            "tags": [
                "DragonOS"
            ]
        },
        {
            "id": "http://smallcjy.github.io/2024/07/27/%E8%AE%BE%E5%A4%87%E6%B3%A8%E5%86%8C%E8%BF%87%E7%A8%8B%E5%92%8C%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83/",
            "url": "http://smallcjy.github.io/2024/07/27/%E8%AE%BE%E5%A4%87%E6%B3%A8%E5%86%8C%E8%BF%87%E7%A8%8B%E5%92%8C%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83/",
            "title": "关于DragonOS设备及驱动注册规范",
            "date_published": "2024-07-27T08:25:35.000Z",
            "content_html": "<h2 id=\"设备驱动注册函数设备注册函数\"><a class=\"anchor\" href=\"#设备驱动注册函数设备注册函数\">#</a> 设备驱动注册函数 / 设备注册函数</h2>\n<p><code>device_driver_init() </code></p>\n<ol>\n<li>Driver 结构体创建；（new ()）</li>\n<li>平台设备驱动管理注册。(platform_driver_manager ().register ())<br>\n <code> device_init()</code> <br>\n<strong> device 实现逻辑</strong></li>\n</ol>\n<p><strong>调用设备管理方法信息设备的默认初始化</strong><br>\n <code>device_manager().device_default_initialize(&amp;(device.clone() as Arc&lt;dyn Device&gt;));</code></p>\n<p><strong>调用平台设备管理方法进行平台设备的登记</strong><br>\n <figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_ invoke__\">platform_device_manager</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">.<span class=\"title function_ invoke__\">device_add</span>(device.<span class=\"title function_ invoke__\">clone</span>() <span class=\"keyword\">as</span> Arc&lt;<span class=\"keyword\">dyn</span> PlatformDevice&gt;)</span><br><span class=\"line\"></span><br><span class=\"line\">.<span class=\"title function_ invoke__\">expect</span>(<span class=\"string\">&quot;vesa_fb_device_init: platform_device_manager().device_add failed&quot;</span>);</span><br></pre></td></tr></table></figure></p>\n<p><strong>使用什么设备来帮助自己的实现，就要调用相对应的设备注册函数来注册</strong></p>\n<p><strong>任何一个设备都包括设备本身和设备驱动</strong></p>\n<h3 id=\"设备device\"><a class=\"anchor\" href=\"#设备device\">#</a> <strong>设备 Device</strong></h3>\n<h4 id=\"设备结构体组成\"><a class=\"anchor\" href=\"#设备结构体组成\">#</a> 设备结构体组成</h4>\n<pre><code>- inner：SpinLock&lt;InnerDevice&gt;内部结构（设备实现逻辑)\n- kobj_state: LockedKObjectStated\n</code></pre>\n<h4 id=\"innerdevice结构体的主要成员\"><a class=\"anchor\" href=\"#innerdevice结构体的主要成员\">#</a> InnerDevice 结构体的主要成员</h4>\n<pre><code>- bus;\n- class\n- driver\n- kern_inode\n- parent\n- kset\n- kobj_type\n- device_state\n- pdev_id\n- pdev_id_auto\n- 其他相关的成员\n</code></pre>\n<h4 id=\"为device实现接口-platformdevice\"><a class=\"anchor\" href=\"#为device实现接口-platformdevice\">#</a> 为 Device 实现接口 PlatFormDevice</h4>\n<p><figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">pdev_name</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> &amp;<span class=\"type\">str</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">Self</span>::NAME</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">set_pdev_id</span>(&amp;<span class=\"keyword\">self</span>, id: <span class=\"type\">i32</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">self</span>.inner.<span class=\"title function_ invoke__\">lock</span>().pdev_id = id;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">set_pdev_id_auto</span>(&amp;<span class=\"keyword\">self</span>, id_auto: <span class=\"type\">bool</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">self</span>.inner.<span class=\"title function_ invoke__\">lock</span>().pdev_id_auto = id_auto;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">is_initialized</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">self</span>.inner.<span class=\"title function_ invoke__\">lock</span>().device_state == DeviceState::Initialized</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">set_state</span>(&amp;<span class=\"keyword\">self</span>, set_state: DeviceState) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">self</span>.inner.<span class=\"title function_ invoke__\">lock</span>().device_state = set_state;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"为device实现device接口\"><a class=\"anchor\" href=\"#为device实现device接口\">#</a> 为 Device 实现 Device 接口</h4>\n<p><figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">dev_type</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> DeviceType &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">DeviceType::Char</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">id_table</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> IdTable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">IdTable::<span class=\"title function_ invoke__\">new</span>(<span class=\"keyword\">self</span>.<span class=\"title function_ invoke__\">name</span>(), <span class=\"literal\">None</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">bus</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">Option</span>&lt;Weak&lt;<span class=\"keyword\">dyn</span> Bus&gt;&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">self</span>.inner.<span class=\"title function_ invoke__\">lock</span>().bus.<span class=\"title function_ invoke__\">clone</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">set_bus</span>(&amp;<span class=\"keyword\">self</span>, bus: <span class=\"type\">Option</span>&lt;Weak&lt;<span class=\"keyword\">dyn</span> Bus&gt;&gt;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">self</span>.inner.<span class=\"title function_ invoke__\">lock</span>().bus = bus;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">set_class</span>(&amp;<span class=\"keyword\">self</span>, class: <span class=\"type\">Option</span>&lt;Weak&lt;<span class=\"keyword\">dyn</span> Class&gt;&gt;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">self</span>.inner.<span class=\"title function_ invoke__\">lock</span>().class = class;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">class</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">Option</span>&lt;Arc&lt;<span class=\"keyword\">dyn</span> Class&gt;&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">guard</span> = <span class=\"keyword\">self</span>.inner.<span class=\"title function_ invoke__\">lock</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">r</span> = guard.class.<span class=\"title function_ invoke__\">clone</span>()?.<span class=\"title function_ invoke__\">upgrade</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> r.<span class=\"title function_ invoke__\">is_none</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 为了让弱引用失效</span></span><br><span class=\"line\"></span><br><span class=\"line\">guard.class = <span class=\"literal\">None</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> r;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">driver</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">Option</span>&lt;Arc&lt;<span class=\"keyword\">dyn</span> Driver&gt;&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">self</span>.inner.<span class=\"title function_ invoke__\">lock</span>().driver.<span class=\"title function_ invoke__\">clone</span>()?.<span class=\"title function_ invoke__\">upgrade</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">set_driver</span>(&amp;<span class=\"keyword\">self</span>, driver: <span class=\"type\">Option</span>&lt;Weak&lt;<span class=\"keyword\">dyn</span> Driver&gt;&gt;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">self</span>.inner.<span class=\"title function_ invoke__\">lock</span>().driver = driver;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">is_dead</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">can_match</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">set_can_match</span>(&amp;<span class=\"keyword\">self</span>, _can_match: <span class=\"type\">bool</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">state_synced</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"为device实现kobject接口\"><a class=\"anchor\" href=\"#为device实现kobject接口\">#</a> 为 Device 实现 KObject 接口</h4>\n<p><figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">as_any_ref</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> &amp;<span class=\"keyword\">dyn</span> core::any::Any &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">self</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">set_inode</span>(&amp;<span class=\"keyword\">self</span>, inode: <span class=\"type\">Option</span>&lt;Arc&lt;KernFSInode&gt;&gt;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">self</span>.inner.<span class=\"title function_ invoke__\">lock</span>().kern_inode = inode;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">inode</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">Option</span>&lt;Arc&lt;KernFSInode&gt;&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">self</span>.inner.<span class=\"title function_ invoke__\">lock</span>().kern_inode.<span class=\"title function_ invoke__\">clone</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">parent</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">Option</span>&lt;Weak&lt;<span class=\"keyword\">dyn</span> KObject&gt;&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">self</span>.inner.<span class=\"title function_ invoke__\">lock</span>().parent.<span class=\"title function_ invoke__\">clone</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">set_parent</span>(&amp;<span class=\"keyword\">self</span>, parent: <span class=\"type\">Option</span>&lt;Weak&lt;<span class=\"keyword\">dyn</span> KObject&gt;&gt;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">self</span>.inner.<span class=\"title function_ invoke__\">lock</span>().parent = parent;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">kset</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">Option</span>&lt;Arc&lt;KSet&gt;&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">self</span>.inner.<span class=\"title function_ invoke__\">lock</span>().kset.<span class=\"title function_ invoke__\">clone</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">set_kset</span>(&amp;<span class=\"keyword\">self</span>, kset: <span class=\"type\">Option</span>&lt;Arc&lt;KSet&gt;&gt;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">self</span>.inner.<span class=\"title function_ invoke__\">lock</span>().kset = kset;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">kobj_type</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">Option</span>&lt;&amp;<span class=\"symbol\">&#x27;static</span> <span class=\"keyword\">dyn</span> KObjType&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">self</span>.inner.<span class=\"title function_ invoke__\">lock</span>().kobj_type</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">set_kobj_type</span>(&amp;<span class=\"keyword\">self</span>, ktype: <span class=\"type\">Option</span>&lt;&amp;<span class=\"symbol\">&#x27;static</span> <span class=\"keyword\">dyn</span> KObjType&gt;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">self</span>.inner.<span class=\"title function_ invoke__\">lock</span>().kobj_type = ktype;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">name</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">String</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">Self</span>::NAME.<span class=\"title function_ invoke__\">to_string</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">set_name</span>(&amp;<span class=\"keyword\">self</span>, _name: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// do nothing</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">kobj_state</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> RwLockReadGuard&lt;KObjectState&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">self</span>.kobj_state.<span class=\"title function_ invoke__\">read</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">kobj_state_mut</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> RwLockWriteGuard&lt;KObjectState&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">self</span>.kobj_state.<span class=\"title function_ invoke__\">write</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">set_kobj_state</span>(&amp;<span class=\"keyword\">self</span>, state: KObjectState) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">*<span class=\"keyword\">self</span>.kobj_state.<span class=\"title function_ invoke__\">write</span>() = state;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"为device实现自己的需求的接口\"><a class=\"anchor\" href=\"#为device实现自己的需求的接口\">#</a> 为 Device 实现自己的需求的接口</h4>\n<p>略</p>\n<h3 id=\"设备驱动程序\"><a class=\"anchor\" href=\"#设备驱动程序\">#</a> 设备驱动程序</h3>\n<h4 id=\"driver结构体\"><a class=\"anchor\" href=\"#driver结构体\">#</a> Driver 结构体</h4>\n<pre><code>- inner： InnerDriver\n- kobj_state： LockedKObjectState\n</code></pre>\n<h3 id=\"结构体方法\"><a class=\"anchor\" href=\"#结构体方法\">#</a> 结构体方法</h3>\n<pre><code>- new()和设备一样初始化inner和kobj_state\n- inner：\n\t- ktype: Option&lt;&amp;'static dyn KObjType&gt;,\n\t\n\t- kset: Option&lt;Arc&lt;KSet&gt;&gt;,\n\t\n\t- parent: Option&lt;Weak&lt;dyn KObject&gt;&gt;,\n\t\n\t- kernfs_inode: Option&lt;Arc&lt;KernFSInode&gt;&gt;,\n\t\n\t- devices: Vec&lt;Arc&lt;dyn Device&gt;&gt;,\n\t\n\t- bus: Option&lt;Weak&lt;dyn Bus&gt;&gt;,\n\t  \n\t- self_ref: Weak&lt;VesaFbDriver&gt;,\n</code></pre>\n<h4 id=\"实现platformdriver接口\"><a class=\"anchor\" href=\"#实现platformdriver接口\">#</a> 实现 PlatformDriver 接口</h4>\n<h4 id=\"实现driver接口\"><a class=\"anchor\" href=\"#实现driver接口\">#</a> 实现 Driver 接口</h4>\n<h4 id=\"实现kobject接口\"><a class=\"anchor\" href=\"#实现kobject接口\">#</a> 实现 KObject 接口</h4>\n<p><strong>接口的实现可以参考上面的 Device</strong></p>\n",
            "tags": [
                "DragonOS"
            ]
        },
        {
            "id": "http://smallcjy.github.io/2024/07/27/DragonOS%E7%BD%91%E7%BB%9C%E5%AD%90%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/",
            "url": "http://smallcjy.github.io/2024/07/27/DragonOS%E7%BD%91%E7%BB%9C%E5%AD%90%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/",
            "title": "DragonOS网络子系统学习",
            "date_published": "2024-07-27T08:25:33.000Z",
            "content_html": "<h2 id=\"创建socket\"><a class=\"anchor\" href=\"#创建socket\">#</a> 创建 socket</h2>\n<p>在 DragonOS 中，Socket 层是为实现各种 Socket 系统调用而实现的对 smoltcpSocket 结构体的封装。</p>\n<p>用户程序调用 sys_socket 调用时，会对应调用系统的 socket 调用，使用参数 <code>address_family</code>  、 <code>socket_type</code>  、 <code>protocol</code>  创建一个 Socket，并使用该 socket 创建一个 socket iNode，添加到文件描述符表中。</p>\n<p>用户程序在获取到返回的文件描述符 fd 后，需要绑定端口，以区分不同的网络服务。同样的，用户程序的 bing 调用对应 socket 层中的 bind 方法。</p>\n<p>//TODO：可以补充调用的具体实现，这里为了快速了解数据包的传输过程，就不过多阐述。</p>\n<p>绑定完端口后需要对端口进行监听，以获取从该端口返回的数据。调用 listen 调用。</p>\n<p>bind 和 listen 成功了，socket 的 connect 的预工作就完成了，接下来就可以进行 connect 了。这里会调用 connect 调用。调用完 connect 连接后就会调用 accept 调用，接受来自外部的 socket 连接，</p>\n",
            "tags": [
                "DragonOS"
            ]
        },
        {
            "id": "http://smallcjy.github.io/2024/07/27/Loopback%E7%BD%91%E5%8D%A1%E5%AE%9E%E7%8E%B0/",
            "url": "http://smallcjy.github.io/2024/07/27/Loopback%E7%BD%91%E5%8D%A1%E5%AE%9E%E7%8E%B0/",
            "title": "Loopback回环网卡设备实现",
            "date_published": "2024-07-27T02:48:31.000Z",
            "content_html": "<p><strong>重要参考 smoltcp</strong></p>\n<h2 id=\"loopback网卡介绍\"><a class=\"anchor\" href=\"#loopback网卡介绍\">#</a> LoopBack 网卡介绍</h2>\n<p><strong>Linux LoopBack 网卡是一个虚拟的网络接口，主要用于网络软件的测试和调试。它允许主机发送网络流量到自己，而不需要任何物理设备。当数据发送到 LoopBack 接口时，操作系统网络栈会立即接收这些数据，就像它们从网络上接收的一样。这使得开发人员可以测试和调试网络应用程序，而无需物理网络连接。</strong></p>\n<p><strong>lo 网卡注册在设备中，了解一个 net device 是如何注册的和如何实现 driver 的。</strong></p>\n<h2 id=\"实现loopback网卡背景知识\"><a class=\"anchor\" href=\"#实现loopback网卡背景知识\">#</a> 实现 LoopBack 网卡背景知识</h2>\n<h3 id=\"网络基础\"><a class=\"anchor\" href=\"#网络基础\">#</a> 网络基础</h3>\n<p>网络层</p>\n<h3 id=\"linux网络配置\"><a class=\"anchor\" href=\"#linux网络配置\">#</a> Linux 网络配置</h3>\n<h2 id=\"loopback-linux源码\"><a class=\"anchor\" href=\"#loopback-linux源码\">#</a> LoopBack Linux 源码</h2>\n<p><strong>链接：</strong> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlLmRyYWdvbm9zLm9yZy5jbi94cmVmL2xpbnV4LTYuMS45L2RyaXZlcnMvbmV0L2xvb3BiYWNrLmM=\">https://code.dragonos.org.cn/xref/linux-6.1.9/drivers/net/loopback.c</span></p>\n<h2 id=\"loopback源码分析\"><a class=\"anchor\" href=\"#loopback源码分析\">#</a> LoopBack 源码分析</h2>\n<h3 id=\"环回结构\"><a class=\"anchor\" href=\"#环回结构\">#</a> 环回结构</h3>\n<h3 id=\"导出函数\"><a class=\"anchor\" href=\"#导出函数\">#</a> 导出函数</h3>\n<h3 id=\"环回传输函数\"><a class=\"anchor\" href=\"#环回传输函数\">#</a> 环回传输函数</h3>\n<p><strong>loopback_xmit 函数</strong> ，接收两个参数：一个是 <code>struct sk_buff *skb</code> ，表示要<strong>发送的数据包</strong>；另一个是 <code>struct net_device *dev</code> ，表示<strong>要发送数据的设备</strong>。</p>\n<p>以下是这段代码的主要步骤：</p>\n<ol>\n<li>\n<p><code>skb_tx_timestamp(skb);</code> ：记录数据包的发送时间戳。</p>\n</li>\n<li>\n<p><code>skb_clear_tstamp(skb);</code> ：清除数据包的时间戳，以防止 <code>net_timestamp_check()</code>  函数被不同的时钟基准混淆。</p>\n</li>\n<li>\n<p><code>skb_orphan(skb);</code> ：<strong>将数据包的所有者设置为 NULL</strong>，这样在数据包被释放时，不会影响到任何进程。</p>\n</li>\n<li>\n<p><code>skb_dst_force(skb);</code> ：确保<strong>数据包的目的地被引用计数</strong>，这样在数据包被处理时，目的地不会被意外释放。</p>\n</li>\n<li>\n<p><code>skb-&gt;protocol = eth_type_trans(skb, dev);</code> ：<strong>设置数据包的协议类型</strong>，这是通过调用 <code>eth_type_trans()</code>  函数来确定的。</p>\n</li>\n<li>\n<p><code>len = skb-&gt;len;</code> ：记录数据包的长度。</p>\n</li>\n<li>\n<p><code>if (likely(__netif_rx(skb) == NET_RX_SUCCESS))</code> ：将数据包提交给<strong>网络接口接收函数</strong> <code>__netif_rx()</code> ，如果接收成功，则更新设备的统计信息。</p>\n</li>\n<li>\n<p><code>return NETDEV_TX_OK;</code> ：返回 <code>NETDEV_TX_OK</code> ，表示数据包已经成功发送。</p>\n</li>\n</ol>\n<p>这段代码的主要目的是将数据包从 LoopBack 网卡发送到网络接口，然后由网络接口将数据包传递给网络协议栈进行处理。</p>\n<h3 id=\"统计信息读取函数\"><a class=\"anchor\" href=\"#统计信息读取函数\">#</a> 统计信息读取函数</h3>\n<p><strong>dev_lstats_read 函数</strong>，这段代码是从 Linux 内核中<strong>读取网络设备统计信息</strong>的函数。函数名为 <code>dev_lstats_read</code> ，它接收三个参数：一个是 <code>struct net_device *dev</code> ，表示<strong>网络设备</strong>；另外两个是 <code>u64 *packets</code>  和 <code>u64 *bytes</code> ，它们用于<strong>存储读取的数据包数量</strong>和<strong>字节数</strong>。</p>\n<p>以下是这段代码的主要步骤：</p>\n<ol>\n<li>\n<p>初始化 <code>packets</code>  和 <code>bytes</code>  为 0。</p>\n</li>\n<li>\n<p>使用 <code>for_each_possible_cpu(i)</code>  循环遍历每个可能的 CPU。这是因为在多核系统中，每个 CPU 都可能有自己的统计信息。</p>\n</li>\n<li>\n<p><strong>获取每个 CPU 的统计信息</strong>，这是通过调用 <code>per_cpu_ptr(dev-&gt;lstats, i)</code>  函数来实现的。</p>\n</li>\n<li>\n<p>使用 <code>do...while</code> <strong> 循环读取统计信息，直到读取成功</strong>。（spinlock 自旋锁的访问？）这是因为在多线程环境中，统计信息可能在读取过程中被其他线程修改，所以需要使用 <code>u64_stats_fetch_begin_irq()</code>  和 <code>u64_stats_fetch_retry_irq()</code>  函数来确保读取的一致性。（<strong>禁用中断</strong>）</p>\n</li>\n<li>\n<p>将读取的数据包数量和字节数累加到 <code>packets</code>  和 <code>bytes</code>  中。</p>\n</li>\n</ol>\n<p>这段代码的主要目的是读取网络设备的统计信息，包括发送和接收的数据包数量和字节数。这些信息对于网络性能的监控和调优非常重要。</p>\n<h3 id=\"统计信息更新函数\"><a class=\"anchor\" href=\"#统计信息更新函数\">#</a> 统计信息更新函数</h3>\n<p><strong>loopback_get_stats64 函数</strong>，用于向用户空间提供更新的统计信息，通常是被网络监控工具使用。这段代码是从 Linux 内核中获取 LoopBack 网卡统计信息的函数。函数名为 <code>loopback_get_stats64</code> ，它接收两个参数：一个是 <code>struct net_device *dev</code> ，表示网络设备；另一个是 <code>struct rtnl_link_stats64 *stats</code> ，用于<strong>存储读取的统计信息</strong>。</p>\n<p>以下是这段代码的主要步骤：</p>\n<ol>\n<li>\n<p>定义两个变量 <code>packets</code>  和 <code>bytes</code> ，用于<strong>存储读取的数据包数量和字节数。</strong></p>\n</li>\n<li>\n<p>调用 <code>dev_lstats_read(dev, &amp;packets, &amp;bytes);</code> （<strong>上一个函数实现</strong>）函数读取统计信息。</p>\n</li>\n<li>\n<p>将读取的数据包数量和字节数分别赋值给 <code>stats-&gt;rx_packets</code> 、 <code>stats-&gt;tx_packets</code> 、 <code>stats-&gt;rx_bytes</code>  和 <code>stats-&gt;tx_bytes</code> 。</p>\n</li>\n</ol>\n<p>这段代码的主要目的是获取 LoopBack 网卡的统计信息，包括发送和接收的数据包数量和字节数。这些信息对于网络性能的监控和调优非常重要。</p>\n<h3 id=\"设备初始化\"><a class=\"anchor\" href=\"#设备初始化\">#</a> 设备初始化</h3>\n<p><strong>loopback_dev_init 函数 返回 int</strong> ， 函数初始化环回设备的统计信息结构，如果内存分配失败则返回错误。它接收一个参数： <code>struct net_device *dev</code> ，表示要初始化的网络设备。</p>\n<p>以下是这段代码的主要步骤：</p>\n<ol>\n<li>\n<p>调用 <code>netdev_alloc_pcpu_stats(struct pcpu_lstats)</code>  函数为每个 CPU 分配一个 <code>pcpu_lstats</code>  结构体的空间，并将结果赋值给 <code>dev-&gt;lstats</code> 。 <code>pcpu_lstats</code>  结构体用于<strong>存储每个 CPU 的统计信息</strong>。</p>\n</li>\n<li>\n<p>检查 <code>dev-&gt;lstats</code>  是否为 NULL。如果为 NULL，表示内存分配失败，返回 <code>-ENOMEM</code>  错误码。</p>\n</li>\n<li>\n<p>如果内存分配成功，返回 0 表示初始化成功。</p>\n</li>\n</ol>\n<p>这段代码的主要目的是初始化 LoopBack 网卡的统计信息结构体，为后续的统计信息收集做准备。</p>\n<h3 id=\"设备释放函数\"><a class=\"anchor\" href=\"#设备释放函数\">#</a> 设备释放函数</h3>\n<p><strong>loopback_dev_free 函数</strong>在环回设备被移除时调用，以释放分配的资源。</p>\n<p>把网络设备的 loopback_back 指向 NULL，并释放 dev 的 lstats（结构体用于<strong>存储每个 CPU 的统计信息</strong>。）</p>\n<h3 id=\"网络设备操作\"><a class=\"anchor\" href=\"#网络设备操作\">#</a> 网络设备操作</h3>\n<h3 id=\"设置loopback网卡属性函数\"><a class=\"anchor\" href=\"#设置loopback网卡属性函数\">#</a> 设置 loopback 网卡属性函数</h3>\n<p><strong>gen_lo_setup 函数</strong>，它接收六个参数：一个是 <code>struct net_device *dev</code> ，表示<strong>要设置的网络设备</strong>；一个是 <code>unsigned int mtu</code> ，表示<strong>设备的最大传输单元</strong>；一个是 <code>const struct ethtool_ops *eth_ops</code> ，表示<strong>设备的 ethtool 操作</strong>；一个是 <code>const struct header_ops *hdr_ops</code> ，表示<strong>设备的头部操作</strong>；一个是 <code>const struct net_device_ops *dev_ops</code> ，表示<strong>设备的网络设备操作</strong>；一个是 <code>void (*dev_destructor)(struct net_device *dev)</code> ，表示<strong>设备的析构函数</strong>。</p>\n<p>以下是这段代码的主要步骤：</p>\n<ol>\n<li>\n<p>设置设备的<strong>最大传输单元</strong>（MTU）。</p>\n</li>\n<li>\n<p>设置设备的<strong>硬头部长度和最小头部</strong>长度为 <code>ETH_HLEN</code> ，表示以太网头部的长度。</p>\n</li>\n<li>\n<p>设置设备的地址长度为 <code>ETH_ALEN</code> ，表示<strong>以太网地址的长度</strong>。</p>\n</li>\n<li>\n<p><strong>设置设备的类型</strong>为 <code>ARPHRD_LOOPBACK</code> ，表示 LoopBack 设备。</p>\n</li>\n<li>\n<p><strong>设置设备的标志</strong>为 <code>IFF_LOOPBACK</code> ，表示 LoopBack 设备。</p>\n</li>\n<li>\n<p><strong>设置设备的私有标志</strong>，包括 <code>IFF_LIVE_ADDR_CHANGE</code>  和 <code>IFF_NO_QUEUE</code> 。</p>\n</li>\n<li>\n<p>调用 <code>netif_keep_dst(dev)</code>  函数，<strong>表示设备保持目的地</strong>。</p>\n</li>\n<li>\n<p>设置设备的硬件特性为 <code>NETIF_F_GSO_SOFTWARE</code> ，表示设备支持软件大段离散。</p>\n</li>\n<li>\n<p><strong>设置设备的特性，包括散列、片段列表、软件大段离散、硬件校验和、接收校验和、SCTP CRC、高 DMA、LLTX、网络命名空间本地、VLAN 挑战和 LoopBack。</strong></p>\n</li>\n<li>\n<p>设置设备的 ethtool 操作、头部操作、网络设备操作和析构函数。</p>\n</li>\n<li>\n<p><strong>设置设备需要释放网络设备</strong>。</p>\n</li>\n<li>\n<p>调用 <code>netif_set_tso_max_size(dev, GSO_MAX_SIZE)</code>  函数，设置设备的 TSO 最大大小。</p>\n</li>\n</ol>\n<p>这段代码的主要目的是设置 LoopBack 网卡的属性，包括最大传输单元、头部长度、地址长度、设备类型、设备标志、设备特性等。这些属性对于设备的正常工作非常重要。</p>\n<h3 id=\"loopback网卡设置函数\"><a class=\"anchor\" href=\"#loopback网卡设置函数\">#</a> <strong>loopback 网卡设置函数</strong></h3>\n<p><strong>调用 gen_lo_setup 函数</strong>。</p>\n<h3 id=\"设置和登记loopback设备函数\"><a class=\"anchor\" href=\"#设置和登记loopback设备函数\">#</a> 设置和登记 loopback 设备函数</h3>\n<p><strong>loopback_setup 函数</strong>。这段代码是 Linux 内核中初始化 LoopBack 网卡的函数。函数名为 <code>loopback_net_init</code> ，它接收一个参数： <code>struct net *net</code> ，表示要<strong>初始化的网络命名空间</strong>。</p>\n<p>以下是这段代码的主要步骤：</p>\n<ol>\n<li>\n<p>定义一个 <code>struct net_device *dev</code>  变量，<strong>用于存储分配的网络设备</strong>。也就是 loopback 网卡</p>\n</li>\n<li>\n<p>调用 <code>alloc_netdev(0, &quot;lo&quot;, NET_NAME_PREDICTABLE, loopback_setup)</code>  函数分配一个网络设备，并将结果赋值给 <code>dev</code> 。如果分配失败，跳转到 <code>out</code>  标签。</p>\n</li>\n<li>\n<p>调用 <code>dev_net_set(dev, net)</code>  函数<strong>将网络设备的网络命名空间设置为 <code>net</code> </strong>。</p>\n</li>\n<li>\n<p>调用 <code>register_netdev(dev)</code>  函数注册网络设备。如果注册失败，跳转到 <code>out_free_netdev</code>  标签。</p>\n</li>\n<li>\n<p>检查网络设备的接口索引是否等于 <code>LOOPBACK_IFINDEX</code> 。如果不等于，调用 <code>BUG_ON()</code>  函数打印错误信息并停止内核。</p>\n</li>\n<li>\n<p>将网络设备赋值给 <code>net-&gt;loopback_dev</code> ，表示网络命名空间的 LoopBack 设备。</p>\n</li>\n<li>\n<p>返回 0 表示初始化成功。</p>\n</li>\n</ol>\n<p>在 <code>out_free_netdev</code>  标签处，调用 <code>free_netdev(dev)</code>  函数释放网络设备。</p>\n<p>在 <code>out</code>  标签处，如果网络命名空间等于初始网络命名空间，调用 <code>panic()</code>  函数打印错误信息并停止内核。</p>\n<h3 id=\"黑洞传输函数\"><a class=\"anchor\" href=\"#黑洞传输函数\">#</a> 黑洞传输函数</h3>\n<p><strong>blackhole_netdev_xmit 函数</strong>，黑洞网络设备，用于丢弃标记为已过期或无效的传入数据包。这个设备不是命名空间的，而是全局可访问的。它接收两个参数：一个是 <code>struct sk_buff *skb</code> ，表示要发送的数据包；另一个是 <code>struct net_device *dev</code> ，表示要发送数据的设备。</p>\n<p>以下是这段代码的主要步骤：</p>\n<ol>\n<li>\n<p>调用 <code>kfree_skb(skb)</code>  函数释放数据包。这是因为 &quot;黑洞&quot; 网络设备不会真正发送数据，而是<strong>直接丢弃数据</strong>。</p>\n</li>\n<li>\n<p>调用 <code>net_warn_ratelimited(&quot;%s(): Dropping skb.\\n&quot;, __func__)</code>  函数打印警告信息，表示数据包被丢弃。这个函数会限制警告信息的打印频率，以防止日志被过多的警告信息淹没。</p>\n</li>\n<li>\n<p>返回 <code>NETDEV_TX_OK</code> ，表示数据包已经 &quot;成功发送&quot;。</p>\n</li>\n</ol>\n<p>这段代码的主要目的是实现一个 &quot;黑洞&quot; 网络设备，它会丢弃所有发送到它的数据。这个设备通常用于测试和调试，或者用于阻止不需要的网络流量。</p>\n<p><strong>记得设置网络设备操作结构体的发送函数</strong></p>\n<h3 id=\"黑洞设备设置\"><a class=\"anchor\" href=\"#黑洞设备设置\">#</a> 黑洞设备设置</h3>\n<p><strong>blackhole_netdev_setup 函数</strong> 调用 <strong>gen_lo_setup 函数</strong></p>\n<h3 id=\"黑洞设备初始化\"><a class=\"anchor\" href=\"#黑洞设备初始化\">#</a> 黑洞设备初始化</h3>\n<p><strong>blackhole_netdev_init 函数</strong>，函数初始化和注册黑洞设备。它被标记为在内核初始化过程中调用。</p>\n<p>以下是这段代码的主要步骤：</p>\n<ol>\n<li>\n<p>调用 <code>alloc_netdev(0, &quot;blackhole_dev&quot;, NET_NAME_UNKNOWN, blackhole_netdev_setup)</code>  函数分配一个网络设备，并将结果赋值给全局变量 <code>blackhole_netdev</code> 。如果分配失败，返回 <code>-ENOMEM</code>  错误码。</p>\n</li>\n<li>\n<p>调用 <code>rtnl_lock()</code>  函数获取路由表锁，防止在初始化过程中路由表被其他线程修改。</p>\n</li>\n<li>\n<p>调用 <code>dev_init_scheduler(blackhole_netdev)</code>  函数初始化网络设备的调度器。</p>\n</li>\n<li>\n<p>调用 <code>dev_activate(blackhole_netdev)</code>  函数激活网络设备。</p>\n</li>\n<li>\n<p>调用 <code>rtnl_unlock()</code>  函数释放路由表锁。</p>\n</li>\n<li>\n<p>将网络设备的标志设置为 <code>IFF_UP | IFF_RUNNING</code> ，表示网络设备已经启动并正在运行。</p>\n</li>\n<li>\n<p>调用 <code>dev_net_set(blackhole_netdev, &amp;init_net)</code>  函数将网络设备的网络命名空间设置为初始网络命名空间。</p>\n</li>\n<li>\n<p>返回 0 表示初始化成功。</p>\n</li>\n</ol>\n<p>这段代码的主要目的是初始化 &quot;黑洞&quot; 网络设备，包括分配网络设备、初始化调度器、激活设备、设置网络命名空间等。这些操作对于网络设备的正常工作非常重要。</p>\n<h3 id=\"最终化\"><a class=\"anchor\" href=\"#最终化\">#</a> 最终化</h3>\n<h2 id=\"测试loopbackping-127001\"><a class=\"anchor\" href=\"#测试loopbackping-127001\">#</a> 测试 loopback——ping 127.0.0.1</h2>\n<h3 id=\"ping-127001-网络通信过程\"><a class=\"anchor\" href=\"#ping-127001-网络通信过程\">#</a> ping 127.0.0.1 网络通信过程</h3>\n<h3 id=\"本机网路通信\"><a class=\"anchor\" href=\"#本机网路通信\">#</a> 本机网路通信</h3>\n",
            "tags": [
                "DragonOS"
            ]
        },
        {
            "id": "http://smallcjy.github.io/2024/07/27/SmolTcp_Loopback%20%E6%BA%90%E7%A0%81/",
            "url": "http://smallcjy.github.io/2024/07/27/SmolTcp_Loopback%20%E6%BA%90%E7%A0%81/",
            "title": "smoltcplo网卡源码",
            "date_published": "2024-07-27T02:48:31.000Z",
            "content_html": "<p><figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#![cfg_attr(not(feature = <span class=\"string\">&quot;std&quot;</span>), no_std)]</span></span><br><span class=\"line\"><span class=\"meta\">#![allow(unused_mut)]</span></span><br><span class=\"line\"><span class=\"meta\">#![allow(clippy::collapsible_if)]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#[cfg(feature = <span class=\"string\">&quot;std&quot;</span>)]</span></span><br><span class=\"line\"><span class=\"meta\">#[allow(dead_code)]</span></span><br><span class=\"line\"><span class=\"keyword\">mod</span> utils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">use</span> core::<span class=\"type\">str</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> log::&#123;debug, error, info&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">use</span> smoltcp::iface::&#123;Config, Interface, SocketSet&#125;;</span><br><span class=\"line\"><span class=\"keyword\">use</span> smoltcp::phy::&#123;Loopback, Medium&#125;;</span><br><span class=\"line\"><span class=\"keyword\">use</span> smoltcp::socket::tcp;</span><br><span class=\"line\"><span class=\"keyword\">use</span> smoltcp::time::&#123;Duration, Instant&#125;;</span><br><span class=\"line\"><span class=\"keyword\">use</span> smoltcp::wire::&#123;EthernetAddress, IpAddress, IpCidr&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#[cfg(not(feature = <span class=\"string\">&quot;std&quot;</span>))]</span></span><br><span class=\"line\"><span class=\"keyword\">mod</span> mock &#123;</span><br><span class=\"line\">    <span class=\"keyword\">use</span> core::cell::Cell;</span><br><span class=\"line\">    <span class=\"keyword\">use</span> smoltcp::time::&#123;Duration, Instant&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">#[derive(Debug)]</span></span><br><span class=\"line\">    <span class=\"meta\">#[cfg_attr(feature = <span class=\"string\">&quot;defmt&quot;</span>, derive(defmt::Format))]</span></span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">Clock</span>(Cell&lt;Instant&gt;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">impl</span> <span class=\"title class_\">Clock</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">new</span>() <span class=\"punctuation\">-&gt;</span> Clock &#123;</span><br><span class=\"line\">            <span class=\"title function_ invoke__\">Clock</span>(Cell::<span class=\"title function_ invoke__\">new</span>(Instant::<span class=\"title function_ invoke__\">from_millis</span>(<span class=\"number\">0</span>)))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">advance</span>(&amp;<span class=\"keyword\">self</span>, duration: Duration) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.<span class=\"number\">0</span>.<span class=\"title function_ invoke__\">set</span>(<span class=\"keyword\">self</span>.<span class=\"number\">0</span>.<span class=\"title function_ invoke__\">get</span>() + duration)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">elapsed</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> Instant &#123;</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.<span class=\"number\">0</span>.<span class=\"title function_ invoke__\">get</span>()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#[cfg(feature = <span class=\"string\">&quot;std&quot;</span>)]</span></span><br><span class=\"line\"><span class=\"keyword\">mod</span> mock &#123;</span><br><span class=\"line\">    <span class=\"keyword\">use</span> smoltcp::time::&#123;Duration, Instant&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">use</span> std::sync::atomic::&#123;AtomicUsize, Ordering&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">use</span> std::sync::Arc;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// should be AtomicU64 but that&#x27;s unstable</span></span><br><span class=\"line\">    <span class=\"meta\">#[derive(Debug, Clone)]</span></span><br><span class=\"line\">    <span class=\"meta\">#[cfg_attr(feature = <span class=\"string\">&quot;defmt&quot;</span>, derive(defmt::Format))]</span></span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">Clock</span>(Arc&lt;AtomicUsize&gt;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">impl</span> <span class=\"title class_\">Clock</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">new</span>() <span class=\"punctuation\">-&gt;</span> Clock &#123;</span><br><span class=\"line\">            <span class=\"title function_ invoke__\">Clock</span>(Arc::<span class=\"title function_ invoke__\">new</span>(AtomicUsize::<span class=\"title function_ invoke__\">new</span>(<span class=\"number\">0</span>)))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">advance</span>(&amp;<span class=\"keyword\">self</span>, duration: Duration) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.<span class=\"number\">0</span></span><br><span class=\"line\">                .<span class=\"title function_ invoke__\">fetch_add</span>(duration.<span class=\"title function_ invoke__\">total_millis</span>() <span class=\"keyword\">as</span> <span class=\"type\">usize</span>, Ordering::SeqCst);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">elapsed</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> Instant &#123;</span><br><span class=\"line\">            Instant::<span class=\"title function_ invoke__\">from_millis</span>(<span class=\"keyword\">self</span>.<span class=\"number\">0</span>.<span class=\"title function_ invoke__\">load</span>(Ordering::SeqCst) <span class=\"keyword\">as</span> <span class=\"type\">i64</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">clock</span> = mock::Clock::<span class=\"title function_ invoke__\">new</span>();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">device</span> = Loopback::<span class=\"title function_ invoke__\">new</span>(Medium::Ethernet);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">#[cfg(feature = <span class=\"string\">&quot;std&quot;</span>)]</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">device</span> = &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"variable\">clock</span> = clock.<span class=\"title function_ invoke__\">clone</span>();</span><br><span class=\"line\">        utils::<span class=\"title function_ invoke__\">setup_logging_with_clock</span>(<span class=\"string\">&quot;&quot;</span>, <span class=\"keyword\">move</span> || clock.<span class=\"title function_ invoke__\">elapsed</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> (<span class=\"keyword\">mut</span> opts, <span class=\"keyword\">mut</span> free) = utils::<span class=\"title function_ invoke__\">create_options</span>();</span><br><span class=\"line\">        utils::<span class=\"title function_ invoke__\">add_middleware_options</span>(&amp;<span class=\"keyword\">mut</span> opts, &amp;<span class=\"keyword\">mut</span> free);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">matches</span> = utils::<span class=\"title function_ invoke__\">parse_options</span>(&amp;opts, free);</span><br><span class=\"line\">        utils::<span class=\"title function_ invoke__\">parse_middleware_options</span>(&amp;<span class=\"keyword\">mut</span> matches, device, <span class=\"comment\">/*loopback=*/</span> <span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Create interface</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">config</span> = Config::<span class=\"title function_ invoke__\">new</span>();</span><br><span class=\"line\">    config.hardware_addr = <span class=\"title function_ invoke__\">Some</span>(<span class=\"title function_ invoke__\">EthernetAddress</span>([<span class=\"number\">0x02</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x01</span>]).<span class=\"title function_ invoke__\">into</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">iface</span> = Interface::<span class=\"title function_ invoke__\">new</span>(config, &amp;<span class=\"keyword\">mut</span> device);</span><br><span class=\"line\">    iface.<span class=\"title function_ invoke__\">update_ip_addrs</span>(|ip_addrs| &#123;</span><br><span class=\"line\">        ip_addrs</span><br><span class=\"line\">            .<span class=\"title function_ invoke__\">push</span>(IpCidr::<span class=\"title function_ invoke__\">new</span>(IpAddress::<span class=\"title function_ invoke__\">v4</span>(<span class=\"number\">127</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>), <span class=\"number\">8</span>))</span><br><span class=\"line\">            .<span class=\"title function_ invoke__\">unwrap</span>();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Create sockets</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">server_socket</span> = &#123;</span><br><span class=\"line\">        <span class=\"comment\">// It is not strictly necessary to use a `static mut` and unsafe code here, but</span></span><br><span class=\"line\">        <span class=\"comment\">// on embedded systems that smoltcp targets it is far better to allocate the data</span></span><br><span class=\"line\">        <span class=\"comment\">// statically to verify that it fits into RAM rather than get undefined behavior</span></span><br><span class=\"line\">        <span class=\"comment\">// when stack overflows.</span></span><br><span class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">mut</span> TCP_SERVER_RX_DATA: [<span class=\"type\">u8</span>; <span class=\"number\">1024</span>] = [<span class=\"number\">0</span>; <span class=\"number\">1024</span>];</span><br><span class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">mut</span> TCP_SERVER_TX_DATA: [<span class=\"type\">u8</span>; <span class=\"number\">1024</span>] = [<span class=\"number\">0</span>; <span class=\"number\">1024</span>];</span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"variable\">tcp_rx_buffer</span> = tcp::SocketBuffer::<span class=\"title function_ invoke__\">new</span>(<span class=\"keyword\">unsafe</span> &#123; &amp;<span class=\"keyword\">mut</span> TCP_SERVER_RX_DATA[..] &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"variable\">tcp_tx_buffer</span> = tcp::SocketBuffer::<span class=\"title function_ invoke__\">new</span>(<span class=\"keyword\">unsafe</span> &#123; &amp;<span class=\"keyword\">mut</span> TCP_SERVER_TX_DATA[..] &#125;);</span><br><span class=\"line\">        tcp::Socket::<span class=\"title function_ invoke__\">new</span>(tcp_rx_buffer, tcp_tx_buffer)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">client_socket</span> = &#123;</span><br><span class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">mut</span> TCP_CLIENT_RX_DATA: [<span class=\"type\">u8</span>; <span class=\"number\">1024</span>] = [<span class=\"number\">0</span>; <span class=\"number\">1024</span>];</span><br><span class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">mut</span> TCP_CLIENT_TX_DATA: [<span class=\"type\">u8</span>; <span class=\"number\">1024</span>] = [<span class=\"number\">0</span>; <span class=\"number\">1024</span>];</span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"variable\">tcp_rx_buffer</span> = tcp::SocketBuffer::<span class=\"title function_ invoke__\">new</span>(<span class=\"keyword\">unsafe</span> &#123; &amp;<span class=\"keyword\">mut</span> TCP_CLIENT_RX_DATA[..] &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"variable\">tcp_tx_buffer</span> = tcp::SocketBuffer::<span class=\"title function_ invoke__\">new</span>(<span class=\"keyword\">unsafe</span> &#123; &amp;<span class=\"keyword\">mut</span> TCP_CLIENT_TX_DATA[..] &#125;);</span><br><span class=\"line\">        tcp::Socket::<span class=\"title function_ invoke__\">new</span>(tcp_rx_buffer, tcp_tx_buffer)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">sockets</span>: [_; <span class=\"number\">2</span>] = <span class=\"built_in\">Default</span>::<span class=\"title function_ invoke__\">default</span>();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">sockets</span> = SocketSet::<span class=\"title function_ invoke__\">new</span>(&amp;<span class=\"keyword\">mut</span> sockets[..]);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">server_handle</span> = sockets.<span class=\"title function_ invoke__\">add</span>(server_socket);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">client_handle</span> = sockets.<span class=\"title function_ invoke__\">add</span>(client_socket);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">did_listen</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">did_connect</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">done</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> !done &amp;&amp; clock.<span class=\"title function_ invoke__\">elapsed</span>() &lt; Instant::<span class=\"title function_ invoke__\">from_millis</span>(<span class=\"number\">10_000</span>) &#123;</span><br><span class=\"line\">        iface.<span class=\"title function_ invoke__\">poll</span>(clock.<span class=\"title function_ invoke__\">elapsed</span>(), &amp;<span class=\"keyword\">mut</span> device, &amp;<span class=\"keyword\">mut</span> sockets);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">socket</span> = sockets.get_mut::&lt;tcp::Socket&gt;(server_handle);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> !socket.<span class=\"title function_ invoke__\">is_active</span>() &amp;&amp; !socket.<span class=\"title function_ invoke__\">is_listening</span>() &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> !did_listen &#123;</span><br><span class=\"line\">                debug!(<span class=\"string\">&quot;listening&quot;</span>);</span><br><span class=\"line\">                socket.<span class=\"title function_ invoke__\">listen</span>(<span class=\"number\">1234</span>).<span class=\"title function_ invoke__\">unwrap</span>();</span><br><span class=\"line\">                did_listen = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> socket.<span class=\"title function_ invoke__\">can_recv</span>() &#123;</span><br><span class=\"line\">            debug!(</span><br><span class=\"line\">                <span class=\"string\">&quot;got &#123;:?&#125;&quot;</span>,</span><br><span class=\"line\">                socket.<span class=\"title function_ invoke__\">recv</span>(|buffer| &#123; (buffer.<span class=\"title function_ invoke__\">len</span>(), <span class=\"type\">str</span>::<span class=\"title function_ invoke__\">from_utf8</span>(buffer).<span class=\"title function_ invoke__\">unwrap</span>()) &#125;)</span><br><span class=\"line\">            );</span><br><span class=\"line\">            socket.<span class=\"title function_ invoke__\">close</span>();</span><br><span class=\"line\">            done = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">socket</span> = sockets.get_mut::&lt;tcp::Socket&gt;(client_handle);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"variable\">cx</span> = iface.<span class=\"title function_ invoke__\">context</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> !socket.<span class=\"title function_ invoke__\">is_open</span>() &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> !did_connect &#123;</span><br><span class=\"line\">                debug!(<span class=\"string\">&quot;connecting&quot;</span>);</span><br><span class=\"line\">                socket</span><br><span class=\"line\">                    .<span class=\"title function_ invoke__\">connect</span>(cx, (IpAddress::<span class=\"title function_ invoke__\">v4</span>(<span class=\"number\">127</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>), <span class=\"number\">1234</span>), <span class=\"number\">65000</span>)</span><br><span class=\"line\">                    .<span class=\"title function_ invoke__\">unwrap</span>();</span><br><span class=\"line\">                did_connect = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> socket.<span class=\"title function_ invoke__\">can_send</span>() &#123;</span><br><span class=\"line\">            debug!(<span class=\"string\">&quot;sending&quot;</span>);</span><br><span class=\"line\">            socket.<span class=\"title function_ invoke__\">send_slice</span>(<span class=\"string\">b&quot;0123456789abcdef&quot;</span>).<span class=\"title function_ invoke__\">unwrap</span>();</span><br><span class=\"line\">            socket.<span class=\"title function_ invoke__\">close</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">match</span> iface.<span class=\"title function_ invoke__\">poll_delay</span>(clock.<span class=\"title function_ invoke__\">elapsed</span>(), &amp;sockets) &#123;</span><br><span class=\"line\">            <span class=\"title function_ invoke__\">Some</span>(Duration::ZERO) =&gt; debug!(<span class=\"string\">&quot;resuming&quot;</span>),</span><br><span class=\"line\">            <span class=\"title function_ invoke__\">Some</span>(delay) =&gt; &#123;</span><br><span class=\"line\">                debug!(<span class=\"string\">&quot;sleeping for &#123;&#125; ms&quot;</span>, delay);</span><br><span class=\"line\">                clock.<span class=\"title function_ invoke__\">advance</span>(delay)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"literal\">None</span> =&gt; clock.<span class=\"title function_ invoke__\">advance</span>(Duration::<span class=\"title function_ invoke__\">from_millis</span>(<span class=\"number\">1</span>)),</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> done &#123;</span><br><span class=\"line\">        info!(<span class=\"string\">&quot;done&quot;</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        error!(<span class=\"string\">&quot;this is taking too long, bailing out&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n",
            "tags": [
                "DragonOS"
            ]
        },
        {
            "id": "http://smallcjy.github.io/2024/07/26/SYS_ALARM%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E5%AE%9E%E7%8E%B0/",
            "url": "http://smallcjy.github.io/2024/07/26/SYS_ALARM%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E5%AE%9E%E7%8E%B0/",
            "title": "SYS_ALARM调用实现",
            "date_published": "2024-07-26T08:25:35.000Z",
            "content_html": "<p>TODO</p>\n",
            "tags": [
                "DragonOS"
            ]
        },
        {
            "id": "http://smallcjy.github.io/2024/07/24/%E5%8F%8C%E6%8C%87%E9%92%88%E7%9A%84%E4%BD%9C%E7%94%A8/",
            "url": "http://smallcjy.github.io/2024/07/24/%E5%8F%8C%E6%8C%87%E9%92%88%E7%9A%84%E4%BD%9C%E7%94%A8/",
            "title": "双指针的作用",
            "date_published": "2024-07-24T04:18:41.000Z",
            "content_html": "<h2 id=\"双指针\"><a class=\"anchor\" href=\"#双指针\">#</a> 双指针</h2>\n<p>当需要多次重复的遍历数组时，使用指向头尾的双指针并同时移动它们可以大大减少重复遍历的次数。</p>\n<p>双指针的作用就在于可以跳过无用解。通过使用两个指针（通常一个指向数组的开始，另一个指向数组的末尾）并根据一定的条件同时移动这两个指针，可以有效地在遍历数组时减少不必要的重复遍历，从而提高算法的效率。此外，双指针技术还可以帮助跳过那些不满足特定条件的无用解，进一步优化搜索或计算过程。</p>\n",
            "tags": [
                "Leetcode"
            ]
        },
        {
            "id": "http://smallcjy.github.io/2024/07/23/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E4%B8%B2/",
            "url": "http://smallcjy.github.io/2024/07/23/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E4%B8%B2/",
            "title": "动态规划--最长公共子串",
            "date_published": "2024-07-23T07:06:30.000Z",
            "content_html": "<h2 id=\"动态规划-最长公共子串\"><a class=\"anchor\" href=\"#动态规划-最长公共子串\">#</a> 动态规划 -- 最长公共子串</h2>\n<p>动态规划的问题可以划分为三个步骤，设计网格，确定网格值计算算法，计算网格值</p>\n<h2 id=\"设计网格\"><a class=\"anchor\" href=\"#设计网格\">#</a> 设计网格</h2>\n<p>把两个串作为矩阵的 i 和 j</p>\n<h2 id=\"确定网格值计算方法\"><a class=\"anchor\" href=\"#确定网格值计算方法\">#</a> 确定网格值计算方法</h2>\n<p>这是动态规划类问题的重点和难点，需要根据问题，将问题划分为独立的重复的小问题，这些小问题的值就是网格的值。</p>\n<p>分析：最长公共子串首先需要确定公共子串的特点就是连续的相同字符。相同可以得到相同的字符，连续可以得到左上角的网格的值加 1，两种情况同时考虑就是当字符相同时，该网格的值为左上角的网格值加 1</p>\n<p>这就是网格的计算方法：<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(s1[i] == s2[j])&#123;</span><br><span class=\"line\">    dp[i][j] = dp[i-1][j-1] + 1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else &#123;</span><br><span class=\"line\">    dp[i][j] = 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n",
            "tags": [
                "Leetcode"
            ]
        },
        {
            "id": "http://smallcjy.github.io/2024/07/18/%E5%87%BD%E6%95%B0%E4%B8%8A%E9%94%81/",
            "url": "http://smallcjy.github.io/2024/07/18/%E5%87%BD%E6%95%B0%E4%B8%8A%E9%94%81/",
            "title": "函数上锁",
            "date_published": "2024-07-18T04:55:56.000Z",
            "content_html": "<p>一个函数有两个版本，一个是另一个的包裹器。实际工作的是另一个包裹器内的函数，而包裹器的作用是保证函数在某些特定的情况下才能被使用，比如上锁。</p>\n",
            "tags": [
                "编程经验"
            ]
        }
    ]
}