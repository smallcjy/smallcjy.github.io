

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>Chirpy</title>
  <subtitle>A minimal, responsive and feature-rich Jekyll theme for technical writing.</subtitle>
  <updated>2024-12-12T12:21:59+08:00</updated>
  <author>
    <name>your_full_name</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator>
  <rights> © 2024 your_full_name </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>My New Post</title>
    <link href="http://localhost:4000/posts/my-new-post/" rel="alternate" type="text/html" title="My New Post" />
    <published>2024-12-12T12:18:00+08:00</published>
  
    <updated>2024-12-12T12:18:00+08:00</updated>
  
    <id>http://localhost:4000/posts/my-new-post/</id>
    <content type="text/html" src="http://localhost:4000/posts/my-new-post/" />
    <author>
      <name>your_full_name</name>
    </author>

  
    
  

  <summary>Test</summary>

  </entry>

  
  <entry>
    <title>软件架构期末复习</title>
    <link href="http://localhost:4000/posts/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E5%AE%9E%E8%B7%B5/" rel="alternate" type="text/html" title="软件架构期末复习" />
    <published>2024-09-05T04:51:07+08:00</published>
  
    <updated>2024-09-05T04:51:07+08:00</updated>
  
    <id>http://localhost:4000/posts/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E5%AE%9E%E8%B7%B5/</id>
    <content type="text/html" src="http://localhost:4000/posts/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E5%AE%9E%E8%B7%B5/" />
    <author>
      <name>your_full_name</name>
    </author>

  
    
  

  <summary>考纲

The definition, concepts, and types of Module Structure, Allocation Structure, and C&amp;amp;amp;C1.Structure.

Module Structure

  definition:



模块结构的基本元素是模块，是实现基本单元。模块表示一种考虑系统代码的方法，被分配功能责任区域。

type：

  分解：分解的结果是通过“是一个子模块”关系将彼此关联起来的模块，分解展示如何将较大的模块递归地分解为较小的子模块，直到足够小，可以被理解和实现。
  使用：模块、过程和模块接口上的资源，这些单元通过使用关系连接起来，称第一个单元使用第二个单元。模块结非常适合增量式开发，通过添加模块并通过使用关系连接进系统，实现系统的增量式开发。
  分层：当以一种特定的方式小地控制该结构的使用关系时，就出...</summary>

  </entry>

</feed>


