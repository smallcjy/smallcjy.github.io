<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://smallcjy.github.io</id>
    <title>Blog</title>
    <subtitle></subtitle>
    <icon>http://smallcjy.github.io/images/favicon.ico</icon>
    <link href="http://smallcjy.github.io" />
    <author>
      <name>Cai Junyuan</name>
    </author>
    <updated>2024-08-05T06:47:36.258Z</updated>
    <entry>
        <id>http://smallcjy.github.io/2024/08/05/SIG-Network%200802%20%20%E4%BC%9A%E8%AE%AE%E8%AE%A8%E8%AE%BA%E8%A6%81%E7%82%B9/</id>
        <title></title>
        <link rel="alternate" href="http://smallcjy.github.io/2024/08/05/SIG-Network%200802%20%20%E4%BC%9A%E8%AE%AE%E8%AE%A8%E8%AE%BA%E8%A6%81%E7%82%B9/"/>
        <content type="html">&lt;ol&gt;
&lt;li&gt;lo 添加网段 127.0.0.0/8，可以通过添加多个 ip 解决，但是其上限为 8，添加整个网段还是无法实现&lt;/li&gt;
&lt;li&gt;virtonet 网卡的通信问题，os 联网？&lt;/li&gt;
&lt;li&gt;smoltcp 的 Interface 的 poll？&lt;/li&gt;
&lt;li&gt;smoltcp 的路由模式？每个 iface 都会对 socket 集中的 socket 进行发送的尝试，&lt;/li&gt;
&lt;li&gt;virtonet 的 poll 不发 arp？&lt;/li&gt;
&lt;li&gt;ethernet 如果 ip 或者 route 不在 cache 里，会发 arp。现在 virtonet 发 arp 会卡主，感觉问题出在这。怀疑是 qemu 的网络配置没有配好，导致发出去的 arp 无法接受。&lt;/li&gt;
&lt;li&gt;smoltcp 黑箱无法输出日志调试问题&lt;/li&gt;
&lt;li&gt;ping 用户程序仍有问题&lt;/li&gt;
&lt;/ol&gt;
</content>
        <updated>2024-08-05T06:47:36.258Z</updated>
    </entry>
    <entry>
        <id>http://smallcjy.github.io/2024/08/03/%E4%B8%80%E6%96%87%E6%90%9E%E6%87%82Socket/</id>
        <title>一文搞懂Socket</title>
        <link rel="alternate" href="http://smallcjy.github.io/2024/08/03/%E4%B8%80%E6%96%87%E6%90%9E%E6%87%82Socket/"/>
        <content type="html">&lt;h2 id=&#34;什么是套接字socket&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是套接字socket&#34;&gt;#&lt;/a&gt; 什么是套接字 socket&lt;/h2&gt;
&lt;p&gt;socket 可以被定义描述为两个应用通信通道的端点。一个 Socket 端点可以用 Socket 地址来描述， Socket 地址结构由 IP 地址，端口和使用协议组成（ TCP or UDP ）。socket 介于应用层和传输层之间。但是 socket 作为一 种进程通信机制，操作系统分配唯一一个 socket 号，是依赖于通信协议的，但是这个通信协议不仅仅是 tcp 或 udp，也可以是其它协议。&lt;br&gt;
![[Pasted image 20240803164124.png]]&lt;/p&gt;
&lt;p&gt;socke 的引入是为了解决不同计算机的不同进程之间的通信问题，用来让一个进程和其他进程互通信息，当然也可以在同一计算机之间的不同进程间通信。&lt;/p&gt;
&lt;h3 id=&#34;socket和文件的关系&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#socket和文件的关系&#34;&gt;#&lt;/a&gt; Socket 和文件的关系&lt;/h3&gt;
&lt;p&gt;socket 和文件息息相关，socket 调用会创建 socket 同时返回文件描述符，socket 通信是建立的文件的读写的基础上的。所以说，socket 可以称为一种特殊的 io。&lt;/p&gt;
&lt;h3 id=&#34;服务器端口与连接个数的关系&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#服务器端口与连接个数的关系&#34;&gt;#&lt;/a&gt; 服务器端口与连接个数的关系&lt;/h3&gt;
&lt;p&gt;现在我们来聊一下 Socket 如何建立服务端和客户端的通信。服务端应用程序会创建一个 socket，bind 在一个 ip 的端口上进行监听。在同一时刻，一个端口只能建立一个连接，所以会有一个等待队列，让请求连接的客户端等待。客户端也会创建一个 socket，去 connect 服务端 socket 所在的 ip 和端口，建立连接完成后就可以正常工作通信了。&lt;/p&gt;
&lt;h2 id=&#34;socket建立连接过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#socket建立连接过程&#34;&gt;#&lt;/a&gt; Socket 建立连接过程&lt;/h2&gt;
&lt;h4 id=&#34;建立socket套接字&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#建立socket套接字&#34;&gt;#&lt;/a&gt; 建立 socket 套接字&lt;/h4&gt;
&lt;p&gt;socket 调用。获得文件描述符&lt;/p&gt;
&lt;h4 id=&#34;bind-socket&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#bind-socket&#34;&gt;#&lt;/a&gt; bind socket&lt;/h4&gt;
&lt;p&gt;也就是给 socket 赋予 ip 和 port。通常是由服务端进行 bind，然后 listen socket 地址来准备连接。&lt;/p&gt;
&lt;h4 id=&#34;connect-socket&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#connect-socket&#34;&gt;#&lt;/a&gt; connect socket&lt;/h4&gt;
&lt;p&gt;客户端来 connect，想目标 socket 请求建立连接。使用服务端的 ip 和 port。&lt;/p&gt;
</content>
        <category term="操作系统" scheme="http://smallcjy.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/" />
        <category term="计算机网络" scheme="http://smallcjy.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/" />
        <updated>2024-08-03T12:23:27.000Z</updated>
    </entry>
    <entry>
        <id>http://smallcjy.github.io/2024/08/01/Linux%E6%98%AF%E5%A6%82%E4%BD%95%E8%B7%AF%E7%94%B1%E7%9B%AE%E7%9A%84%E4%B8%BA%E6%9C%AC%E5%9C%B0%E5%9C%B0%E5%9D%80%E7%9A%84packet%E7%9A%84/</id>
        <title>Linux是如何路由目的为本地地址的packet的</title>
        <link rel="alternate" href="http://smallcjy.github.io/2024/08/01/Linux%E6%98%AF%E5%A6%82%E4%BD%95%E8%B7%AF%E7%94%B1%E7%9B%AE%E7%9A%84%E4%B8%BA%E6%9C%AC%E5%9C%B0%E5%9C%B0%E5%9D%80%E7%9A%84packet%E7%9A%84/"/>
        <content type="html">&lt;h2 id=&#34;特殊路由&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#特殊路由&#34;&gt;#&lt;/a&gt; 特殊路由&lt;/h2&gt;
&lt;p&gt;在 Linux 中有两张路由表，其中一张负责本地地址，所有查找成功的 packet 表明要发送到本地主机。&lt;/p&gt;
</content>
        <category term="操作系统" scheme="http://smallcjy.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/" />
        <category term="计算机网络" scheme="http://smallcjy.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/" />
        <updated>2024-08-01T12:23:27.000Z</updated>
    </entry>
    <entry>
        <id>http://smallcjy.github.io/2024/07/27/IcmpSocket%E6%98%AF%E5%90%A6%E5%B1%9E%E4%BA%8E%E5%86%85%E6%A0%B8%E7%9A%84%E8%8C%83%E7%95%B4/</id>
        <title>icmpSocket是否属于内核范畴</title>
        <link rel="alternate" href="http://smallcjy.github.io/2024/07/27/IcmpSocket%E6%98%AF%E5%90%A6%E5%B1%9E%E4%BA%8E%E5%86%85%E6%A0%B8%E7%9A%84%E8%8C%83%E7%95%B4/"/>
        <content type="html">&lt;p&gt;icmpSocket 并不是在内核中实现的，Linux 标准下的 socket 调用中的 type 中并不包含 icmpSocket 类型的。那现实中的所谓的 icmpSocket 是如何实现的呢？&lt;/p&gt;
&lt;p&gt;答案是 udpSocket + icmpPacket。&lt;/p&gt;
&lt;h2 id=&#34;icmp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#icmp&#34;&gt;#&lt;/a&gt; icmp&lt;/h2&gt;
&lt;p&gt;互联网控制消息协议 (ICMP) 是网络设备用来诊断网络通信问题的&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY2xvdWRmbGFyZS5jb20vbGVhcm5pbmcvbmV0d29yay1sYXllci93aGF0LWlzLXRoZS1uZXR3b3JrLWxheWVyLw==&#34;&gt;网络层&lt;/span&gt;协议。ICMP 主要用于确定数据是否及时到达其预期目的地。通常，ICMP &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY2xvdWRmbGFyZS5jb20vbGVhcm5pbmcvbmV0d29yay1sYXllci93aGF0LWlzLWEtcHJvdG9jb2wv&#34;&gt;协议&lt;/span&gt;用于网络设备，例如&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY2xvdWRmbGFyZS5jb20vbGVhcm5pbmcvbmV0d29yay1sYXllci93aGF0LWlzLWEtcm91dGVyLw==&#34;&gt;路由器&lt;/span&gt;。ICMP 是进行错误报告和测试的关键，但它也可以用于&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY2xvdWRmbGFyZS5jb20vbGVhcm5pbmcvZGRvcy93aGF0LWlzLWEtZGRvcy1hdHRhY2sv&#34;&gt;分布式拒绝服务 (DDoS) 攻击&lt;/span&gt;。&lt;/p&gt;
&lt;h2 id=&#34;icmp-packet&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#icmp-packet&#34;&gt;#&lt;/a&gt; icmp Packet&lt;/h2&gt;
&lt;p&gt;ICMP 数据包是使用 ICMP 协议的数据包。 ICMP 数据包在正常的 IP 头之后包括一个 ICMP 头。 当路由器或服务器需要发送错误信息时，ICMP 数据包主体或数据部分总是包含一份导致错误的数据包的 IP 头的副本。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果需要向一个地址发送 icmp 数据包， 可以向系统申请 udpSocket，向 socket 发送 icmp 数据包。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在其他系统中则是使用 rawSocket&lt;/p&gt;
</content>
        <category term="操作系统" scheme="http://smallcjy.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/" />
        <updated>2024-07-27T09:25:07.000Z</updated>
    </entry>
    <entry>
        <id>http://smallcjy.github.io/2024/07/27/DragonOS--kernal%E6%80%81%E5%88%87%E6%8D%A2user%E6%80%81/</id>
        <title>DragonOS内核态向用户态进行切换</title>
        <link rel="alternate" href="http://smallcjy.github.io/2024/07/27/DragonOS--kernal%E6%80%81%E5%88%87%E6%8D%A2user%E6%80%81/"/>
        <content type="html">&lt;h2 id=&#34;关键函数-switch_to_user&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#关键函数-switch_to_user&#34;&gt;#&lt;/a&gt; 关键函数： switch_to_user（）&lt;/h2&gt;
&lt;h3 id=&#34;粗略版步骤&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#粗略版步骤&#34;&gt;#&lt;/a&gt; （粗略版）步骤：&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;删除当前进程的 kthread 的标志&lt;/li&gt;
&lt;li&gt;读取指定路径下的 trap_frame，执行 init 进程&lt;/li&gt;
&lt;li&gt;这里要用 try_to_run_init_process 进行封装，因为要判断执行进程失败的原因是无法加载初始化程序还是其他 原因&lt;/li&gt;
&lt;li&gt;调用 do_execve 函数执行 init 程序&lt;/li&gt;
&lt;li&gt;执行 arch 下的用户态切换，先获取 trap_frame 的虚存地址，使用 assert！判断当前堆栈指针是否小于 trap_frame 的地址，如果堆栈指针大于等于它，终止进程，说明出现堆栈溢出。切换 archpcb 的 fs 和 gs 为用户态的 fs 和 gs，储存内核的 gs 数据，切换 fs 和 gs 寄存器。&lt;/li&gt;
&lt;li&gt;更新 rip 指针&lt;/li&gt;
&lt;li&gt;释放上面申请的所有守卫和引用计数变量，否则会导致内存错误&lt;/li&gt;
&lt;li&gt;进入 ready 状态，执行 user 态的切换，把进程的 trap_frame 指针指向 trap_frame。&lt;/li&gt;
&lt;li&gt;执行一段汇编代码（rust 的内联汇编技术）：交换当前的 GS 基址寄存器和内核的 GS 基址寄存器。将  &lt;code&gt;trapframe_vaddr&lt;/code&gt;  的值移动到 RSP 寄存器（Stack Pointer）。这将改变当前的堆栈指针。将  &lt;code&gt;new_rip&lt;/code&gt;  的值压入堆栈。在 x86 架构中，RIP 寄存器（Instruction Pointer）存储了下一条要执行的指令的地址。这条指令从堆栈中弹出一个值，并跳转到这个地址。这通常用于从函数返回。&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="DragonOS" scheme="http://smallcjy.github.io/tags/DragonOS/" />
        <updated>2024-07-27T08:25:35.000Z</updated>
    </entry>
    <entry>
        <id>http://smallcjy.github.io/2024/07/27/%E5%86%85%E5%AD%98%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98%E4%B9%8B%20use-after-free%20%E6%BC%8F%E6%B4%9E%E9%97%AE%E9%A2%98/</id>
        <title>内存问题之 use-after-free 问题</title>
        <link rel="alternate" href="http://smallcjy.github.io/2024/07/27/%E5%86%85%E5%AD%98%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98%E4%B9%8B%20use-after-free%20%E6%BC%8F%E6%B4%9E%E9%97%AE%E9%A2%98/"/>
        <content type="html">&lt;h2 id=&#34;介绍&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#介绍&#34;&gt;#&lt;/a&gt; 介绍：&lt;/h2&gt;
&lt;p&gt;“use-after-free” 指的是 free 了某块内存后，程序继续使用了已释放的内存区域。发生的主要原因是当程序的某个对象释放后，其指针未被正常的清理，导致程序误以为该内存区域仍然可用。&lt;/p&gt;
&lt;p&gt;free 调用的过早导致内存错乱&lt;/p&gt;
</content>
        <category term="DragonOS" scheme="http://smallcjy.github.io/tags/DragonOS/" />
        <updated>2024-07-27T08:25:35.000Z</updated>
    </entry>
    <entry>
        <id>http://smallcjy.github.io/2024/07/27/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E6%9C%89%E8%B6%A3%E7%9A%84bug/</id>
        <title>记录一次有趣的bug</title>
        <link rel="alternate" href="http://smallcjy.github.io/2024/07/27/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E6%9C%89%E8%B6%A3%E7%9A%84bug/"/>
        <content type="html">&lt;h2 id=&#34;描述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#描述&#34;&gt;#&lt;/a&gt; 描述&lt;/h2&gt;
&lt;p&gt;这是个非常抽象的 bug，如果你曾在网络中听说过这样的段子：不要删除某注释，不然会引发 bug。而我遇到的 bug 是，不要删除某日志输出，不然会引发 bug。&lt;/p&gt;
</content>
        <category term="DragonOS" scheme="http://smallcjy.github.io/tags/DragonOS/" />
        <updated>2024-07-27T08:25:35.000Z</updated>
    </entry>
    <entry>
        <id>http://smallcjy.github.io/2024/07/27/%E8%AE%BE%E5%A4%87%E6%B3%A8%E5%86%8C%E8%BF%87%E7%A8%8B%E5%92%8C%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83/</id>
        <title>关于DragonOS设备及驱动注册规范</title>
        <link rel="alternate" href="http://smallcjy.github.io/2024/07/27/%E8%AE%BE%E5%A4%87%E6%B3%A8%E5%86%8C%E8%BF%87%E7%A8%8B%E5%92%8C%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83/"/>
        <content type="html">&lt;h2 id=&#34;设备驱动注册函数设备注册函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#设备驱动注册函数设备注册函数&#34;&gt;#&lt;/a&gt; 设备驱动注册函数 / 设备注册函数&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;device_driver_init() &lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Driver 结构体创建；（new ()）&lt;/li&gt;
&lt;li&gt;平台设备驱动管理注册。(platform_driver_manager ().register ())&lt;br&gt;
 &lt;code&gt; device_init()&lt;/code&gt; &lt;br&gt;
&lt;strong&gt; device 实现逻辑&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;调用设备管理方法信息设备的默认初始化&lt;/strong&gt;&lt;br&gt;
 &lt;code&gt;device_manager().device_default_initialize(&amp;amp;(device.clone() as Arc&amp;lt;dyn Device&amp;gt;));&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;调用平台设备管理方法进行平台设备的登记&lt;/strong&gt;&lt;br&gt;
 &lt;figure class=&#34;highlight rust&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;platform_device_manager&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;.&lt;span class=&#34;title function_ invoke__&#34;&gt;device_add&lt;/span&gt;(device.&lt;span class=&#34;title function_ invoke__&#34;&gt;clone&lt;/span&gt;() &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; Arc&amp;lt;&lt;span class=&#34;keyword&#34;&gt;dyn&lt;/span&gt; PlatformDevice&amp;gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;.&lt;span class=&#34;title function_ invoke__&#34;&gt;expect&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;vesa_fb_device_init: platform_device_manager().device_add failed&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用什么设备来帮助自己的实现，就要调用相对应的设备注册函数来注册&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;任何一个设备都包括设备本身和设备驱动&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;设备device&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#设备device&#34;&gt;#&lt;/a&gt; &lt;strong&gt;设备 Device&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&#34;设备结构体组成&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#设备结构体组成&#34;&gt;#&lt;/a&gt; 设备结构体组成&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;- inner：SpinLock&amp;lt;InnerDevice&amp;gt;内部结构（设备实现逻辑)
- kobj_state: LockedKObjectStated
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;innerdevice结构体的主要成员&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#innerdevice结构体的主要成员&#34;&gt;#&lt;/a&gt; InnerDevice 结构体的主要成员&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;- bus;
- class
- driver
- kern_inode
- parent
- kset
- kobj_type
- device_state
- pdev_id
- pdev_id_auto
- 其他相关的成员
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;为device实现接口-platformdevice&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为device实现接口-platformdevice&#34;&gt;#&lt;/a&gt; 为 Device 实现接口 PlatFormDevice&lt;/h4&gt;
&lt;p&gt;&lt;figure class=&#34;highlight rust&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;pdev_name&lt;/span&gt;(&amp;amp;&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;) &lt;span class=&#34;punctuation&#34;&gt;-&amp;gt;&lt;/span&gt; &amp;amp;&lt;span class=&#34;type&#34;&gt;str&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;Self&lt;/span&gt;::NAME&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;set_pdev_id&lt;/span&gt;(&amp;amp;&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;, id: &lt;span class=&#34;type&#34;&gt;i32&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;.inner.&lt;span class=&#34;title function_ invoke__&#34;&gt;lock&lt;/span&gt;().pdev_id = id;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;set_pdev_id_auto&lt;/span&gt;(&amp;amp;&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;, id_auto: &lt;span class=&#34;type&#34;&gt;bool&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;.inner.&lt;span class=&#34;title function_ invoke__&#34;&gt;lock&lt;/span&gt;().pdev_id_auto = id_auto;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;is_initialized&lt;/span&gt;(&amp;amp;&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;) &lt;span class=&#34;punctuation&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;bool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;.inner.&lt;span class=&#34;title function_ invoke__&#34;&gt;lock&lt;/span&gt;().device_state == DeviceState::Initialized&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;set_state&lt;/span&gt;(&amp;amp;&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;, set_state: DeviceState) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;.inner.&lt;span class=&#34;title function_ invoke__&#34;&gt;lock&lt;/span&gt;().device_state = set_state;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;为device实现device接口&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为device实现device接口&#34;&gt;#&lt;/a&gt; 为 Device 实现 Device 接口&lt;/h4&gt;
&lt;p&gt;&lt;figure class=&#34;highlight rust&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;dev_type&lt;/span&gt;(&amp;amp;&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;) &lt;span class=&#34;punctuation&#34;&gt;-&amp;gt;&lt;/span&gt; DeviceType &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;DeviceType::Char&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;id_table&lt;/span&gt;(&amp;amp;&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;) &lt;span class=&#34;punctuation&#34;&gt;-&amp;gt;&lt;/span&gt; IdTable &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;IdTable::&lt;span class=&#34;title function_ invoke__&#34;&gt;new&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;.&lt;span class=&#34;title function_ invoke__&#34;&gt;name&lt;/span&gt;(), &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;bus&lt;/span&gt;(&amp;amp;&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;) &lt;span class=&#34;punctuation&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;Option&lt;/span&gt;&amp;lt;Weak&amp;lt;&lt;span class=&#34;keyword&#34;&gt;dyn&lt;/span&gt; Bus&amp;gt;&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;.inner.&lt;span class=&#34;title function_ invoke__&#34;&gt;lock&lt;/span&gt;().bus.&lt;span class=&#34;title function_ invoke__&#34;&gt;clone&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;set_bus&lt;/span&gt;(&amp;amp;&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;, bus: &lt;span class=&#34;type&#34;&gt;Option&lt;/span&gt;&amp;lt;Weak&amp;lt;&lt;span class=&#34;keyword&#34;&gt;dyn&lt;/span&gt; Bus&amp;gt;&amp;gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;.inner.&lt;span class=&#34;title function_ invoke__&#34;&gt;lock&lt;/span&gt;().bus = bus;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;set_class&lt;/span&gt;(&amp;amp;&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;, class: &lt;span class=&#34;type&#34;&gt;Option&lt;/span&gt;&amp;lt;Weak&amp;lt;&lt;span class=&#34;keyword&#34;&gt;dyn&lt;/span&gt; Class&amp;gt;&amp;gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;.inner.&lt;span class=&#34;title function_ invoke__&#34;&gt;lock&lt;/span&gt;().class = class;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;class&lt;/span&gt;(&amp;amp;&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;) &lt;span class=&#34;punctuation&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;Option&lt;/span&gt;&amp;lt;Arc&amp;lt;&lt;span class=&#34;keyword&#34;&gt;dyn&lt;/span&gt; Class&amp;gt;&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;mut &lt;/span&gt;&lt;span class=&#34;variable&#34;&gt;guard&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;.inner.&lt;span class=&#34;title function_ invoke__&#34;&gt;lock&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;r&lt;/span&gt; = guard.class.&lt;span class=&#34;title function_ invoke__&#34;&gt;clone&lt;/span&gt;()?.&lt;span class=&#34;title function_ invoke__&#34;&gt;upgrade&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; r.&lt;span class=&#34;title function_ invoke__&#34;&gt;is_none&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 为了让弱引用失效&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;guard.class = &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; r;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;driver&lt;/span&gt;(&amp;amp;&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;) &lt;span class=&#34;punctuation&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;Option&lt;/span&gt;&amp;lt;Arc&amp;lt;&lt;span class=&#34;keyword&#34;&gt;dyn&lt;/span&gt; Driver&amp;gt;&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;.inner.&lt;span class=&#34;title function_ invoke__&#34;&gt;lock&lt;/span&gt;().driver.&lt;span class=&#34;title function_ invoke__&#34;&gt;clone&lt;/span&gt;()?.&lt;span class=&#34;title function_ invoke__&#34;&gt;upgrade&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;set_driver&lt;/span&gt;(&amp;amp;&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;, driver: &lt;span class=&#34;type&#34;&gt;Option&lt;/span&gt;&amp;lt;Weak&amp;lt;&lt;span class=&#34;keyword&#34;&gt;dyn&lt;/span&gt; Driver&amp;gt;&amp;gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;.inner.&lt;span class=&#34;title function_ invoke__&#34;&gt;lock&lt;/span&gt;().driver = driver;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;is_dead&lt;/span&gt;(&amp;amp;&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;) &lt;span class=&#34;punctuation&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;bool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;can_match&lt;/span&gt;(&amp;amp;&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;) &lt;span class=&#34;punctuation&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;bool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;set_can_match&lt;/span&gt;(&amp;amp;&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;, _can_match: &lt;span class=&#34;type&#34;&gt;bool&lt;/span&gt;) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;state_synced&lt;/span&gt;(&amp;amp;&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;) &lt;span class=&#34;punctuation&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;bool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;为device实现kobject接口&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为device实现kobject接口&#34;&gt;#&lt;/a&gt; 为 Device 实现 KObject 接口&lt;/h4&gt;
&lt;p&gt;&lt;figure class=&#34;highlight rust&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;as_any_ref&lt;/span&gt;(&amp;amp;&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;) &lt;span class=&#34;punctuation&#34;&gt;-&amp;gt;&lt;/span&gt; &amp;amp;&lt;span class=&#34;keyword&#34;&gt;dyn&lt;/span&gt; core::any::Any &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;set_inode&lt;/span&gt;(&amp;amp;&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;, inode: &lt;span class=&#34;type&#34;&gt;Option&lt;/span&gt;&amp;lt;Arc&amp;lt;KernFSInode&amp;gt;&amp;gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;.inner.&lt;span class=&#34;title function_ invoke__&#34;&gt;lock&lt;/span&gt;().kern_inode = inode;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;inode&lt;/span&gt;(&amp;amp;&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;) &lt;span class=&#34;punctuation&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;Option&lt;/span&gt;&amp;lt;Arc&amp;lt;KernFSInode&amp;gt;&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;.inner.&lt;span class=&#34;title function_ invoke__&#34;&gt;lock&lt;/span&gt;().kern_inode.&lt;span class=&#34;title function_ invoke__&#34;&gt;clone&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;parent&lt;/span&gt;(&amp;amp;&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;) &lt;span class=&#34;punctuation&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;Option&lt;/span&gt;&amp;lt;Weak&amp;lt;&lt;span class=&#34;keyword&#34;&gt;dyn&lt;/span&gt; KObject&amp;gt;&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;.inner.&lt;span class=&#34;title function_ invoke__&#34;&gt;lock&lt;/span&gt;().parent.&lt;span class=&#34;title function_ invoke__&#34;&gt;clone&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;set_parent&lt;/span&gt;(&amp;amp;&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;, parent: &lt;span class=&#34;type&#34;&gt;Option&lt;/span&gt;&amp;lt;Weak&amp;lt;&lt;span class=&#34;keyword&#34;&gt;dyn&lt;/span&gt; KObject&amp;gt;&amp;gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;.inner.&lt;span class=&#34;title function_ invoke__&#34;&gt;lock&lt;/span&gt;().parent = parent;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;kset&lt;/span&gt;(&amp;amp;&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;) &lt;span class=&#34;punctuation&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;Option&lt;/span&gt;&amp;lt;Arc&amp;lt;KSet&amp;gt;&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;.inner.&lt;span class=&#34;title function_ invoke__&#34;&gt;lock&lt;/span&gt;().kset.&lt;span class=&#34;title function_ invoke__&#34;&gt;clone&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;set_kset&lt;/span&gt;(&amp;amp;&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;, kset: &lt;span class=&#34;type&#34;&gt;Option&lt;/span&gt;&amp;lt;Arc&amp;lt;KSet&amp;gt;&amp;gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;.inner.&lt;span class=&#34;title function_ invoke__&#34;&gt;lock&lt;/span&gt;().kset = kset;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;kobj_type&lt;/span&gt;(&amp;amp;&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;) &lt;span class=&#34;punctuation&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;Option&lt;/span&gt;&amp;lt;&amp;amp;&lt;span class=&#34;symbol&#34;&gt;&amp;#x27;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;dyn&lt;/span&gt; KObjType&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;.inner.&lt;span class=&#34;title function_ invoke__&#34;&gt;lock&lt;/span&gt;().kobj_type&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;set_kobj_type&lt;/span&gt;(&amp;amp;&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;, ktype: &lt;span class=&#34;type&#34;&gt;Option&lt;/span&gt;&amp;lt;&amp;amp;&lt;span class=&#34;symbol&#34;&gt;&amp;#x27;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;dyn&lt;/span&gt; KObjType&amp;gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;.inner.&lt;span class=&#34;title function_ invoke__&#34;&gt;lock&lt;/span&gt;().kobj_type = ktype;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;name&lt;/span&gt;(&amp;amp;&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;) &lt;span class=&#34;punctuation&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;Self&lt;/span&gt;::NAME.&lt;span class=&#34;title function_ invoke__&#34;&gt;to_string&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;set_name&lt;/span&gt;(&amp;amp;&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;, _name: &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// do nothing&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;kobj_state&lt;/span&gt;(&amp;amp;&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;) &lt;span class=&#34;punctuation&#34;&gt;-&amp;gt;&lt;/span&gt; RwLockReadGuard&amp;lt;KObjectState&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;.kobj_state.&lt;span class=&#34;title function_ invoke__&#34;&gt;read&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;kobj_state_mut&lt;/span&gt;(&amp;amp;&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;) &lt;span class=&#34;punctuation&#34;&gt;-&amp;gt;&lt;/span&gt; RwLockWriteGuard&amp;lt;KObjectState&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;.kobj_state.&lt;span class=&#34;title function_ invoke__&#34;&gt;write&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;set_kobj_state&lt;/span&gt;(&amp;amp;&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;, state: KObjectState) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;*&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;.kobj_state.&lt;span class=&#34;title function_ invoke__&#34;&gt;write&lt;/span&gt;() = state;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;为device实现自己的需求的接口&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为device实现自己的需求的接口&#34;&gt;#&lt;/a&gt; 为 Device 实现自己的需求的接口&lt;/h4&gt;
&lt;p&gt;略&lt;/p&gt;
&lt;h3 id=&#34;设备驱动程序&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#设备驱动程序&#34;&gt;#&lt;/a&gt; 设备驱动程序&lt;/h3&gt;
&lt;h4 id=&#34;driver结构体&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#driver结构体&#34;&gt;#&lt;/a&gt; Driver 结构体&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;- inner： InnerDriver
- kobj_state： LockedKObjectState
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;结构体方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#结构体方法&#34;&gt;#&lt;/a&gt; 结构体方法&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;- new()和设备一样初始化inner和kobj_state
- inner：
	- ktype: Option&amp;lt;&amp;amp;&#39;static dyn KObjType&amp;gt;,
	
	- kset: Option&amp;lt;Arc&amp;lt;KSet&amp;gt;&amp;gt;,
	
	- parent: Option&amp;lt;Weak&amp;lt;dyn KObject&amp;gt;&amp;gt;,
	
	- kernfs_inode: Option&amp;lt;Arc&amp;lt;KernFSInode&amp;gt;&amp;gt;,
	
	- devices: Vec&amp;lt;Arc&amp;lt;dyn Device&amp;gt;&amp;gt;,
	
	- bus: Option&amp;lt;Weak&amp;lt;dyn Bus&amp;gt;&amp;gt;,
	  
	- self_ref: Weak&amp;lt;VesaFbDriver&amp;gt;,
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;实现platformdriver接口&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实现platformdriver接口&#34;&gt;#&lt;/a&gt; 实现 PlatformDriver 接口&lt;/h4&gt;
&lt;h4 id=&#34;实现driver接口&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实现driver接口&#34;&gt;#&lt;/a&gt; 实现 Driver 接口&lt;/h4&gt;
&lt;h4 id=&#34;实现kobject接口&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实现kobject接口&#34;&gt;#&lt;/a&gt; 实现 KObject 接口&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;接口的实现可以参考上面的 Device&lt;/strong&gt;&lt;/p&gt;
</content>
        <category term="DragonOS" scheme="http://smallcjy.github.io/tags/DragonOS/" />
        <updated>2024-07-27T08:25:35.000Z</updated>
    </entry>
    <entry>
        <id>http://smallcjy.github.io/2024/07/27/DragonOS%E7%BD%91%E7%BB%9C%E5%AD%90%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/</id>
        <title>DragonOS网络子系统学习</title>
        <link rel="alternate" href="http://smallcjy.github.io/2024/07/27/DragonOS%E7%BD%91%E7%BB%9C%E5%AD%90%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/"/>
        <content type="html">&lt;h2 id=&#34;创建socket&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建socket&#34;&gt;#&lt;/a&gt; 创建 socket&lt;/h2&gt;
&lt;p&gt;在 DragonOS 中，Socket 层是为实现各种 Socket 系统调用而实现的对 smoltcpSocket 结构体的封装。&lt;/p&gt;
&lt;p&gt;用户程序调用 sys_socket 调用时，会对应调用系统的 socket 调用，使用参数 &lt;code&gt;address_family&lt;/code&gt;  、 &lt;code&gt;socket_type&lt;/code&gt;  、 &lt;code&gt;protocol&lt;/code&gt;  创建一个 Socket，并使用该 socket 创建一个 socket iNode，添加到文件描述符表中。&lt;/p&gt;
&lt;p&gt;用户程序在获取到返回的文件描述符 fd 后，需要绑定端口，以区分不同的网络服务。同样的，用户程序的 bing 调用对应 socket 层中的 bind 方法。&lt;/p&gt;
&lt;p&gt;//TODO：可以补充调用的具体实现，这里为了快速了解数据包的传输过程，就不过多阐述。&lt;/p&gt;
&lt;p&gt;绑定完端口后需要对端口进行监听，以获取从该端口返回的数据。调用 listen 调用。&lt;/p&gt;
&lt;p&gt;bind 和 listen 成功了，socket 的 connect 的预工作就完成了，接下来就可以进行 connect 了。这里会调用 connect 调用。调用完 connect 连接后就会调用 accept 调用，接受来自外部的 socket 连接，&lt;/p&gt;
</content>
        <category term="DragonOS" scheme="http://smallcjy.github.io/tags/DragonOS/" />
        <updated>2024-07-27T08:25:33.000Z</updated>
    </entry>
    <entry>
        <id>http://smallcjy.github.io/2024/07/27/Loopback%E7%BD%91%E5%8D%A1%E5%AE%9E%E7%8E%B0/</id>
        <title>Loopback回环网卡设备实现</title>
        <link rel="alternate" href="http://smallcjy.github.io/2024/07/27/Loopback%E7%BD%91%E5%8D%A1%E5%AE%9E%E7%8E%B0/"/>
        <content type="html">&lt;p&gt;&lt;strong&gt;重要参考 smoltcp&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;loopback网卡介绍&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#loopback网卡介绍&#34;&gt;#&lt;/a&gt; LoopBack 网卡介绍&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Linux LoopBack 网卡是一个虚拟的网络接口，主要用于网络软件的测试和调试。它允许主机发送网络流量到自己，而不需要任何物理设备。当数据发送到 LoopBack 接口时，操作系统网络栈会立即接收这些数据，就像它们从网络上接收的一样。这使得开发人员可以测试和调试网络应用程序，而无需物理网络连接。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;lo 网卡注册在设备中，了解一个 net device 是如何注册的和如何实现 driver 的。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;实现loopback网卡背景知识&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实现loopback网卡背景知识&#34;&gt;#&lt;/a&gt; 实现 LoopBack 网卡背景知识&lt;/h2&gt;
&lt;h3 id=&#34;网络基础&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网络基础&#34;&gt;#&lt;/a&gt; 网络基础&lt;/h3&gt;
&lt;p&gt;网络层&lt;/p&gt;
&lt;h3 id=&#34;linux网络配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#linux网络配置&#34;&gt;#&lt;/a&gt; Linux 网络配置&lt;/h3&gt;
&lt;h2 id=&#34;loopback-linux源码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#loopback-linux源码&#34;&gt;#&lt;/a&gt; LoopBack Linux 源码&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jb2RlLmRyYWdvbm9zLm9yZy5jbi94cmVmL2xpbnV4LTYuMS45L2RyaXZlcnMvbmV0L2xvb3BiYWNrLmM=&#34;&gt;https://code.dragonos.org.cn/xref/linux-6.1.9/drivers/net/loopback.c&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;loopback源码分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#loopback源码分析&#34;&gt;#&lt;/a&gt; LoopBack 源码分析&lt;/h2&gt;
&lt;h3 id=&#34;环回结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#环回结构&#34;&gt;#&lt;/a&gt; 环回结构&lt;/h3&gt;
&lt;h3 id=&#34;导出函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#导出函数&#34;&gt;#&lt;/a&gt; 导出函数&lt;/h3&gt;
&lt;h3 id=&#34;环回传输函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#环回传输函数&#34;&gt;#&lt;/a&gt; 环回传输函数&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;loopback_xmit 函数&lt;/strong&gt; ，接收两个参数：一个是 &lt;code&gt;struct sk_buff *skb&lt;/code&gt; ，表示要&lt;strong&gt;发送的数据包&lt;/strong&gt;；另一个是 &lt;code&gt;struct net_device *dev&lt;/code&gt; ，表示&lt;strong&gt;要发送数据的设备&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;以下是这段代码的主要步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;skb_tx_timestamp(skb);&lt;/code&gt; ：记录数据包的发送时间戳。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;skb_clear_tstamp(skb);&lt;/code&gt; ：清除数据包的时间戳，以防止 &lt;code&gt;net_timestamp_check()&lt;/code&gt;  函数被不同的时钟基准混淆。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;skb_orphan(skb);&lt;/code&gt; ：&lt;strong&gt;将数据包的所有者设置为 NULL&lt;/strong&gt;，这样在数据包被释放时，不会影响到任何进程。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;skb_dst_force(skb);&lt;/code&gt; ：确保&lt;strong&gt;数据包的目的地被引用计数&lt;/strong&gt;，这样在数据包被处理时，目的地不会被意外释放。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;skb-&amp;gt;protocol = eth_type_trans(skb, dev);&lt;/code&gt; ：&lt;strong&gt;设置数据包的协议类型&lt;/strong&gt;，这是通过调用 &lt;code&gt;eth_type_trans()&lt;/code&gt;  函数来确定的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;len = skb-&amp;gt;len;&lt;/code&gt; ：记录数据包的长度。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;if (likely(__netif_rx(skb) == NET_RX_SUCCESS))&lt;/code&gt; ：将数据包提交给&lt;strong&gt;网络接口接收函数&lt;/strong&gt; &lt;code&gt;__netif_rx()&lt;/code&gt; ，如果接收成功，则更新设备的统计信息。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;return NETDEV_TX_OK;&lt;/code&gt; ：返回 &lt;code&gt;NETDEV_TX_OK&lt;/code&gt; ，表示数据包已经成功发送。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这段代码的主要目的是将数据包从 LoopBack 网卡发送到网络接口，然后由网络接口将数据包传递给网络协议栈进行处理。&lt;/p&gt;
&lt;h3 id=&#34;统计信息读取函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#统计信息读取函数&#34;&gt;#&lt;/a&gt; 统计信息读取函数&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;dev_lstats_read 函数&lt;/strong&gt;，这段代码是从 Linux 内核中&lt;strong&gt;读取网络设备统计信息&lt;/strong&gt;的函数。函数名为 &lt;code&gt;dev_lstats_read&lt;/code&gt; ，它接收三个参数：一个是 &lt;code&gt;struct net_device *dev&lt;/code&gt; ，表示&lt;strong&gt;网络设备&lt;/strong&gt;；另外两个是 &lt;code&gt;u64 *packets&lt;/code&gt;  和 &lt;code&gt;u64 *bytes&lt;/code&gt; ，它们用于&lt;strong&gt;存储读取的数据包数量&lt;/strong&gt;和&lt;strong&gt;字节数&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;以下是这段代码的主要步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;初始化 &lt;code&gt;packets&lt;/code&gt;  和 &lt;code&gt;bytes&lt;/code&gt;  为 0。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 &lt;code&gt;for_each_possible_cpu(i)&lt;/code&gt;  循环遍历每个可能的 CPU。这是因为在多核系统中，每个 CPU 都可能有自己的统计信息。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;获取每个 CPU 的统计信息&lt;/strong&gt;，这是通过调用 &lt;code&gt;per_cpu_ptr(dev-&amp;gt;lstats, i)&lt;/code&gt;  函数来实现的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 &lt;code&gt;do...while&lt;/code&gt; &lt;strong&gt; 循环读取统计信息，直到读取成功&lt;/strong&gt;。（spinlock 自旋锁的访问？）这是因为在多线程环境中，统计信息可能在读取过程中被其他线程修改，所以需要使用 &lt;code&gt;u64_stats_fetch_begin_irq()&lt;/code&gt;  和 &lt;code&gt;u64_stats_fetch_retry_irq()&lt;/code&gt;  函数来确保读取的一致性。（&lt;strong&gt;禁用中断&lt;/strong&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将读取的数据包数量和字节数累加到 &lt;code&gt;packets&lt;/code&gt;  和 &lt;code&gt;bytes&lt;/code&gt;  中。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这段代码的主要目的是读取网络设备的统计信息，包括发送和接收的数据包数量和字节数。这些信息对于网络性能的监控和调优非常重要。&lt;/p&gt;
&lt;h3 id=&#34;统计信息更新函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#统计信息更新函数&#34;&gt;#&lt;/a&gt; 统计信息更新函数&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;loopback_get_stats64 函数&lt;/strong&gt;，用于向用户空间提供更新的统计信息，通常是被网络监控工具使用。这段代码是从 Linux 内核中获取 LoopBack 网卡统计信息的函数。函数名为 &lt;code&gt;loopback_get_stats64&lt;/code&gt; ，它接收两个参数：一个是 &lt;code&gt;struct net_device *dev&lt;/code&gt; ，表示网络设备；另一个是 &lt;code&gt;struct rtnl_link_stats64 *stats&lt;/code&gt; ，用于&lt;strong&gt;存储读取的统计信息&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;以下是这段代码的主要步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;定义两个变量 &lt;code&gt;packets&lt;/code&gt;  和 &lt;code&gt;bytes&lt;/code&gt; ，用于&lt;strong&gt;存储读取的数据包数量和字节数。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;调用 &lt;code&gt;dev_lstats_read(dev, &amp;amp;packets, &amp;amp;bytes);&lt;/code&gt; （&lt;strong&gt;上一个函数实现&lt;/strong&gt;）函数读取统计信息。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将读取的数据包数量和字节数分别赋值给 &lt;code&gt;stats-&amp;gt;rx_packets&lt;/code&gt; 、 &lt;code&gt;stats-&amp;gt;tx_packets&lt;/code&gt; 、 &lt;code&gt;stats-&amp;gt;rx_bytes&lt;/code&gt;  和 &lt;code&gt;stats-&amp;gt;tx_bytes&lt;/code&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这段代码的主要目的是获取 LoopBack 网卡的统计信息，包括发送和接收的数据包数量和字节数。这些信息对于网络性能的监控和调优非常重要。&lt;/p&gt;
&lt;h3 id=&#34;设备初始化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#设备初始化&#34;&gt;#&lt;/a&gt; 设备初始化&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;loopback_dev_init 函数 返回 int&lt;/strong&gt; ， 函数初始化环回设备的统计信息结构，如果内存分配失败则返回错误。它接收一个参数： &lt;code&gt;struct net_device *dev&lt;/code&gt; ，表示要初始化的网络设备。&lt;/p&gt;
&lt;p&gt;以下是这段代码的主要步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;调用 &lt;code&gt;netdev_alloc_pcpu_stats(struct pcpu_lstats)&lt;/code&gt;  函数为每个 CPU 分配一个 &lt;code&gt;pcpu_lstats&lt;/code&gt;  结构体的空间，并将结果赋值给 &lt;code&gt;dev-&amp;gt;lstats&lt;/code&gt; 。 &lt;code&gt;pcpu_lstats&lt;/code&gt;  结构体用于&lt;strong&gt;存储每个 CPU 的统计信息&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;检查 &lt;code&gt;dev-&amp;gt;lstats&lt;/code&gt;  是否为 NULL。如果为 NULL，表示内存分配失败，返回 &lt;code&gt;-ENOMEM&lt;/code&gt;  错误码。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果内存分配成功，返回 0 表示初始化成功。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这段代码的主要目的是初始化 LoopBack 网卡的统计信息结构体，为后续的统计信息收集做准备。&lt;/p&gt;
&lt;h3 id=&#34;设备释放函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#设备释放函数&#34;&gt;#&lt;/a&gt; 设备释放函数&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;loopback_dev_free 函数&lt;/strong&gt;在环回设备被移除时调用，以释放分配的资源。&lt;/p&gt;
&lt;p&gt;把网络设备的 loopback_back 指向 NULL，并释放 dev 的 lstats（结构体用于&lt;strong&gt;存储每个 CPU 的统计信息&lt;/strong&gt;。）&lt;/p&gt;
&lt;h3 id=&#34;网络设备操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网络设备操作&#34;&gt;#&lt;/a&gt; 网络设备操作&lt;/h3&gt;
&lt;h3 id=&#34;设置loopback网卡属性函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#设置loopback网卡属性函数&#34;&gt;#&lt;/a&gt; 设置 loopback 网卡属性函数&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;gen_lo_setup 函数&lt;/strong&gt;，它接收六个参数：一个是 &lt;code&gt;struct net_device *dev&lt;/code&gt; ，表示&lt;strong&gt;要设置的网络设备&lt;/strong&gt;；一个是 &lt;code&gt;unsigned int mtu&lt;/code&gt; ，表示&lt;strong&gt;设备的最大传输单元&lt;/strong&gt;；一个是 &lt;code&gt;const struct ethtool_ops *eth_ops&lt;/code&gt; ，表示&lt;strong&gt;设备的 ethtool 操作&lt;/strong&gt;；一个是 &lt;code&gt;const struct header_ops *hdr_ops&lt;/code&gt; ，表示&lt;strong&gt;设备的头部操作&lt;/strong&gt;；一个是 &lt;code&gt;const struct net_device_ops *dev_ops&lt;/code&gt; ，表示&lt;strong&gt;设备的网络设备操作&lt;/strong&gt;；一个是 &lt;code&gt;void (*dev_destructor)(struct net_device *dev)&lt;/code&gt; ，表示&lt;strong&gt;设备的析构函数&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;以下是这段代码的主要步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;设置设备的&lt;strong&gt;最大传输单元&lt;/strong&gt;（MTU）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设置设备的&lt;strong&gt;硬头部长度和最小头部&lt;/strong&gt;长度为 &lt;code&gt;ETH_HLEN&lt;/code&gt; ，表示以太网头部的长度。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设置设备的地址长度为 &lt;code&gt;ETH_ALEN&lt;/code&gt; ，表示&lt;strong&gt;以太网地址的长度&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;设置设备的类型&lt;/strong&gt;为 &lt;code&gt;ARPHRD_LOOPBACK&lt;/code&gt; ，表示 LoopBack 设备。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;设置设备的标志&lt;/strong&gt;为 &lt;code&gt;IFF_LOOPBACK&lt;/code&gt; ，表示 LoopBack 设备。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;设置设备的私有标志&lt;/strong&gt;，包括 &lt;code&gt;IFF_LIVE_ADDR_CHANGE&lt;/code&gt;  和 &lt;code&gt;IFF_NO_QUEUE&lt;/code&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;调用 &lt;code&gt;netif_keep_dst(dev)&lt;/code&gt;  函数，&lt;strong&gt;表示设备保持目的地&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设置设备的硬件特性为 &lt;code&gt;NETIF_F_GSO_SOFTWARE&lt;/code&gt; ，表示设备支持软件大段离散。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;设置设备的特性，包括散列、片段列表、软件大段离散、硬件校验和、接收校验和、SCTP CRC、高 DMA、LLTX、网络命名空间本地、VLAN 挑战和 LoopBack。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设置设备的 ethtool 操作、头部操作、网络设备操作和析构函数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;设置设备需要释放网络设备&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;调用 &lt;code&gt;netif_set_tso_max_size(dev, GSO_MAX_SIZE)&lt;/code&gt;  函数，设置设备的 TSO 最大大小。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这段代码的主要目的是设置 LoopBack 网卡的属性，包括最大传输单元、头部长度、地址长度、设备类型、设备标志、设备特性等。这些属性对于设备的正常工作非常重要。&lt;/p&gt;
&lt;h3 id=&#34;loopback网卡设置函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#loopback网卡设置函数&#34;&gt;#&lt;/a&gt; &lt;strong&gt;loopback 网卡设置函数&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;调用 gen_lo_setup 函数&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;设置和登记loopback设备函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#设置和登记loopback设备函数&#34;&gt;#&lt;/a&gt; 设置和登记 loopback 设备函数&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;loopback_setup 函数&lt;/strong&gt;。这段代码是 Linux 内核中初始化 LoopBack 网卡的函数。函数名为 &lt;code&gt;loopback_net_init&lt;/code&gt; ，它接收一个参数： &lt;code&gt;struct net *net&lt;/code&gt; ，表示要&lt;strong&gt;初始化的网络命名空间&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;以下是这段代码的主要步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;定义一个 &lt;code&gt;struct net_device *dev&lt;/code&gt;  变量，&lt;strong&gt;用于存储分配的网络设备&lt;/strong&gt;。也就是 loopback 网卡&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;调用 &lt;code&gt;alloc_netdev(0, &amp;quot;lo&amp;quot;, NET_NAME_PREDICTABLE, loopback_setup)&lt;/code&gt;  函数分配一个网络设备，并将结果赋值给 &lt;code&gt;dev&lt;/code&gt; 。如果分配失败，跳转到 &lt;code&gt;out&lt;/code&gt;  标签。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;调用 &lt;code&gt;dev_net_set(dev, net)&lt;/code&gt;  函数&lt;strong&gt;将网络设备的网络命名空间设置为 &lt;code&gt;net&lt;/code&gt; &lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;调用 &lt;code&gt;register_netdev(dev)&lt;/code&gt;  函数注册网络设备。如果注册失败，跳转到 &lt;code&gt;out_free_netdev&lt;/code&gt;  标签。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;检查网络设备的接口索引是否等于 &lt;code&gt;LOOPBACK_IFINDEX&lt;/code&gt; 。如果不等于，调用 &lt;code&gt;BUG_ON()&lt;/code&gt;  函数打印错误信息并停止内核。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将网络设备赋值给 &lt;code&gt;net-&amp;gt;loopback_dev&lt;/code&gt; ，表示网络命名空间的 LoopBack 设备。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;返回 0 表示初始化成功。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在 &lt;code&gt;out_free_netdev&lt;/code&gt;  标签处，调用 &lt;code&gt;free_netdev(dev)&lt;/code&gt;  函数释放网络设备。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;out&lt;/code&gt;  标签处，如果网络命名空间等于初始网络命名空间，调用 &lt;code&gt;panic()&lt;/code&gt;  函数打印错误信息并停止内核。&lt;/p&gt;
&lt;h3 id=&#34;黑洞传输函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#黑洞传输函数&#34;&gt;#&lt;/a&gt; 黑洞传输函数&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;blackhole_netdev_xmit 函数&lt;/strong&gt;，黑洞网络设备，用于丢弃标记为已过期或无效的传入数据包。这个设备不是命名空间的，而是全局可访问的。它接收两个参数：一个是 &lt;code&gt;struct sk_buff *skb&lt;/code&gt; ，表示要发送的数据包；另一个是 &lt;code&gt;struct net_device *dev&lt;/code&gt; ，表示要发送数据的设备。&lt;/p&gt;
&lt;p&gt;以下是这段代码的主要步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;调用 &lt;code&gt;kfree_skb(skb)&lt;/code&gt;  函数释放数据包。这是因为 &amp;quot;黑洞&amp;quot; 网络设备不会真正发送数据，而是&lt;strong&gt;直接丢弃数据&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;调用 &lt;code&gt;net_warn_ratelimited(&amp;quot;%s(): Dropping skb.\n&amp;quot;, __func__)&lt;/code&gt;  函数打印警告信息，表示数据包被丢弃。这个函数会限制警告信息的打印频率，以防止日志被过多的警告信息淹没。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;返回 &lt;code&gt;NETDEV_TX_OK&lt;/code&gt; ，表示数据包已经 &amp;quot;成功发送&amp;quot;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这段代码的主要目的是实现一个 &amp;quot;黑洞&amp;quot; 网络设备，它会丢弃所有发送到它的数据。这个设备通常用于测试和调试，或者用于阻止不需要的网络流量。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;记得设置网络设备操作结构体的发送函数&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;黑洞设备设置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#黑洞设备设置&#34;&gt;#&lt;/a&gt; 黑洞设备设置&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;blackhole_netdev_setup 函数&lt;/strong&gt; 调用 &lt;strong&gt;gen_lo_setup 函数&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;黑洞设备初始化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#黑洞设备初始化&#34;&gt;#&lt;/a&gt; 黑洞设备初始化&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;blackhole_netdev_init 函数&lt;/strong&gt;，函数初始化和注册黑洞设备。它被标记为在内核初始化过程中调用。&lt;/p&gt;
&lt;p&gt;以下是这段代码的主要步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;调用 &lt;code&gt;alloc_netdev(0, &amp;quot;blackhole_dev&amp;quot;, NET_NAME_UNKNOWN, blackhole_netdev_setup)&lt;/code&gt;  函数分配一个网络设备，并将结果赋值给全局变量 &lt;code&gt;blackhole_netdev&lt;/code&gt; 。如果分配失败，返回 &lt;code&gt;-ENOMEM&lt;/code&gt;  错误码。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;调用 &lt;code&gt;rtnl_lock()&lt;/code&gt;  函数获取路由表锁，防止在初始化过程中路由表被其他线程修改。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;调用 &lt;code&gt;dev_init_scheduler(blackhole_netdev)&lt;/code&gt;  函数初始化网络设备的调度器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;调用 &lt;code&gt;dev_activate(blackhole_netdev)&lt;/code&gt;  函数激活网络设备。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;调用 &lt;code&gt;rtnl_unlock()&lt;/code&gt;  函数释放路由表锁。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将网络设备的标志设置为 &lt;code&gt;IFF_UP | IFF_RUNNING&lt;/code&gt; ，表示网络设备已经启动并正在运行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;调用 &lt;code&gt;dev_net_set(blackhole_netdev, &amp;amp;init_net)&lt;/code&gt;  函数将网络设备的网络命名空间设置为初始网络命名空间。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;返回 0 表示初始化成功。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这段代码的主要目的是初始化 &amp;quot;黑洞&amp;quot; 网络设备，包括分配网络设备、初始化调度器、激活设备、设置网络命名空间等。这些操作对于网络设备的正常工作非常重要。&lt;/p&gt;
&lt;h3 id=&#34;最终化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#最终化&#34;&gt;#&lt;/a&gt; 最终化&lt;/h3&gt;
&lt;h2 id=&#34;测试loopbackping-127001&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#测试loopbackping-127001&#34;&gt;#&lt;/a&gt; 测试 loopback——ping 127.0.0.1&lt;/h2&gt;
&lt;h3 id=&#34;ping-127001-网络通信过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ping-127001-网络通信过程&#34;&gt;#&lt;/a&gt; ping 127.0.0.1 网络通信过程&lt;/h3&gt;
&lt;h3 id=&#34;本机网路通信&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#本机网路通信&#34;&gt;#&lt;/a&gt; 本机网路通信&lt;/h3&gt;
</content>
        <category term="DragonOS" scheme="http://smallcjy.github.io/tags/DragonOS/" />
        <updated>2024-07-27T02:48:31.000Z</updated>
    </entry>
    <entry>
        <id>http://smallcjy.github.io/2024/07/27/SmolTcp_Loopback%20%E6%BA%90%E7%A0%81/</id>
        <title>smoltcplo网卡源码</title>
        <link rel="alternate" href="http://smallcjy.github.io/2024/07/27/SmolTcp_Loopback%20%E6%BA%90%E7%A0%81/"/>
        <content type="html">&lt;p&gt;&lt;figure class=&#34;highlight rust&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;162&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;163&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;164&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;165&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;166&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;167&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;168&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;169&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;170&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;171&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;172&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;173&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;174&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;175&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;176&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;177&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;178&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;179&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#![cfg_attr(not(feature = &lt;span class=&#34;string&#34;&gt;&amp;quot;std&amp;quot;&lt;/span&gt;), no_std)]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#![allow(unused_mut)]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#![allow(clippy::collapsible_if)]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#[cfg(feature = &lt;span class=&#34;string&#34;&gt;&amp;quot;std&amp;quot;&lt;/span&gt;)]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#[allow(dead_code)]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;mod&lt;/span&gt; utils;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; core::&lt;span class=&#34;type&#34;&gt;str&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; log::&amp;#123;debug, error, info&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; smoltcp::iface::&amp;#123;Config, Interface, SocketSet&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; smoltcp::phy::&amp;#123;Loopback, Medium&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; smoltcp::socket::tcp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; smoltcp::time::&amp;#123;Duration, Instant&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; smoltcp::wire::&amp;#123;EthernetAddress, IpAddress, IpCidr&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#[cfg(not(feature = &lt;span class=&#34;string&#34;&gt;&amp;quot;std&amp;quot;&lt;/span&gt;))]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;mod&lt;/span&gt; mock &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; core::cell::Cell;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; smoltcp::time::&amp;#123;Duration, Instant&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;#[derive(Debug)]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;#[cfg_attr(feature = &lt;span class=&#34;string&#34;&gt;&amp;quot;defmt&amp;quot;&lt;/span&gt;, derive(defmt::Format))]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;pub&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Clock&lt;/span&gt;(Cell&amp;lt;Instant&amp;gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;impl&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Clock&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;pub&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;new&lt;/span&gt;() &lt;span class=&#34;punctuation&#34;&gt;-&amp;gt;&lt;/span&gt; Clock &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_ invoke__&#34;&gt;Clock&lt;/span&gt;(Cell::&lt;span class=&#34;title function_ invoke__&#34;&gt;new&lt;/span&gt;(Instant::&lt;span class=&#34;title function_ invoke__&#34;&gt;from_millis&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;pub&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;advance&lt;/span&gt;(&amp;amp;&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;, duration: Duration) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;.&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;.&lt;span class=&#34;title function_ invoke__&#34;&gt;set&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;.&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;.&lt;span class=&#34;title function_ invoke__&#34;&gt;get&lt;/span&gt;() + duration)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;pub&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;elapsed&lt;/span&gt;(&amp;amp;&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;) &lt;span class=&#34;punctuation&#34;&gt;-&amp;gt;&lt;/span&gt; Instant &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;.&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;.&lt;span class=&#34;title function_ invoke__&#34;&gt;get&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#[cfg(feature = &lt;span class=&#34;string&#34;&gt;&amp;quot;std&amp;quot;&lt;/span&gt;)]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;mod&lt;/span&gt; mock &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; smoltcp::time::&amp;#123;Duration, Instant&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; std::sync::atomic::&amp;#123;AtomicUsize, Ordering&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; std::sync::Arc;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// should be AtomicU64 but that&amp;#x27;s unstable&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;#[derive(Debug, Clone)]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;#[cfg_attr(feature = &lt;span class=&#34;string&#34;&gt;&amp;quot;defmt&amp;quot;&lt;/span&gt;, derive(defmt::Format))]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;pub&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Clock&lt;/span&gt;(Arc&amp;lt;AtomicUsize&amp;gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;impl&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Clock&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;pub&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;new&lt;/span&gt;() &lt;span class=&#34;punctuation&#34;&gt;-&amp;gt;&lt;/span&gt; Clock &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_ invoke__&#34;&gt;Clock&lt;/span&gt;(Arc::&lt;span class=&#34;title function_ invoke__&#34;&gt;new&lt;/span&gt;(AtomicUsize::&lt;span class=&#34;title function_ invoke__&#34;&gt;new&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;pub&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;advance&lt;/span&gt;(&amp;amp;&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;, duration: Duration) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;.&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                .&lt;span class=&#34;title function_ invoke__&#34;&gt;fetch_add&lt;/span&gt;(duration.&lt;span class=&#34;title function_ invoke__&#34;&gt;total_millis&lt;/span&gt;() &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;usize&lt;/span&gt;, Ordering::SeqCst);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;pub&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;elapsed&lt;/span&gt;(&amp;amp;&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;) &lt;span class=&#34;punctuation&#34;&gt;-&amp;gt;&lt;/span&gt; Instant &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            Instant::&lt;span class=&#34;title function_ invoke__&#34;&gt;from_millis&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;.&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;.&lt;span class=&#34;title function_ invoke__&#34;&gt;load&lt;/span&gt;(Ordering::SeqCst) &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;i64&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;clock&lt;/span&gt; = mock::Clock::&lt;span class=&#34;title function_ invoke__&#34;&gt;new&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;device&lt;/span&gt; = Loopback::&lt;span class=&#34;title function_ invoke__&#34;&gt;new&lt;/span&gt;(Medium::Ethernet);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;#[cfg(feature = &lt;span class=&#34;string&#34;&gt;&amp;quot;std&amp;quot;&lt;/span&gt;)]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;mut &lt;/span&gt;&lt;span class=&#34;variable&#34;&gt;device&lt;/span&gt; = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;clock&lt;/span&gt; = clock.&lt;span class=&#34;title function_ invoke__&#34;&gt;clone&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        utils::&lt;span class=&#34;title function_ invoke__&#34;&gt;setup_logging_with_clock&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;move&lt;/span&gt; || clock.&lt;span class=&#34;title function_ invoke__&#34;&gt;elapsed&lt;/span&gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;mut&lt;/span&gt; opts, &lt;span class=&#34;keyword&#34;&gt;mut&lt;/span&gt; free) = utils::&lt;span class=&#34;title function_ invoke__&#34;&gt;create_options&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        utils::&lt;span class=&#34;title function_ invoke__&#34;&gt;add_middleware_options&lt;/span&gt;(&amp;amp;&lt;span class=&#34;keyword&#34;&gt;mut&lt;/span&gt; opts, &amp;amp;&lt;span class=&#34;keyword&#34;&gt;mut&lt;/span&gt; free);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;mut &lt;/span&gt;&lt;span class=&#34;variable&#34;&gt;matches&lt;/span&gt; = utils::&lt;span class=&#34;title function_ invoke__&#34;&gt;parse_options&lt;/span&gt;(&amp;amp;opts, free);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        utils::&lt;span class=&#34;title function_ invoke__&#34;&gt;parse_middleware_options&lt;/span&gt;(&amp;amp;&lt;span class=&#34;keyword&#34;&gt;mut&lt;/span&gt; matches, device, &lt;span class=&#34;comment&#34;&gt;/*loopback=*/&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Create interface&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;mut &lt;/span&gt;&lt;span class=&#34;variable&#34;&gt;config&lt;/span&gt; = Config::&lt;span class=&#34;title function_ invoke__&#34;&gt;new&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    config.hardware_addr = &lt;span class=&#34;title function_ invoke__&#34;&gt;Some&lt;/span&gt;(&lt;span class=&#34;title function_ invoke__&#34;&gt;EthernetAddress&lt;/span&gt;([&lt;span class=&#34;number&#34;&gt;0x02&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x00&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x00&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x00&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x00&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x01&lt;/span&gt;]).&lt;span class=&#34;title function_ invoke__&#34;&gt;into&lt;/span&gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;mut &lt;/span&gt;&lt;span class=&#34;variable&#34;&gt;iface&lt;/span&gt; = Interface::&lt;span class=&#34;title function_ invoke__&#34;&gt;new&lt;/span&gt;(config, &amp;amp;&lt;span class=&#34;keyword&#34;&gt;mut&lt;/span&gt; device);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    iface.&lt;span class=&#34;title function_ invoke__&#34;&gt;update_ip_addrs&lt;/span&gt;(|ip_addrs| &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ip_addrs&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            .&lt;span class=&#34;title function_ invoke__&#34;&gt;push&lt;/span&gt;(IpCidr::&lt;span class=&#34;title function_ invoke__&#34;&gt;new&lt;/span&gt;(IpAddress::&lt;span class=&#34;title function_ invoke__&#34;&gt;v4&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;127&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;), &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            .&lt;span class=&#34;title function_ invoke__&#34;&gt;unwrap&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Create sockets&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;server_socket&lt;/span&gt; = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// It is not strictly necessary to use a `static mut` and unsafe code here, but&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// on embedded systems that smoltcp targets it is far better to allocate the data&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// statically to verify that it fits into RAM rather than get undefined behavior&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// when stack overflows.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;mut&lt;/span&gt; TCP_SERVER_RX_DATA: [&lt;span class=&#34;type&#34;&gt;u8&lt;/span&gt;; &lt;span class=&#34;number&#34;&gt;1024&lt;/span&gt;] = [&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; &lt;span class=&#34;number&#34;&gt;1024&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;mut&lt;/span&gt; TCP_SERVER_TX_DATA: [&lt;span class=&#34;type&#34;&gt;u8&lt;/span&gt;; &lt;span class=&#34;number&#34;&gt;1024&lt;/span&gt;] = [&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; &lt;span class=&#34;number&#34;&gt;1024&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;tcp_rx_buffer&lt;/span&gt; = tcp::SocketBuffer::&lt;span class=&#34;title function_ invoke__&#34;&gt;new&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;unsafe&lt;/span&gt; &amp;#123; &amp;amp;&lt;span class=&#34;keyword&#34;&gt;mut&lt;/span&gt; TCP_SERVER_RX_DATA[..] &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;tcp_tx_buffer&lt;/span&gt; = tcp::SocketBuffer::&lt;span class=&#34;title function_ invoke__&#34;&gt;new&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;unsafe&lt;/span&gt; &amp;#123; &amp;amp;&lt;span class=&#34;keyword&#34;&gt;mut&lt;/span&gt; TCP_SERVER_TX_DATA[..] &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        tcp::Socket::&lt;span class=&#34;title function_ invoke__&#34;&gt;new&lt;/span&gt;(tcp_rx_buffer, tcp_tx_buffer)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;client_socket&lt;/span&gt; = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;mut&lt;/span&gt; TCP_CLIENT_RX_DATA: [&lt;span class=&#34;type&#34;&gt;u8&lt;/span&gt;; &lt;span class=&#34;number&#34;&gt;1024&lt;/span&gt;] = [&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; &lt;span class=&#34;number&#34;&gt;1024&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;mut&lt;/span&gt; TCP_CLIENT_TX_DATA: [&lt;span class=&#34;type&#34;&gt;u8&lt;/span&gt;; &lt;span class=&#34;number&#34;&gt;1024&lt;/span&gt;] = [&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; &lt;span class=&#34;number&#34;&gt;1024&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;tcp_rx_buffer&lt;/span&gt; = tcp::SocketBuffer::&lt;span class=&#34;title function_ invoke__&#34;&gt;new&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;unsafe&lt;/span&gt; &amp;#123; &amp;amp;&lt;span class=&#34;keyword&#34;&gt;mut&lt;/span&gt; TCP_CLIENT_RX_DATA[..] &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;tcp_tx_buffer&lt;/span&gt; = tcp::SocketBuffer::&lt;span class=&#34;title function_ invoke__&#34;&gt;new&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;unsafe&lt;/span&gt; &amp;#123; &amp;amp;&lt;span class=&#34;keyword&#34;&gt;mut&lt;/span&gt; TCP_CLIENT_TX_DATA[..] &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        tcp::Socket::&lt;span class=&#34;title function_ invoke__&#34;&gt;new&lt;/span&gt;(tcp_rx_buffer, tcp_tx_buffer)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;mut &lt;/span&gt;&lt;span class=&#34;variable&#34;&gt;sockets&lt;/span&gt;: [_; &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;] = &lt;span class=&#34;built_in&#34;&gt;Default&lt;/span&gt;::&lt;span class=&#34;title function_ invoke__&#34;&gt;default&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;mut &lt;/span&gt;&lt;span class=&#34;variable&#34;&gt;sockets&lt;/span&gt; = SocketSet::&lt;span class=&#34;title function_ invoke__&#34;&gt;new&lt;/span&gt;(&amp;amp;&lt;span class=&#34;keyword&#34;&gt;mut&lt;/span&gt; sockets[..]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;server_handle&lt;/span&gt; = sockets.&lt;span class=&#34;title function_ invoke__&#34;&gt;add&lt;/span&gt;(server_socket);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;client_handle&lt;/span&gt; = sockets.&lt;span class=&#34;title function_ invoke__&#34;&gt;add&lt;/span&gt;(client_socket);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;mut &lt;/span&gt;&lt;span class=&#34;variable&#34;&gt;did_listen&lt;/span&gt; = &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;mut &lt;/span&gt;&lt;span class=&#34;variable&#34;&gt;did_connect&lt;/span&gt; = &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;mut &lt;/span&gt;&lt;span class=&#34;variable&#34;&gt;done&lt;/span&gt; = &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; !done &amp;amp;&amp;amp; clock.&lt;span class=&#34;title function_ invoke__&#34;&gt;elapsed&lt;/span&gt;() &amp;lt; Instant::&lt;span class=&#34;title function_ invoke__&#34;&gt;from_millis&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;10_000&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        iface.&lt;span class=&#34;title function_ invoke__&#34;&gt;poll&lt;/span&gt;(clock.&lt;span class=&#34;title function_ invoke__&#34;&gt;elapsed&lt;/span&gt;(), &amp;amp;&lt;span class=&#34;keyword&#34;&gt;mut&lt;/span&gt; device, &amp;amp;&lt;span class=&#34;keyword&#34;&gt;mut&lt;/span&gt; sockets);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;mut &lt;/span&gt;&lt;span class=&#34;variable&#34;&gt;socket&lt;/span&gt; = sockets.get_mut::&amp;lt;tcp::Socket&amp;gt;(server_handle);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; !socket.&lt;span class=&#34;title function_ invoke__&#34;&gt;is_active&lt;/span&gt;() &amp;amp;&amp;amp; !socket.&lt;span class=&#34;title function_ invoke__&#34;&gt;is_listening&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; !did_listen &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                debug!(&lt;span class=&#34;string&#34;&gt;&amp;quot;listening&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                socket.&lt;span class=&#34;title function_ invoke__&#34;&gt;listen&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1234&lt;/span&gt;).&lt;span class=&#34;title function_ invoke__&#34;&gt;unwrap&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                did_listen = &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; socket.&lt;span class=&#34;title function_ invoke__&#34;&gt;can_recv&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            debug!(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;got &amp;#123;:?&amp;#125;&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                socket.&lt;span class=&#34;title function_ invoke__&#34;&gt;recv&lt;/span&gt;(|buffer| &amp;#123; (buffer.&lt;span class=&#34;title function_ invoke__&#34;&gt;len&lt;/span&gt;(), &lt;span class=&#34;type&#34;&gt;str&lt;/span&gt;::&lt;span class=&#34;title function_ invoke__&#34;&gt;from_utf8&lt;/span&gt;(buffer).&lt;span class=&#34;title function_ invoke__&#34;&gt;unwrap&lt;/span&gt;()) &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            socket.&lt;span class=&#34;title function_ invoke__&#34;&gt;close&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            done = &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;mut &lt;/span&gt;&lt;span class=&#34;variable&#34;&gt;socket&lt;/span&gt; = sockets.get_mut::&amp;lt;tcp::Socket&amp;gt;(client_handle);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;cx&lt;/span&gt; = iface.&lt;span class=&#34;title function_ invoke__&#34;&gt;context&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; !socket.&lt;span class=&#34;title function_ invoke__&#34;&gt;is_open&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; !did_connect &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                debug!(&lt;span class=&#34;string&#34;&gt;&amp;quot;connecting&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                socket&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    .&lt;span class=&#34;title function_ invoke__&#34;&gt;connect&lt;/span&gt;(cx, (IpAddress::&lt;span class=&#34;title function_ invoke__&#34;&gt;v4&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;127&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;), &lt;span class=&#34;number&#34;&gt;1234&lt;/span&gt;), &lt;span class=&#34;number&#34;&gt;65000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    .&lt;span class=&#34;title function_ invoke__&#34;&gt;unwrap&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                did_connect = &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; socket.&lt;span class=&#34;title function_ invoke__&#34;&gt;can_send&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            debug!(&lt;span class=&#34;string&#34;&gt;&amp;quot;sending&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            socket.&lt;span class=&#34;title function_ invoke__&#34;&gt;send_slice&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;b&amp;quot;0123456789abcdef&amp;quot;&lt;/span&gt;).&lt;span class=&#34;title function_ invoke__&#34;&gt;unwrap&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            socket.&lt;span class=&#34;title function_ invoke__&#34;&gt;close&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;match&lt;/span&gt; iface.&lt;span class=&#34;title function_ invoke__&#34;&gt;poll_delay&lt;/span&gt;(clock.&lt;span class=&#34;title function_ invoke__&#34;&gt;elapsed&lt;/span&gt;(), &amp;amp;sockets) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_ invoke__&#34;&gt;Some&lt;/span&gt;(Duration::ZERO) =&amp;gt; debug!(&lt;span class=&#34;string&#34;&gt;&amp;quot;resuming&amp;quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_ invoke__&#34;&gt;Some&lt;/span&gt;(delay) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                debug!(&lt;span class=&#34;string&#34;&gt;&amp;quot;sleeping for &amp;#123;&amp;#125; ms&amp;quot;&lt;/span&gt;, delay);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                clock.&lt;span class=&#34;title function_ invoke__&#34;&gt;advance&lt;/span&gt;(delay)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt; =&amp;gt; clock.&lt;span class=&#34;title function_ invoke__&#34;&gt;advance&lt;/span&gt;(Duration::&lt;span class=&#34;title function_ invoke__&#34;&gt;from_millis&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; done &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        info!(&lt;span class=&#34;string&#34;&gt;&amp;quot;done&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        error!(&lt;span class=&#34;string&#34;&gt;&amp;quot;this is taking too long, bailing out&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
        <category term="DragonOS" scheme="http://smallcjy.github.io/tags/DragonOS/" />
        <updated>2024-07-27T02:48:31.000Z</updated>
    </entry>
    <entry>
        <id>http://smallcjy.github.io/2024/07/26/SYS_ALARM%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E5%AE%9E%E7%8E%B0/</id>
        <title>SYS_ALARM调用实现</title>
        <link rel="alternate" href="http://smallcjy.github.io/2024/07/26/SYS_ALARM%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E5%AE%9E%E7%8E%B0/"/>
        <content type="html">&lt;p&gt;TODO&lt;/p&gt;
</content>
        <category term="DragonOS" scheme="http://smallcjy.github.io/tags/DragonOS/" />
        <updated>2024-07-26T08:25:35.000Z</updated>
    </entry>
    <entry>
        <id>http://smallcjy.github.io/2024/07/24/%E5%8F%8C%E6%8C%87%E9%92%88%E7%9A%84%E4%BD%9C%E7%94%A8/</id>
        <title>双指针的作用</title>
        <link rel="alternate" href="http://smallcjy.github.io/2024/07/24/%E5%8F%8C%E6%8C%87%E9%92%88%E7%9A%84%E4%BD%9C%E7%94%A8/"/>
        <content type="html">&lt;h2 id=&#34;双指针&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#双指针&#34;&gt;#&lt;/a&gt; 双指针&lt;/h2&gt;
&lt;p&gt;当需要多次重复的遍历数组时，使用指向头尾的双指针并同时移动它们可以大大减少重复遍历的次数。&lt;/p&gt;
&lt;p&gt;双指针的作用就在于可以跳过无用解。通过使用两个指针（通常一个指向数组的开始，另一个指向数组的末尾）并根据一定的条件同时移动这两个指针，可以有效地在遍历数组时减少不必要的重复遍历，从而提高算法的效率。此外，双指针技术还可以帮助跳过那些不满足特定条件的无用解，进一步优化搜索或计算过程。&lt;/p&gt;
</content>
        <category term="Leetcode" scheme="http://smallcjy.github.io/tags/Leetcode/" />
        <updated>2024-07-24T04:18:41.000Z</updated>
    </entry>
    <entry>
        <id>http://smallcjy.github.io/2024/07/23/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E4%B8%B2/</id>
        <title>动态规划--最长公共子串</title>
        <link rel="alternate" href="http://smallcjy.github.io/2024/07/23/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E4%B8%B2/"/>
        <content type="html">&lt;h2 id=&#34;动态规划-最长公共子串&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#动态规划-最长公共子串&#34;&gt;#&lt;/a&gt; 动态规划 -- 最长公共子串&lt;/h2&gt;
&lt;p&gt;动态规划的问题可以划分为三个步骤，设计网格，确定网格值计算算法，计算网格值&lt;/p&gt;
&lt;h2 id=&#34;设计网格&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#设计网格&#34;&gt;#&lt;/a&gt; 设计网格&lt;/h2&gt;
&lt;p&gt;把两个串作为矩阵的 i 和 j&lt;/p&gt;
&lt;h2 id=&#34;确定网格值计算方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#确定网格值计算方法&#34;&gt;#&lt;/a&gt; 确定网格值计算方法&lt;/h2&gt;
&lt;p&gt;这是动态规划类问题的重点和难点，需要根据问题，将问题划分为独立的重复的小问题，这些小问题的值就是网格的值。&lt;/p&gt;
&lt;p&gt;分析：最长公共子串首先需要确定公共子串的特点就是连续的相同字符。相同可以得到相同的字符，连续可以得到左上角的网格的值加 1，两种情况同时考虑就是当字符相同时，该网格的值为左上角的网格值加 1&lt;/p&gt;
&lt;p&gt;这就是网格的计算方法：&lt;br&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;if(s1[i] == s2[j])&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    dp[i][j] = dp[i-1][j-1] + 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    dp[i][j] = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
        <category term="Leetcode" scheme="http://smallcjy.github.io/tags/Leetcode/" />
        <updated>2024-07-23T07:06:30.000Z</updated>
    </entry>
    <entry>
        <id>http://smallcjy.github.io/2024/07/18/%E5%87%BD%E6%95%B0%E4%B8%8A%E9%94%81/</id>
        <title>函数上锁</title>
        <link rel="alternate" href="http://smallcjy.github.io/2024/07/18/%E5%87%BD%E6%95%B0%E4%B8%8A%E9%94%81/"/>
        <content type="html">&lt;p&gt;一个函数有两个版本，一个是另一个的包裹器。实际工作的是另一个包裹器内的函数，而包裹器的作用是保证函数在某些特定的情况下才能被使用，比如上锁。&lt;/p&gt;
</content>
        <category term="编程经验" scheme="http://smallcjy.github.io/tags/%E7%BC%96%E7%A8%8B%E7%BB%8F%E9%AA%8C/" />
        <updated>2024-07-18T04:55:56.000Z</updated>
    </entry>
    <entry>
        <id>http://smallcjy.github.io/2024/07/18/%E7%8E%AF%E5%BD%A2%E5%88%97%E8%A1%A8%E7%9A%84%E6%8E%A2%E6%9F%A5/</id>
        <title>环形列表的探查</title>
        <link rel="alternate" href="http://smallcjy.github.io/2024/07/18/%E7%8E%AF%E5%BD%A2%E5%88%97%E8%A1%A8%E7%9A%84%E6%8E%A2%E6%9F%A5/"/>
        <content type="html">&lt;h2 id=&#34;环形列表的探查双指针快慢指针&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#环形列表的探查双指针快慢指针&#34;&gt;#&lt;/a&gt; 环形列表的探查：双指针（快慢指针）&lt;/h2&gt;
&lt;p&gt;双指针的应用：寻找距离尾部第 K 个节点、寻找环入口、寻找公共尾部入口。&lt;/p&gt;
&lt;p&gt;设置快指针每次前进 2 步，慢指针每次前进 1 步&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;快指针和慢指针第一次相遇时，快指针比慢指针快了 N 个环形链表长度。&lt;/li&gt;
&lt;li&gt;此时快指针比慢指针快了 N 倍环的长度，由快慢指针的速度关系可以知道，此时快指针走了 2N 个环形长度，慢指针走了 N 个环形长度。&lt;/li&gt;
&lt;li&gt;令入口节点位于 a，指针前进过程中会每走 a+NL 步会路过一次入口，这里慢指针正好走了 NL 步，慢指针再前进 a 步即可&lt;/li&gt;
&lt;li&gt;令快指针从原点出发，因为原点正好距离入口 a 步。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;代码：&lt;br&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;ListNode *&lt;span class=&#34;title&#34;&gt;detectCycle&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(ListNode *head)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ListNode *fast = head;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ListNode *slow = head;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;do&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(fast == &lt;span class=&#34;literal&#34;&gt;nullptr&lt;/span&gt;|| fast-&amp;gt;next == &lt;span class=&#34;literal&#34;&gt;nullptr&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;nullptr&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            fast = fast-&amp;gt;next-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            slow = slow-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt;(fast != slow);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        fast = head;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt;(fast != slow)&amp;#123;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            fast = fast-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            slow = slow-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; fast;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
        <category term="Leetcode" scheme="http://smallcjy.github.io/tags/Leetcode/" />
        <updated>2024-07-18T03:25:44.000Z</updated>
    </entry>
    <entry>
        <id>http://smallcjy.github.io/2024/07/12/lo%E7%BD%91%E5%8D%A1%E6%B3%A8%E5%86%8C%E7%B3%BB%E7%BB%9F%E5%8D%A1%E6%BB%9E%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%8F%8A%E5%85%B6%E8%A7%A3%E5%86%B3/</id>
        <title>lo网卡注册系统卡滞漏洞分析及其解决</title>
        <link rel="alternate" href="http://smallcjy.github.io/2024/07/12/lo%E7%BD%91%E5%8D%A1%E6%B3%A8%E5%86%8C%E7%B3%BB%E7%BB%9F%E5%8D%A1%E6%BB%9E%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%8F%8A%E5%85%B6%E8%A7%A3%E5%86%B3/"/>
        <content type="html">&lt;h2 id=&#34;问题描述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#问题描述&#34;&gt;#&lt;/a&gt; 问题描述：&lt;/h2&gt;
&lt;p&gt;向 kernel 注册 lo 网卡驱动后，启动 kernel 后系统卡滞。&lt;/p&gt;
&lt;h2 id=&#34;debug过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#debug过程&#34;&gt;#&lt;/a&gt; Debug 过程：&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;初步发现系统停滞在用户层，怀疑是内核切换成用户态时出现问题&lt;/li&gt;
&lt;li&gt;输出用户态的 init 程序发现 proc_name 输出为空，开始怀疑是 free before use&lt;/li&gt;
&lt;li&gt;free before use 的原因通常为不能正确使用 unsafe 代码块操控内存导致内存错误。&lt;/li&gt;
&lt;li&gt;开始检查 lo 网卡实现代码中有关 unsafe 的部分&lt;/li&gt;
&lt;li&gt;检查到问题出现在驱动包裹器上&lt;/li&gt;
&lt;li&gt;通过输出日志发现代码停滞在 lo 的 NetDerive 层中的 poll 方法，怀疑是内部调用了包裹器内部的驱动的可变引用导致的，这是一个 unsafe 代码&lt;/li&gt;
&lt;li&gt;检查但没发现存在内存错误的可能，重新把目光放回 poll 方法&lt;/li&gt;
&lt;li&gt;发现系统会定时重复调用 poll 方法，存在定期调用网卡的 poll 的机制&lt;/li&gt;
&lt;li&gt;思考如果重复调用 poll 方法，为什么会导致系统停滞&lt;/li&gt;
&lt;li&gt;通过对系统的网络子系统的学习，发现系统如果发现网卡内的 rxqueue 有未接收的数据包会启用中断来接收，怀疑系统认为 lo 网卡内一直存在未接受的数据包，导致一直中断接收数据包。&lt;/li&gt;
&lt;li&gt;认识到系统认为网卡没有数据包的手段是调用网卡内部设备驱动时返回 none，所以在 receive 函数中先检查 queue 是否为空，如果为空返回 none&lt;/li&gt;
&lt;li&gt;重启系统，发现系统正常启动。&lt;/li&gt;
&lt;li&gt;bug 修复完成。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;反思&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#反思&#34;&gt;#&lt;/a&gt; 反思：&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;问题出现的第一场所不是导致问题的第一场所！！！因为操作系统中存在大量的中断和调度活动，并不是顺序执行的，输出日志所定位到的地方并不一定是问题导致的地方，要重新分析问题，思考系统反常的原因。&lt;/li&gt;
&lt;li&gt;输出日志确实是一个非常有力的工具，但是不能依赖他，不能完全靠他定位！&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="DragonOS" scheme="http://smallcjy.github.io/tags/DragonOS/" />
        <updated>2024-07-12T08:25:35.000Z</updated>
    </entry>
    <entry>
        <id>http://smallcjy.github.io/2024/07/10/C-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0-boost-1/</id>
        <title>C++网络编程学习-boost(1)</title>
        <link rel="alternate" href="http://smallcjy.github.io/2024/07/10/C-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0-boost-1/"/>
        <content type="html"></content>
        <updated>2024-07-10T05:06:52.000Z</updated>
    </entry>
    <entry>
        <id>http://smallcjy.github.io/2024/06/23/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86-Bottom-Up-Paring/</id>
        <title>编译原理--Bottom-Up Paring</title>
        <link rel="alternate" href="http://smallcjy.github.io/2024/06/23/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86-Bottom-Up-Paring/"/>
        <content type="html">&lt;h2 id=&#34;1-right-sentential-form&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-right-sentential-form&#34;&gt;#&lt;/a&gt; 1 Right sentential form&lt;/h2&gt;
&lt;p&gt;最右句型，最右推导产生的句型称为最右句型，最右句型中，句柄的右边一定是终结符&lt;/p&gt;
&lt;h2 id=&#34;2-handle&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-handle&#34;&gt;#&lt;/a&gt; 2 Handle&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;reduction 归约：把一个与某产生式的右部相匹配的子串替换成产生式头部的非终结符的过程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;handle 句柄：和某个产生式体匹配的子串，对它归约体现了相应的最右推导&lt;/strong&gt;，但不是所有的和产生式体匹配的子串都是句柄，必须对他归约体现最右推导才行。&lt;/p&gt;
&lt;h2 id=&#34;3-viable-prefix&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-viable-prefix&#34;&gt;#&lt;/a&gt; 3 Viable prefix&lt;/h2&gt;
&lt;p&gt;可以出现在一个移入 - 归约 语法分析器的栈中的最右句型前缀被称为可行前缀。定义：可行前缀是一个最右句型的前缀，并且没有越过最右句型的最右句柄的右端，所以可以通过向可行前缀的右边添加某些终止符得到最右句型。&lt;/p&gt;
&lt;h2 id=&#34;4-items-and-states&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-items-and-states&#34;&gt;#&lt;/a&gt; 4 items and states&lt;/h2&gt;
&lt;p&gt;state 表明我们在语法分析的过程中所处的位置，state 是 item 的集合。增广文法，为了把开始 symbol 也加入分析过程而设计的文法，G 的增广文法 G‘就是在 G 中加上新开始符号 S&#39; 和产生式 S’-&amp;gt;S 而得到的文法。&lt;/p&gt;
&lt;p&gt;项集的闭包 CLOSURE（I）的求法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;把 I 中的各项加入到 CLOSURE（I）中&lt;/li&gt;
&lt;li&gt;如果 A-&amp;gt;a・Bb 在 CLOSURE（I）中，B-&amp;gt;y 是产生式，并且 B-&amp;gt;・y 不属于闭包中，则添加，一直重复这个过程&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;GOTO（I，X），I 是项集，X 是文法符号，移动项集中的产生式的点，如果右边是 X，移动到 X 的后面。并将产生变化是项集中成新的项集 I&#39;&lt;/p&gt;
&lt;p&gt;Dfa of LR（0）items 的求法；&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;求 I0 的闭包，I0 初始化为增广文法，闭包作为新的 I0；&lt;/li&gt;
&lt;li&gt;确定 I0 的 GOTO，移动・形成新的项集，求项集的闭包作为新的 Ii，Ij；&lt;/li&gt;
&lt;li&gt;重复步骤二知道没有新的状态产生已经状态之间的 GOTO 关系全部阐明&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;5-shiftreducelrparsing&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-shiftreducelrparsing&#34;&gt;#&lt;/a&gt; 5 shift/reduce（LR）parsing&lt;/h2&gt;
&lt;p&gt;移入归约分析，设立一个栈用来保存信息，每一步决定将输入移入或者将栈顶归约，直到得到增广文法符号。&lt;/p&gt;
&lt;h2 id=&#34;6-lr0parsing&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6-lr0parsing&#34;&gt;#&lt;/a&gt; 6 LR（0）parsing&lt;/h2&gt;
&lt;p&gt;LR 语法分析器&lt;br&gt;
&lt;img data-src=&#34;LR%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8.png&#34; alt=&#34;LR语法分析器&#34;&gt;&lt;br&gt;
当前输入符号 ai 和栈顶状态 sm，查询 ACTION【sm，ai】了解要执行什么动作。如果是移入就把下一个状态 s 移入，更新输入符号；如果是归约就执行归约动作，先将符号进行归约，然后把栈顶的状态弹出，根据归约后的文法符号查询当前栈顶的 GOTO 函数，把 GOTO 函指向的状态推入栈中；如果是接受则结束分析；如果是报错就报错。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;LR 语法分析算法，需要 parsing table，构建 parsing 的过程：需要知道所有非终结符的 FollowSet&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li i0，i1，...，in&gt;构造 G&#39; 的规范 LR（0）项集族&lt;/li&gt;
&lt;li&gt;根据 I 构造状态 i，确定状态 i 的语法动作
&lt;ol&gt;
&lt;li&gt;GOTO（Ii，a）=Ij，且 Ii 中有・位于 a 前的项，将 ACTION【Ii，a】设为移入 Ij&lt;/li&gt;
&lt;li&gt;A 产生式的体的・位于最后，将 FOLLOW（A）中的所有 a，设置 ACTION【Ii，a】为归约 A-&amp;gt;a&lt;/li&gt;
&lt;li&gt;S’-&amp;gt;S・，设置 $ 为 scc&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;对于非终止符的 GOTO，设置 GOTO 表项&lt;/li&gt;
&lt;li&gt;所有未填的项为 error&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以先构造 LR 自动机，方便计算各个表项&lt;/p&gt;
&lt;h2 id=&#34;7-slr1parsing&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#7-slr1parsing&#34;&gt;#&lt;/a&gt; 7 SLR（1）parsing&lt;/h2&gt;
</content>
        <category term="编译原理" scheme="http://smallcjy.github.io/tags/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/" />
        <updated>2024-06-22T17:16:46.000Z</updated>
    </entry>
    <entry>
        <id>http://smallcjy.github.io/2024/06/22/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86-Top-Down-Parsing/</id>
        <title>编译原理--Top-Down Parsing</title>
        <link rel="alternate" href="http://smallcjy.github.io/2024/06/22/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86-Top-Down-Parsing/"/>
        <content type="html">&lt;p&gt;&lt;strong&gt;Top-Down Parsing:&lt;/strong&gt;&lt;br&gt;
 从开始符号开始，尝试猜测要应用于最终用户程序的产生式。&lt;br&gt;
&lt;strong&gt;Bottom-Up Parsing&lt;/strong&gt;&lt;br&gt;
 从用户程序开始，尝试反向应用产生式，将程序转换回起始符号&lt;/p&gt;
&lt;h2 id=&#34;1-what-is-the-predictive-parsing&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-what-is-the-predictive-parsing&#34;&gt;#&lt;/a&gt; 1 what is the predictive parsing?&lt;/h2&gt;
&lt;p&gt;以剩余的输入为基础，猜测哪一个产生式被使用。利用 lookahead tokens 来预测下一个产生式。&lt;/p&gt;
&lt;p&gt;predictive parsing 的条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Top-Down Parsing，从文法的开始标记开始&lt;/li&gt;
&lt;li&gt;可以根据现有的输入 token 决定一个具体的下一步的产生式，就可以预测&lt;/li&gt;
&lt;li&gt;predictive parsing 接受 LL（k）文法&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-ll1-grammar&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-ll1-grammar&#34;&gt;#&lt;/a&gt; 2 LL(1) grammar&lt;/h2&gt;
&lt;p&gt;LL（1）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;L：从左到右去 scan 输入&lt;/li&gt;
&lt;li&gt;L：最左推导&lt;/li&gt;
&lt;li&gt;1：需要最多 1 个 look ahead token 来预测&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如何判断一个文法是否为 LL（1）文法？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于所有的相同左部的产生式当中，产生式的右部的 first set 不相交&lt;/li&gt;
&lt;li&gt;对于所有的 first set 中包含 e 的非终止符 A，first（A）和 follow（A）的交集不相交&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;满足上面两个条件的为 LL（1）无关文法&lt;/p&gt;
&lt;p&gt;验证 LL（1）无关文法时，只用会 A=&amp;gt;*e 的非终止符才需要求 Follow set 来验证&lt;/p&gt;
&lt;h2 id=&#34;3-first-set-and-follow-set&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-first-set-and-follow-set&#34;&gt;#&lt;/a&gt; 3 First set and Follow set&lt;/h2&gt;
&lt;p&gt;非常重要，判断一个文法是不是 LL（1）文法的基础！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;First set&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;define：G=(VN, VT, P, S) is a grammar, b=(VN U VT)* ，FIRST(b) = { a ∊ VT | b =&amp;gt; * a......} if b =&amp;gt; * ε then ε ∊ FIRST(b)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;讲人话就是 string b 的 first set 就是可以被 b 推导的排在第一个终止符的集合&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;计算 First（A）的算法！！！：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;终止符的 first 集合是它本身&lt;/li&gt;
&lt;li&gt;for all A∈ VN ,if A =&amp;gt; *ε, then First(A)={ε} else  First(A)={ } ;&lt;/li&gt;
&lt;li&gt;For each production A→X1…Xj…Xn, First(A)=First(A) U SectionFirst(X1…Xj…Xn);&lt;/li&gt;
&lt;li&gt;一直重复 3，直到 A 的 first 集合没有变化&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;SectionFirst(X1…Xj…Xn) = (First(X1)-{e})U(First(X2)-{e})U...U(First(Xj+1))&lt;/p&gt;
&lt;p&gt;Xj+1 是第一个不是 nullable 的 symbol，即不能推导到 e&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if X1 is not nullable, then SectionFirst(X1…Xj…Xn) =First(X1)&lt;/li&gt;
&lt;li&gt;if X1 is nullable, then SectionFirst(X1…Xj…Xn) =First(X1) -{ε}, and continue to see X2. Stop untill is not nullable .&lt;/li&gt;
&lt;li ε&gt;if X1…Xn are all nullable, then SectionFirst(X1…Xn)= (First(X1) -{ε}) (First(X2)-{ε})U… U(First(Xn) -{ε}) ∪&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Follow sets&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;definition：G=(VT, VN, S,P) is a grammar，A∈VN ，FOLLOW(A)={a ∊ VT | S =&amp;gt; *…Aa…}，if S =&amp;gt; *  …A, then $ ∊ FOLLOW(A)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;直观上，非终结符 A 的跟随集合是该语法的所有句型中 A 之后的终结符（包括 $）的集合。&lt;/p&gt;
&lt;p&gt;如何预测，如果当前输入存在于某个产生式右部的 first sets 中，选择这个产生式，存在于某个产生式左部的非终止符的 follow sets 中，选择这个产生式&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Follow (A) 的算法&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;S is the start symbol, Follow(S)={$};for all A∊VN, and A≠S,Follow(A)={ };&lt;/li&gt;
&lt;li&gt;For each production B→αAγ, for each A that is a nonterminal do
&lt;ul&gt;
&lt;li&gt;Follow(A)=Follow(A)U(First(γ) -{ε})&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;if ε ∈ First(γ) then add Follow(B) to Follow(A)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;如果 A 位于产生式体的最后，add Follow (B) to Follow (A)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Repeat 2,until there is no change to any follow set&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;4-recursive-descent-parsing递归下降解析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-recursive-descent-parsing递归下降解析&#34;&gt;#&lt;/a&gt; 4 Recursive-descent parsing 递归下降解析&lt;/h2&gt;
&lt;p&gt;从一个开始 symbol 的产生式开始，为每个非终结符 A 定义一个能够识别 A 的 procedures，A 语法规则的右侧指定了该过程的代码结构。terminals 表示匹配输入，nonterminals 表示调用其他的 procedures，choices 表示 alternatives (case or if statement) within the code&lt;/p&gt;
&lt;p&gt;递归下降解析的过程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先判断文法是否属于 LL（1）文法
&lt;ul&gt;
&lt;li&gt;判断是否存在左递归，消除左递归因子&lt;/li&gt;
&lt;li&gt;计算 First Set 和 Follow Set&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;构建 Recursive-Descent Parser&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;consists of a main procedure and a group of recursive procedures, each corresponds to a nonterminal of the grammar&lt;/li&gt;
&lt;li&gt;Sub procedures used :
&lt;ul&gt;
&lt;li&gt;match is a procedure that matches the current next token with its parameter, advances the input if it succeeds, and declares error if it does not&lt;/li&gt;
&lt;li&gt;error is a procedure that prints an error message and exit&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Variable used:&lt;/li&gt;
&lt;li&gt;TOKEN is a variable that keeps the current next token in the input&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;\\If productions of nonterminal U are &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    \\U → x1 | x2 |…|xn, and x1,...,xn≠ ε, then the code for procedure U \\is as follow:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      if TOKEN in First(x1) then p_x1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      else if TOKEN in First(x2) then p_x2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;              else …&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;              …&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                   else if TOKEN in First(xn) then p_xn&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                       else ERROR&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;\\If a production of U is U → ε, then rewrite code &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;if TOKEN in First(xn) then p_xn&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        else if TOKEN not in Follow(U) then ERROR&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;The code for p_x where x=y1y2…yn is:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    begin p_y1;p_y2;…;p_yn end&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if yi∈VN then p_yi is the call of procedure yi；otherwise, if yi∈VT then p_yi is match(yi)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
 编写 main 程序，为每个非终结符编写程序，为每个终结符编写 match 程序，编写 error 程序&lt;br&gt;
 3. 构建一颗语法树&lt;/p&gt;
&lt;h2 id=&#34;5-ll1parsing&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-ll1parsing&#34;&gt;#&lt;/a&gt; 5 LL(1)parsing&lt;/h2&gt;
&lt;p&gt;与递归下降分析中的递归调用函数不同，LL（1）parsing 使用一个 stack，储存 symbols 等待 match，最终 stack 和 input 同时 match 完，parsing 成功。&lt;br&gt;
&lt;img data-src=&#34;LL1.png&#34; alt=&#34;LL1&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;6-parsing-table&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6-parsing-table&#34;&gt;#&lt;/a&gt; 6 Parsing table&lt;/h2&gt;
&lt;p&gt;描述在适当的解析步骤中产生式的选择。是一个二维数组，M [N,t] 表示在 t 输入时选择 N 的产生式。&lt;/p&gt;
&lt;p&gt;如何构建 Parsing tables：重复以下两个步骤对每一个非终止符&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;For each token ‘a’ in First(α), add A→ α to the entry M[ A,a ]&lt;/li&gt;
&lt;li&gt;if ε is in First(α), for each element ‘a’ of Follow(A) (token or $), add A→α  to M[ A,a ]&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;The LL(1) parsing algorithm&lt;/strong&gt;&lt;br&gt;
&lt;img data-src=&#34;TheLL(1)parsingalgorithm.png&#34; alt=&#34;TheLL(1)parsingalgorithm&#34;&gt;&lt;/p&gt;
</content>
        <category term="编译原理" scheme="http://smallcjy.github.io/tags/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/" />
        <updated>2024-06-22T10:31:09.000Z</updated>
    </entry>
</feed>
