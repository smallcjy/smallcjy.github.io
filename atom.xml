<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://smallcjy.github.io</id>
    <title>smallcBlog</title>
    <subtitle></subtitle>
    <icon>http://smallcjy.github.io/images/favicon.ico</icon>
    <link href="http://smallcjy.github.io" />
    <author>
      <name>Cai Junyuan</name>
    </author>
    <updated>2024-06-16T09:25:07.000Z</updated>
    <entry>
        <id>http://smallcjy.github.io/2024/06/16/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</id>
        <title>操作系统--文件系统</title>
        <link rel="alternate" href="http://smallcjy.github.io/2024/06/16/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
        <content type="html">&lt;h1 id=&#34;1-file&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-file&#34;&gt;#&lt;/a&gt; 1 File&lt;/h1&gt;
&lt;p&gt;挑选难理解的概念进行讲解。&lt;/p&gt;
&lt;p&gt;三种文件种类：byte sequence 、 record sequence 、 tree&lt;/p&gt;
&lt;p&gt;文件类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Regular files：普通文件，分为文本文件和二进制文件&lt;/li&gt;
&lt;li&gt;Directories：目录&lt;/li&gt;
&lt;li&gt;Character special file：特殊字符文件，模拟 io 设备比如终端、打印机和网络&lt;/li&gt;
&lt;li&gt;Block special files：块文件，模拟 disk&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;文件访问：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;顺序访问：从头开始读文件，不可以跳跃，可以回退和后退，在磁盘媒介中比较便利&lt;/li&gt;
&lt;li&gt;随机访问：随意读取文件，file marker 用来定位开始 read 的位置，就是 seek 操作。可以先读在 seek 也可以先 seek，再读&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;metadata：文件属性（file attribute）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;文件操作&lt;/p&gt;
&lt;h1 id=&#34;2-directory-目录&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-directory-目录&#34;&gt;#&lt;/a&gt; 2 Directory 目录&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;文件系统通过目录来查找文件&lt;/li&gt;
&lt;li&gt;目录是一个文件名和文件位置相同的文件&lt;/li&gt;
&lt;li&gt;directory entries 拥有文件的信息。目录下有文件创建，文件条目也跟着创建，有文件删除，条目也跟着删除；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;目录的好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;方便查找文件&lt;/li&gt;
&lt;li&gt;文件可以在不同目录下重复命名&lt;/li&gt;
&lt;li&gt;归类&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;目录系统：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单目录系统&lt;/li&gt;
&lt;li&gt;多目录系统&lt;/li&gt;
&lt;li&gt;层次目录系统&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;路径分为相对路径和绝对路径&lt;/p&gt;
&lt;h1 id=&#34;3-文件系统&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-文件系统&#34;&gt;#&lt;/a&gt; 3 文件系统&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;超级块&lt;/strong&gt;：描述文件系统的状态：分区大小，块大小，指向空块的指针列表，root 目录的 inode number，magic number&lt;/p&gt;
&lt;p&gt;文件系统认为 disk 是一个 block 数组&lt;/p&gt;
&lt;p&gt;实现文件存储就是最追踪 file 放在哪些 disk block 中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Contiguous Allocation&lt;/li&gt;
&lt;li&gt;Linked List Allocation&lt;/li&gt;
&lt;li&gt;Indexed Allocation&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;contiguous-allocation&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#contiguous-allocation&#34;&gt;#&lt;/a&gt; Contiguous Allocation&lt;/h2&gt;
&lt;p&gt;把 file 储存在相邻的 blocks 中&lt;/p&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;简单实现&lt;/li&gt;
&lt;li&gt;读操作非常高效&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存在 external fragmentation，块与块之间有没利用的外部碎片&lt;/li&gt;
&lt;li&gt;file 一旦创建，文件的大小无法改变&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Good for CD-ROMs, DVDs and other write-once optical media&lt;/p&gt;
&lt;h2 id=&#34;linked-list-allocation&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#linked-list-allocation&#34;&gt;#&lt;/a&gt; Linked List Allocation&lt;/h2&gt;
&lt;p&gt;使用一串用指针连接的 Link list 的块来储存 file，block 的头部储存指向下一个块的指针&lt;/p&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;没有 external fragmentation&lt;/li&gt;
&lt;li&gt;目录条目简单，只用储存第一个块的第一个字的地址&lt;/li&gt;
&lt;li&gt;file 的大小可以变化&lt;/li&gt;
&lt;li&gt;对顺序访问很友好&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;随机访问很慢&lt;/li&gt;
&lt;li&gt;块中的 data 的数目不是 2 的次方&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;linked-list-allocation-using-fat&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#linked-list-allocation-using-fat&#34;&gt;#&lt;/a&gt; Linked List Allocation Using FAT&lt;/h2&gt;
&lt;p&gt;FAT：index table 存放着每个块的 table pointer word&lt;/p&gt;
&lt;p&gt;FAT 文件系统中，disk 的数据区被划分为多个蔟，文件的储存需要分配蔟，而 FAT 表就是记录这些文件分配到的蔟的地址，如果一个文件大小大于一个蔟的大小，就会被分配到多个蔟，FAT 表就会记录这些蔟的连接关系&lt;/p&gt;
&lt;p&gt;就是单独建立一张表来记录一个文件所用的块的连接关系，用于搜索&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分区的第一个 section 会存放 FAT&lt;/li&gt;
&lt;li&gt;FAT 可以读入内存中以减小 disk seek&lt;/li&gt;
&lt;li&gt;disk 中一块一个 FAT entry，按块号排序&lt;/li&gt;
&lt;li&gt;每一个 entry 持有下一个 block 的地址&lt;/li&gt;
&lt;li&gt;最后一个文件标记 - 1&lt;/li&gt;
&lt;li&gt;-2 表示该蔟是空的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;整个块对 data 是可用的&lt;/li&gt;
&lt;li&gt;可以通过对 FAT 的扫描实现随机访问&lt;/li&gt;
&lt;li&gt;目录条目只需要一个 number：starting block number（文件的第一块对于 FAT 表的索引）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;整张表需要拷贝进内存，挤占内存空间&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;inodeindex-node&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#inodeindex-node&#34;&gt;#&lt;/a&gt; inode（index node）&lt;/h2&gt;
&lt;p&gt;每个文件都有自己的 inode，inode 里列举了文件属性和文件所有的 data block 的地址&lt;/p&gt;
&lt;p&gt;inode 内部的块地址分配也有直接和间接两种，间接又分为 single indirect block、double indirect block 和 triple indirect block 三种&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A single indirect block contains pointers to data blocks.&lt;/li&gt;
&lt;li&gt;A double indirect block contains pointers to single&lt;br /&gt;
indirect blocks.&lt;/li&gt;
&lt;li&gt;A triple indirect block contains pointers to double indirect blocks.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;快速的查找和随机访问&lt;/li&gt;
&lt;li&gt;没有外部碎片&lt;/li&gt;
&lt;li&gt;文件被打开时，对应文件的 inode 才被加载到内存中，占用小&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;索引开销大&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;目录实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#目录实现&#34;&gt;#&lt;/a&gt; 目录实现&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;目录的储存和文件的储存方式一样&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;目录条目也储存在 data block 中&lt;/li&gt;
&lt;li&gt;目录文件就是一个目录条目列表&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文件打开时，文件系统会使用文件路径来定位目录条目&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;目录条目提供找到 disk block 的需要信息：文件地址 / 第一个块的块号 /inode 号&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文件属性的位置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在目录条目中&lt;/li&gt;
&lt;li&gt;在一个单独的数据结构中
&lt;ul&gt;
&lt;li&gt;目录条目保存有文件名和 inode number&lt;/li&gt;
&lt;li&gt;文件属性放在 inode 里&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;问题：如果目录中有很长的文件名怎么办&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;给储存名字的地方的大小固定大一点&lt;/li&gt;
&lt;li&gt;Directory entry comprises fixed and variable portion (in line)&lt;br /&gt;
 缺点：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;文件移除的时候会出现大小不同的间隔&lt;/li&gt;
&lt;li&gt;文件名可能跨页，导致页错误&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;目录条目固定大小，但是存放文件名的地方是一个指向对堆区的指针，指向文件名&lt;br /&gt;
缺点：管理堆区；页错误同样会发生&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;share-files&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#share-files&#34;&gt;#&lt;/a&gt; Share Files&lt;/h2&gt;
&lt;p&gt;Hard Link：两个目录有共享文件，则分别指向同一个 inode。&lt;/p&gt;
&lt;p&gt;Symbolic Link（Soft Link）：如果一个目录下想创建另一个文件的共享文件，则创建一个类型为 Link 的文件，文件内保存有共享文件的路径。&lt;/p&gt;
&lt;p&gt;Hard Link 文件的删除：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在每个 inode 中增加引用次数&lt;/li&gt;
&lt;li&gt;计算指向该 inode 的引用次数&lt;/li&gt;
&lt;li&gt;当删除一个 Link 时，引用次数减 1&lt;/li&gt;
&lt;li&gt;当引用次数为 0 时，删除共享文件的 file data&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;软 Link 文件删除：&lt;/p&gt;
&lt;p&gt;Hard Link 的限制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不能跨分区建立连接&lt;/li&gt;
&lt;li&gt;如果其中一个文件被移动到另一个文件系统，则会将其复制，并相应地调整两个文件的链接计数&lt;/li&gt;
&lt;li&gt;只用管理员才可以建立对目录的硬链接&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Soft Link 的限制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Extra space on disk and extra i-node to store&lt;br /&gt;
the link file&lt;/li&gt;
&lt;li&gt;Extra overhead in the traversing path&lt;/li&gt;
&lt;li&gt;If the original file is moved to a different&lt;br /&gt;
location, it can no longer be accessed via the&lt;br /&gt;
symbolic link (dangling link)&lt;/li&gt;
&lt;li&gt;Having multiple copies of a file may set&lt;br /&gt;
copied when dumping a file onto a tape.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;block-size&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#block-size&#34;&gt;#&lt;/a&gt; block size：&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Large：higher data rate, lower space utilization&lt;/li&gt;
&lt;li&gt;Small： lower data rate, higher space utilization&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;追踪空余的块&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#追踪空余的块&#34;&gt;#&lt;/a&gt; 追踪空余的块&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Linked list&lt;/li&gt;
&lt;li&gt;Bit-Map：每个块对应一位，1 表示空，0 表示非空&lt;/li&gt;
&lt;li&gt;counting&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Linked list vs Bit-Map：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存放空块号的 block 要求，Bit-Map 远小于 Linked list&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;文件系统的backup-备份&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件系统的backup-备份&#34;&gt;#&lt;/a&gt; 文件系统的 backup 备份&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Physical dump&lt;/li&gt;
&lt;li&gt;Logical dump&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="操作系统" scheme="http://smallcjy.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/" />
        <updated>2024-06-16T09:25:07.000Z</updated>
    </entry>
    <entry>
        <id>http://smallcjy.github.io/2024/06/16/%E9%93%BE%E8%B7%AF%E5%B1%82/</id>
        <title>链路层</title>
        <link rel="alternate" href="http://smallcjy.github.io/2024/06/16/%E9%93%BE%E8%B7%AF%E5%B1%82/"/>
        <content type="html">&lt;h1 id=&#34;1-edc-error-detection-and-correction-tech&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-edc-error-detection-and-correction-tech&#34;&gt;#&lt;/a&gt; 1 EDC Error Detection and Correction tech&lt;/h1&gt;
&lt;p&gt;有三个检测错误的技术：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Parity Checks 奇偶校验&lt;/li&gt;
&lt;li&gt;Checksum Methods&lt;/li&gt;
&lt;li&gt;Cyclic Redundancy Check&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;11-parity-checks&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#11-parity-checks&#34;&gt;#&lt;/a&gt; 1.1 Parity Checks&lt;/h2&gt;
&lt;p&gt;思想：&lt;/p&gt;
&lt;p&gt;在 d 位的 data 位后一位设置为 Parity bit。如何设置这个 Parity bit 呢？如果 d 位 data 中有偶数位 1 则 P bit 赋值为 0；否则赋值为 1；跟随 packet 一起发送到目标地址。目标主机接收 packet 后会对接收到的 data 进行重新的 Parity bit 计算，并比较和发送过来的 Parity bit，如果不同则说明发生了错误。&lt;/p&gt;
&lt;p&gt;问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不能保证发送过来的 Parity bit 没有发生腐化&lt;/li&gt;
&lt;li&gt;如果发生了偶数次相同的位变化，Parity bit 没有变化但是实际上已经发生了错误&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;改进：使用二维矩阵改进&lt;/p&gt;
&lt;p&gt;原本的 data 为一个向量，现在把它划分为一个 ixj 的矩阵，每一行每一列计算它的 Parity bit，使得这个矩阵扩展为 i+1 x j+1 的矩阵，打包进 packet 发送出去。接收端和之前一样计算所有的 Parity bits 进行比较，如果有一个出现不同则发生了错误。&lt;/p&gt;
&lt;h2 id=&#34;12-checksum&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#12-checksum&#34;&gt;#&lt;/a&gt; 1.2 Checksum&lt;/h2&gt;
&lt;p&gt;思想：&lt;/p&gt;
&lt;p&gt;同样是有一个 data 向量，将这 k 位 data 当成一个个 int 整数，把这些整数相加得到一个数，取其补码作为这个 data 向量的 checksum。接收端接收到 packet 后，重新对 k 位 data 进行求和，得到的数和 checksum 相加看看是不是等于 0，如果是则说明没有出错，如果不是说明出现错误。&lt;/p&gt;
&lt;h2 id=&#34;13-cycling-redundancy-check-循环冗沉检测&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#13-cycling-redundancy-check-循环冗沉检测&#34;&gt;#&lt;/a&gt; 1.3 Cycling Redundancy Check 循环冗沉检测&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;CRC.png&#34; alt=&#34;alt text&#34; /&gt;&lt;br /&gt;
 如何计算 R？&lt;/p&gt;
&lt;p&gt;R=remainder D * 2 的 r 次方 / G（就是用左移 r 位的 D 除以 G，R 是余数）&lt;/p&gt;
&lt;p&gt;这个 G 是人为设定的，通常是四位，比如 1001&lt;/p&gt;
&lt;p&gt;接收端如何检测：收到的 CRC 码（DR）除以 G，如果余数为 0，没有错误；否则出现错误。&lt;/p&gt;
&lt;h1 id=&#34;2-arp-mav翻译成ip&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-arp-mav翻译成ip&#34;&gt;#&lt;/a&gt; 2 ARP MAV 翻译成 IP&lt;/h1&gt;
&lt;h2 id=&#34;21-mac&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#21-mac&#34;&gt;#&lt;/a&gt; 2.1 MAC&lt;/h2&gt;
&lt;p&gt;作用：用来在局域网内寻址&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;6 个字节组成，一共 48 位&lt;/li&gt;
&lt;li&gt;每个网卡在制作出厂时就具有全球唯一的 MAC，IEEE 决定前 24 位，制造厂商决定后 24 位&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;22-实现mac-ip-arp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#22-实现mac-ip-arp&#34;&gt;#&lt;/a&gt; 2.2 实现 MAC-&amp;gt;IP ARP&lt;/h2&gt;
&lt;p&gt;ARP module 接收 IP 地址作为输入，输出局域网内该 ip 的网卡的 MAC。注意：&lt;strong&gt;ARC 只为局域网内的 router 和 host 服务&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;每一个 host 和 router 有一个 ARP table，作为哈希表储存着 IP 和 MAC 的键值对。也具有 TTL 表式这个映射的有效期，因为局域网内的 ip 不是长期有效的。&lt;/p&gt;
&lt;p&gt;举个例子：现在，有个 sender222.222.222.220 想要向 222.222.222.222 发送 datagram。sender 如何查询 222.222.222.222 的 MAC 呢&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;sender 构建特殊的 packet 叫做 ARP packet，包含源 ip 和 mac，目的地 ip 和 mac（暂时是乱写的），称为 ARP query packet。ARP query packet 的目的是查询所有的局域网内的其他 host 和 router 的 MAC 地址根据提供的 IP 地址&lt;/li&gt;
&lt;li&gt;sender 会向 adapter 发送这个 query packet，adapter 识别到后会把 FF-FF-FF-FF-FF-FF 这个最大的 MAC 地址和 query packet 封装进 frame 发送出去。这个 MAC 具有特殊作用，它可以被子网内的所有 host 和 router 接收，其他的 host 或 router 接收到后，检查 query packet 里的目标 ip 是否是自己，如果是查询自己的 ARP table，把正确的 mapper 写入一个 response packet 发送回 sender。&lt;/li&gt;
&lt;li&gt;sender 接收到 response packet，就实现了 ip 向 mac 的翻译。&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="计算机网络" scheme="http://smallcjy.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/" />
        <updated>2024-06-16T07:46:26.000Z</updated>
    </entry>
    <entry>
        <id>http://smallcjy.github.io/2024/06/16/%E6%95%B0%E6%8D%AE%E5%B1%82%E6%8E%A7%E5%88%B6%E5%B9%B3%E9%9D%A2/</id>
        <title>数据层控制平面</title>
        <link rel="alternate" href="http://smallcjy.github.io/2024/06/16/%E6%95%B0%E6%8D%AE%E5%B1%82%E6%8E%A7%E5%88%B6%E5%B9%B3%E9%9D%A2/"/>
        <content type="html"></content>
        <updated>2024-06-16T07:44:46.000Z</updated>
    </entry>
    <entry>
        <id>http://smallcjy.github.io/2024/06/16/IO%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E8%AE%BE%E5%A4%87/</id>
        <title>IO输入输出设备</title>
        <link rel="alternate" href="http://smallcjy.github.io/2024/06/16/IO%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E8%AE%BE%E5%A4%87/"/>
        <content type="html">&lt;h2 id=&#34;1-principle-of-io-software&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-principle-of-io-software&#34;&gt;#&lt;/a&gt; 1 Principle of IO Software&lt;/h2&gt;
&lt;h3 id=&#34;11-goals-of-io-software&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#11-goals-of-io-software&#34;&gt;#&lt;/a&gt; 1.1 Goals of IO Software&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;设备独立性
&lt;ul&gt;
&lt;li&gt;程序可以访问任何的 IO 设备&lt;/li&gt;
&lt;li&gt;不会提前对设备进行特殊处理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Uniform naming 通用命名
&lt;ul&gt;
&lt;li&gt;文件和设备的名字是字符串或者数字&lt;/li&gt;
&lt;li&gt;不会依赖某个机器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Error handling
&lt;ul&gt;
&lt;li&gt;处理错误&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;同步和异步传输数据&lt;/li&gt;
&lt;li&gt;Buffering
&lt;ul&gt;
&lt;li&gt;有缓存机制，数据来到设备不会直接储存到最终目的地&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可共享设备和私有设备&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;12-io-operations&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#12-io-operations&#34;&gt;#&lt;/a&gt; 1.2 IO Operations&lt;/h3&gt;
&lt;h4 id=&#34;121-programmed-io&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#121-programmed-io&#34;&gt;#&lt;/a&gt; 1.2.1 Programmed IO&lt;/h4&gt;
&lt;p&gt;CPU 经常被 IO 设备占用知道 IO 设备任务完成，这在多处理器设备中是不高效的。&lt;/p&gt;
&lt;p&gt;Polling 轮询：CPU 轮询设备的寄存器查看它的状态是 ready 还是 busy 还是 error&lt;/p&gt;
&lt;h4 id=&#34;122-interrupt-driven-io&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#122-interrupt-driven-io&#34;&gt;#&lt;/a&gt; 1.2.2 Interrupt-Driven IO&lt;/h4&gt;
&lt;p&gt;IO 中断设备&lt;/p&gt;
&lt;p&gt;在应用 Buffer 的 content copy 到内核的 buffer 后会允许中断，如果设备忙，cpu 不会 wait 而是 Scheduling 其他的进程。当设备使用完毕后，设备的 controller 会发送 hardware Interrupt 启动中断服务：&lt;/p&gt;
&lt;p&gt;当内核 buffer 的 content 写进 设备时，设备状态恢复 ready。&lt;/p&gt;
&lt;h4 id=&#34;123-io-using-dma&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#123-io-using-dma&#34;&gt;#&lt;/a&gt; 1.2.3 IO using DMA&lt;/h4&gt;
&lt;p&gt;中断驱动 IO 设备的缺点是中断发生在每一个字符的传输，每个字符写入设备寄存器都会经历完成的中断流程。&lt;/p&gt;
&lt;p&gt;DMA 控制器会负责内核 buffer 到 Device buffer 的字符传输，CPU 不需要关心这个传输过程。&lt;/p&gt;
&lt;p&gt;当 DMA 传输完成后 CPU 会被中断，通知 CPU 传输完成。&lt;/p&gt;
&lt;h2 id=&#34;2-io-software-layers&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-io-software-layers&#34;&gt;#&lt;/a&gt; 2 IO software layers&lt;/h2&gt;
&lt;h3 id=&#34;21硬件和驱动之间的一层-interrupt-handlers&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#21硬件和驱动之间的一层-interrupt-handlers&#34;&gt;#&lt;/a&gt; 2.1 硬件和驱动之间的一层 --Interrupt handlers&lt;/h3&gt;
&lt;p&gt;当中断发生时，CPU 会保存必要的数据和状态然后跳转到 Interrupt-handler routine，它存放在内存中存放中断服务的地方。具体位置由 Interrupt vector 决定。&lt;/p&gt;
&lt;p&gt;中断完成后 OS 会执行的事件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;保存 regs（数据、状态、地址）&lt;/li&gt;
&lt;li&gt;设置中断服务程序的上下文：TLB，MMU and page table&lt;/li&gt;
&lt;li&gt;设置中断服务的 stack&lt;/li&gt;
&lt;li&gt;修改中断控制器，允许中断&lt;/li&gt;
&lt;li&gt;复制保存进程表的寄存器&lt;/li&gt;
&lt;li&gt;运行中断服务&lt;/li&gt;
&lt;li&gt;调度下一个运行进程&lt;/li&gt;
&lt;li&gt;设置下一个运行进程 MMU 上下文&lt;/li&gt;
&lt;li&gt;加载新的 PC&lt;/li&gt;
&lt;li&gt;开始运行新的进程&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;22-设备驱动&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#22-设备驱动&#34;&gt;#&lt;/a&gt; 2.2 设备驱动&lt;/h3&gt;
&lt;p&gt;设备驱动是设备控制器和 OS 之间的接口&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;设备驱动函数&lt;/strong&gt;&lt;br /&gt;
作用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接受来自 os 的 Abstract 读写请求，把这些抽象请求重写成适配与设备的具体的请求。&lt;/li&gt;
&lt;li&gt;初始化设备&lt;/li&gt;
&lt;li&gt;检查设备使用状态，推送请求队列&lt;/li&gt;
&lt;li&gt;issue 控制设备的命令序列&lt;/li&gt;
&lt;li&gt;检查错误&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;23-device-independent-io-software-设备独立软件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#23-device-independent-io-software-设备独立软件&#34;&gt;#&lt;/a&gt; 2.3 Device-Independent IO software 设备独立软件&lt;/h3&gt;
&lt;p&gt;设备独立软件的作用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Uniform interfacing for device drivers&lt;/li&gt;
&lt;li&gt;buffers&lt;/li&gt;
&lt;li&gt;error reporting&lt;/li&gt;
&lt;li&gt;allocating and releasing dedicate device&lt;/li&gt;
&lt;li&gt;providing a device-independent block size&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;231-uniform-interfacing&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#231-uniform-interfacing&#34;&gt;#&lt;/a&gt; 2.3.1 Uniform interfacing&lt;/h4&gt;
&lt;p&gt;设备驱动需要有一个统一的接口规范。&lt;/p&gt;
&lt;p&gt;好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;驱动开发者会知道希望开发什么样的驱动服务&lt;/li&gt;
&lt;li&gt;系统开发者可以开发设备独立软件在驱动层之上，为驱动提供服务&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;设备号连接一个合适的设备驱动&lt;/p&gt;
&lt;h4 id=&#34;232-buffering&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#232-buffering&#34;&gt;#&lt;/a&gt; 2.3.2 buffering&lt;/h4&gt;
&lt;h4 id=&#34;233-error-reporting&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#233-error-reporting&#34;&gt;#&lt;/a&gt; 2.3.3 error reporting&lt;/h4&gt;
&lt;h4 id=&#34;234-allocating-dedicate-device&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#234-allocating-dedicate-device&#34;&gt;#&lt;/a&gt; 2.3.4 allocating dedicate device&lt;/h4&gt;
&lt;h2 id=&#34;3-disk&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-disk&#34;&gt;#&lt;/a&gt; 3 Disk&lt;/h2&gt;
&lt;h3 id=&#34;31-magnetic-disk-磁盘&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#31-magnetic-disk-磁盘&#34;&gt;#&lt;/a&gt; 3.1 magnetic disk 磁盘&lt;/h3&gt;
&lt;p&gt;由多个 cylinder（柱面）组成，每个柱面包含多个 tracks 道，track 又可以分为多个 sector 扇区。&lt;/p&gt;
&lt;h3 id=&#34;32disk格式化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#32disk格式化&#34;&gt;#&lt;/a&gt; 3.2&lt;strong&gt;disk 格式化&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;disk 格式化后，disk 只有 empty bits&lt;br /&gt;
 每个 platter 盘片都需要有 low-level format 和 high-level format&lt;/p&gt;
&lt;p&gt;low-level format：把 disk 分成 sectors 可以被 disk 控制器识别读写。由 vendors 完成&lt;/p&gt;
&lt;p&gt;track 的格式化：把 track 按 inter-sector-gap 分隔成一个个 sector。sector 由 preamble（前导号，由位模式、柱面号、扇区号组成）、data（512 bytes）、ECC 组成&lt;/p&gt;
&lt;h3 id=&#34;33-cylinder-skew-柱面斜进&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#33-cylinder-skew-柱面斜进&#34;&gt;#&lt;/a&gt; 3.3 cylinder skew 柱面斜进&lt;/h3&gt;
&lt;p&gt;不同磁道的同一个扇区号不是分布在同一个半径上的，而是有一定的斜度，保证每次 disk header 在切换磁道后都是从 0 号扇区开始。这是由于不同磁道的周长是不一样的&lt;/p&gt;
&lt;p&gt;下面是计算斜进量的公式&lt;/p&gt;
&lt;p&gt;cylinder skew = seek time / per sectors time&lt;/p&gt;
&lt;h3 id=&#34;34-interleaving&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#34-interleaving&#34;&gt;#&lt;/a&gt; 3.4 interleaving&lt;/h3&gt;
&lt;p&gt;扇区在磁道中不是按顺序排列的，是交错排列的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;single interleaving&lt;/li&gt;
&lt;li&gt;double interleaving&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;35-disk-arm-scheduling-算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#35-disk-arm-scheduling-算法&#34;&gt;#&lt;/a&gt; 3.5 Disk ARM Scheduling 算法&lt;/h3&gt;
&lt;p&gt;用于管理磁盘的磁头臂移动的算法&lt;/p&gt;
&lt;p&gt;读写磁盘块的时间 = seek time+rotational time+data transfer time&lt;/p&gt;
&lt;p&gt;算法会对磁道的访问请求进行排序来减小磁盘臂的移动&lt;/p&gt;
&lt;h4 id=&#34;351-fcfs算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#351-fcfs算法&#34;&gt;#&lt;/a&gt; 3.5.1 FCFS 算法&lt;/h4&gt;
&lt;h4 id=&#34;352-ssf算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#352-ssf算法&#34;&gt;#&lt;/a&gt; 3.5.2 SSF 算法&lt;/h4&gt;
&lt;p&gt;当前位置移动到目标柱面所需 seek time 最小的优先选择&lt;/p&gt;
&lt;h4 id=&#34;353-elevator-算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#353-elevator-算法&#34;&gt;#&lt;/a&gt; 3.5.3 Elevator 算法&lt;/h4&gt;
&lt;p&gt;算法思想：单方向的移动磁盘臂，处理这个方向上的柱面请求，处理完成后换个方向重复执行。&lt;/p&gt;
&lt;h4 id=&#34;354-错误处理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#354-错误处理&#34;&gt;#&lt;/a&gt; 3.5.4 错误处理&lt;/h4&gt;
&lt;p&gt;小的错误由 ECC correct，整个扇区损坏需要由 Disk controller 或者 OS 处理。&lt;/p&gt;
&lt;p&gt;处理错误的两个方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Disk controller：在传入时检查，发现错误的扇区进行标记并用空格取代，每个磁道会预留几个空白扇区用来取代 bad section。&lt;/li&gt;
&lt;li&gt;OS：检查错误的扇区并记录他们&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="操作系统" scheme="http://smallcjy.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/" />
        <updated>2024-06-16T04:56:26.000Z</updated>
    </entry>
    <entry>
        <id>http://smallcjy.github.io/2024/06/16/%E5%8F%AF%E9%9D%A0%E4%BC%A0%E8%BE%93/</id>
        <title>可靠传输</title>
        <link rel="alternate" href="http://smallcjy.github.io/2024/06/16/%E5%8F%AF%E9%9D%A0%E4%BC%A0%E8%BE%93/"/>
        <content type="html">&lt;hr /&gt;
&lt;h2 id=&#34;title-rdtprinciplesdate-2024-06-14-213706tags计算机网络&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#title-rdtprinciplesdate-2024-06-14-213706tags计算机网络&#34;&gt;#&lt;/a&gt; title: RDTPrinciples&lt;br /&gt;
date: 2024-06-14 21:37:06&lt;br /&gt;
tags：计算机网络&lt;/h2&gt;
&lt;h2 id=&#34;重点principles-of-reliable-data-transfer&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#重点principles-of-reliable-data-transfer&#34;&gt;#&lt;/a&gt; 重点：Principles of Reliable Data Transfer&lt;/h2&gt;
&lt;h3 id=&#34;1-可靠数据传输服务模型搭建和服务实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-可靠数据传输服务模型搭建和服务实现&#34;&gt;#&lt;/a&gt; 1 可靠数据传输服务模型搭建和服务实现&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;提供服务：主机通过应用层在某个进程发送数据到传输层，数据通过可靠的通道 channel 到达另一个主机的应用层的某个接收进程。&lt;/li&gt;
&lt;li&gt;服务实现：主机发送进程调用 rdt_send () 发送数据到传输层，传输层通过可靠的数据传输协议，使用 udt_send () 发送到链路层，经过不可靠的链路传输到目标主机下的传输层然后调用 rdt_rcv () 进入传输层，最终进入应用层进程。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;reliable data transfer protocol&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;上面提到的可靠的数据传输协议，就是实现上述的服务的过程。比如 TCP 就是一种可靠的数据传输协议。&lt;/p&gt;
&lt;h3 id=&#34;2-建立一个可靠的数据传输协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-建立一个可靠的数据传输协议&#34;&gt;#&lt;/a&gt; 2 建立一个可靠的数据传输协议&lt;/h3&gt;
&lt;p&gt;这里我们会循序渐进的介绍几种 rdt，每一种都是前一种的完善和升级。&lt;/p&gt;
&lt;h4 id=&#34;21-rdt10&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#21-rdt10&#34;&gt;#&lt;/a&gt; 2.1 rdt1.0&lt;/h4&gt;
&lt;p&gt;发送端和接送端各有一个只有一个状态的 FSM，当接收到应用层发送来的数据时，打包成 package 发送到链路层；接收端从链路层接收到 package 解包成 data 发送给上层应用层。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;rdt1.0.png&#34; alt=&#34;alt text&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;22-rdt20&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#22-rdt20&#34;&gt;#&lt;/a&gt; 2.2 rdt2.0&lt;/h4&gt;
&lt;p&gt;rdt1.0 是建立在链路层的传输通道不会发生丢包的基础上的，这是不可能的事情，包传递的过程中发生位错误是非常常见的。&lt;/p&gt;
&lt;p&gt;rdt2.0 是建立在发送的 package 一定会被接收到但是允许发生 bit 错误。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;positive acknowledgements：确认收到消息&lt;/li&gt;
&lt;li&gt;negative acknowledgements：未收到请求重发消息&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用这两个信息可以使得 sender 针对这两个情况进行不同的动作，这是 rdt2.0 中非常重要的基础。这种可能重传的机制被称为 ARQ&lt;/p&gt;
&lt;p&gt;ARQ 协议需要三个额外的协议来处理位错误的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Error detection 错误检测&lt;/li&gt;
&lt;li&gt;Receiver feedback 接收端反馈&lt;/li&gt;
&lt;li&gt;Retransmission 重传&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来正式介绍 rdt2.0，首先来看他的 FSM，与 rdt1.0 不同的是，rdt2.0 的 sender side 的 FSM 有两个状态，receiver side 的 FSM 只有一个状态&lt;/p&gt;
&lt;p&gt;先看 sender side：两个状态分别为 wait for call from above（1） 和 wait for ack or nak（2）。当处于 1 状态时，当 rdt_send (data) 消息到来时，执行  &lt;code&gt;sndpkt = make_pkg(data, checksum); udt_send(sndpkt);&lt;/code&gt;  进入状态 2；当处于状态 2 时，如果收到 rdt_rcv (rcvpkt) &amp;amp;&amp;amp; isNAK (rcvpkt), 执行 &lt;code&gt;udt_send(sndpkt)&lt;/code&gt;  重新发包；如果收到 rdt_rcv (rcvpkt) &amp;amp;&amp;amp; isACK (rcvpkt), 进入状态（1）&lt;/p&gt;
&lt;p&gt;再看 receiver side：检查到包损坏，发送 NAK；检查到包完好，发送 ACK 并把 package 解包的 data 发送到应用层。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;rdt2.0.png&#34; alt=&#34;alt text&#34; /&gt;&lt;/p&gt;
&lt;p&gt;看上去没什么问题，但实际上有个致命的错误！我们无法保证 ACK 或者 NAK 的位上没有发生损坏。所以我们仍然需要在包含 ACK 后 NAK 的包上添加 checksum。如果确认损坏，我们又该如何处理这种情况呢？&lt;/p&gt;
&lt;p&gt;解决方法：&lt;br /&gt;
在 data package 中添加 sequence number 序列号，这样 receiver 就可以知道接收的包是不是重发的。&lt;/p&gt;
&lt;p&gt;举个例子：stop-and-wait protocol，接收的 package 的 sn 之前遇到过则是重发的，不一样或者增加则是新发的&lt;/p&gt;
&lt;p&gt;应用这个解决方法，rdt2.1 产生了，能够很好的解决 ACKNAK 消息丢失的问题。&lt;/p&gt;
&lt;h4 id=&#34;221-rdt21&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#221-rdt21&#34;&gt;#&lt;/a&gt; 2.2.1 rdt2.1&lt;/h4&gt;
&lt;p&gt;sender side：&lt;br /&gt;
&lt;img data-src=&#34;rdt2.1.png&#34; alt=&#34;alt text&#34; /&gt;&lt;/p&gt;
&lt;p&gt;初始状态是 wait for call 0 from above，接收到上层发来的 data，和 0（sn）、checksum 一起打包发送给链路层，进入状态 wait for ACK or NAK 0。&lt;/p&gt;
&lt;p&gt;如果接收到反馈的 package，查看发生了损坏或者是 NAK package 重发包；如果没有发生损坏或者是 ACK 进入下一个状态：wait for call 1 from above。&lt;/p&gt;
&lt;p&gt;接收到上层发来的 data，和&lt;strong&gt; 1&lt;/strong&gt;（sn）、checksum 一起打包发送给链路层，进入状态 wait for ACK or NAK 1。&lt;/p&gt;
&lt;p&gt;如果接收到反馈的 package，查看发生了损坏或者是 NAK package 重发包；如果没有发生损坏或者是 ACK 进入下一个状态：wait for call 0 from above。完成闭环。&lt;/p&gt;
&lt;p&gt;这个 FSM 用到的 sn 码只有 0 和 1。&lt;/p&gt;
&lt;p&gt;receiver side：&lt;br /&gt;
&lt;img data-src=&#34;rdt2.1.1.png&#34; alt=&#34;alt text&#34; /&gt;&lt;/p&gt;
&lt;p&gt;只有两个状态。&lt;/p&gt;
&lt;p&gt;初始状态是 wait for 0 from below，接收到链路层发来的包，检查包没有发生错误并且 sn 是 0，解压包把 data 向上层传递。把 ACK 消息&lt;strong&gt;和 checksum&lt;/strong&gt; 打包发送给 sender side，进入下一个状态 wait for 1 from below；&lt;/p&gt;
&lt;p&gt;如果接收到链路层发来的包，检查包发生错误，则把 NAK 和 checksum 打包发送给 receiver side； 如果接收到链路层发来的包，检查包没错误但是是序号为 1 的包，把 ACK 和 checksum 打包发送给 sender side。状态没有发生变化；&lt;/p&gt;
&lt;p&gt;状态是 wait for 1 from below 时，处理流程和上面是完全对称的。&lt;/p&gt;
&lt;h4 id=&#34;222-rdt22&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#222-rdt22&#34;&gt;#&lt;/a&gt; 2.2.2 rdt2.2&lt;/h4&gt;
&lt;p&gt;rdt2.2，与 rdt2.1 不同的是：接收端必须包括被 ACK 消息确认的 packet 的 sequence number，sender 必须检查被接收的 ACK 消息确认的 package 的 sn。也就是说接收端返回的 ACK 和 NAK 消息也带有 sn 序列号，只有符合当前状态的 sn 才可以做出 rdt2.1 的反应。也就是处于状态 1 时收到序号为 0 的包会发送 ACK 但不会把 data 接收而是丢弃了&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;rdt2.2.1.png&#34; alt=&#34;alt text&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;rdt2.2.2.png&#34; alt=&#34;alt text&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;23-rdt30&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#23-rdt30&#34;&gt;#&lt;/a&gt; 2.3 rdt3.0&lt;/h4&gt;
&lt;p&gt;现在要开始考虑链路层的传输会有丢包的情况，这是最可能发生的事情，所以现在的应用大多是 rdt3.0 的协议。&lt;/p&gt;
&lt;p&gt;伴随着这个问题产生的还有两个顾虑：如何检测丢包以及当丢包时需要做出的反应&lt;/p&gt;
&lt;p&gt;我们会把检测丢包和恢复重发的任务放在 sender side&lt;/p&gt;
&lt;p&gt;那么如何检测丢包呢？sender side 在一段固定的时间内没有收到发送的 package 的 ACK，就可以认为这个包丢失了，开始重传。如果发送的 package 没有丢失，只是在链路层中遭遇了拥塞导致延迟时间超过设定的 timeout，也会触发重发，这样就会导致 duplicate data packets。幸运的是，可以采用 rdt2.2 的序号机制来无视多余的重发包。&lt;/p&gt;
&lt;p&gt;具体流程可以看 FSM&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;rdt3.0sender.png&#34; alt=&#34;alt text&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-pipelined-reliable-data-transfer-protocols&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-pipelined-reliable-data-transfer-protocols&#34;&gt;#&lt;/a&gt; 3 Pipelined Reliable Data Transfer Protocols&lt;/h3&gt;
&lt;p&gt;stop-and-wait 类型的协议性能无法满足需求，使用流水线 rdt 协议能提高性能。&lt;/p&gt;
&lt;p&gt;流水线模式 sender 和 receiver 都可以发送多个 packet，不需要等待 ACK。为了实现这样的特性采用流水线技术。&lt;/p&gt;
&lt;p&gt;实现方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;sequence number 的范围可以增长，且每一个在传输的 packet 都有一个独特的 sn。&lt;/li&gt;
&lt;li&gt;sender 和 receiver 设立 buffer 用来发送或者接收多个包。sender 必须设立 buffer 来缓存没有 ACK 的包用来重发。receiver 也需要为接收的 packet 设立 buffer 来缓存&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;4-go-back-n-gbn&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-go-back-n-gbn&#34;&gt;#&lt;/a&gt; 4 Go-Back-N GBN&lt;/h3&gt;
&lt;p&gt;首先确定一点，GBN 协议是一个流水线 RDT 协议。但是，GBN 协议中 sender 会限制 buffer 中未 ACK 的 packet 的数量为 N。&lt;br /&gt;
&lt;img data-src=&#34;GBN.png&#34; alt=&#34;alt text&#34; /&gt;&lt;br /&gt;
sn 的范围分为三部分。一是已经发送且 ACK 的 sn [0~base-1]，二是已经发送但是没有 ACK 的 sn [ base~nextseqnum-1]，第三是未发送的待分配的 sn [ nextseqnum~n-1]。第二和第三部分之和为 N。&lt;/p&gt;
&lt;p&gt;N 也被称为 window size；GBN 也被称为 sliding-window protocol。window size 是可以变化的，比如在 tcp 协议中，发生 congest 时会减小。sn 码在实际操作中是被封装在 section 中的，有位数限制。k 位的 sn 码最大为 2 的 k 次方 - 1。tcp 的 sn 码一共 32bits&lt;/p&gt;
&lt;p&gt;GBN 协议的 FSM 表示如下：&lt;br /&gt;
&lt;img data-src=&#34;GBNsender.png&#34; alt=&#34;alt text&#34; /&gt;&lt;br /&gt;
sender 在 timeout 后，会从 base 开始重新一轮发包；如果某个 ACK 没收到，那么后面收到的 ACK 是不会更新 base 的，所以就会导致发了很多冗余的 packet。这是个问题。&lt;br /&gt;
&lt;img data-src=&#34;GBNreceiver.png&#34; alt=&#34;alt text&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;GBNOp.png&#34; alt=&#34;alt text&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;4-selective-repeat-sr&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-selective-repeat-sr&#34;&gt;#&lt;/a&gt; 4 Selective Repeat SR&lt;/h3&gt;
&lt;p&gt;GBN 协议也是存在缺陷的，一个 GBN 协议包的出错或导致大量的包重发活动。SR 协议能够避免不必要的包重发通过让 sender 只重发那些被发送端认为是出错的丢包的 packet。&lt;/p&gt;
&lt;p&gt;为解决这个问题，SR 升级了 sn 码的属性，在【base~nextseqnum 中允许存在 ack 的 sn 并且做上标记】。SR 的 receiver 会承认 out-order 的 packet 并且发送 ACK，sender 也会接收这些 ACK。但是 receiver 的 buffer 仍然会保留这些被接受的 packet 直到比他的 sn 小的 miss 的 packet 都被接收到才不保留。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;SRsn.png&#34; alt=&#34;alt text&#34; /&gt;&lt;br /&gt;
rcv_base 取决于期望接收到的 packet 的 sn，也就是被接受且发送 ack 的下一个 sn&lt;br /&gt;
&lt;img data-src=&#34;SRsendereventandactor.png&#34; alt=&#34;alt text&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;SRreceivereventandactor.png&#34; alt=&#34;alt text&#34; /&gt;&lt;/p&gt;
&lt;p&gt;SR 和 GNB 的不同在于，所有的接收到 packet 都会被打上 ack，base 会跳跃到最小的未被接收到的 sn 上，可能一跳一大段！但是 GBN 就不行，他没有处理 out-order 的 packet 所以一旦丢包 base 就会卡住，并且 timeout 后又从 base 开始发包一步一步的递增。SR 的 base 是具有跳跃性的！&lt;/p&gt;
&lt;h4 id=&#34;42-todosr的lack&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#42-todosr的lack&#34;&gt;#&lt;/a&gt; 4.2 TODO：SR 的 lack&lt;/h4&gt;
</content>
        <category term="计算机网络" scheme="http://smallcjy.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/" />
        <updated>2024-06-16T04:09:00.000Z</updated>
    </entry>
    <entry>
        <id>http://smallcjy.github.io/2024/06/12/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E6%80%BB%E5%A4%8D%E4%B9%A0/</id>
        <title>数字逻辑总复习</title>
        <link rel="alternate" href="http://smallcjy.github.io/2024/06/12/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E6%80%BB%E5%A4%8D%E4%B9%A0/"/>
        <content type="html">&lt;h2 id=&#34;1-二进制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-二进制&#34;&gt;#&lt;/a&gt; 1 二进制&lt;/h2&gt;
&lt;h3 id=&#34;11-the-art-of-managing-complexity&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#11-the-art-of-managing-complexity&#34;&gt;#&lt;/a&gt; 1.1 The Art of Managing Complexity&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Abstraction&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;隐藏不重要的细节&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Discipline 约束&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一种内在限制，可以帮助我们更高度地抽象化&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The Three -y&#39;s
&lt;ul&gt;
&lt;li&gt;Hierarchy 层次化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;系统划分为模块和子模块&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Modularity 模块化&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所有模块都有定义好的功能和接口&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Regularity 规整化&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;模块追求 uniformity，可以被 reused&lt;/p&gt;
&lt;h3 id=&#34;12-数制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#12-数制&#34;&gt;#&lt;/a&gt; 1.2 数制&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;内容：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;进制数之间的转化：整数和小数&lt;/p&gt;
&lt;p&gt;浮点数的 IEEE 格式化&lt;/p&gt;
&lt;p&gt;可以去看计组或者计概的笔记&lt;/p&gt;
&lt;h3 id=&#34;13-二进制运算&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#13-二进制运算&#34;&gt;#&lt;/a&gt; 1.3 二进制运算&lt;/h3&gt;
&lt;p&gt;二进制加减、二进制原型的反码、补码&lt;/p&gt;
&lt;h3 id=&#34;14-logic-gates&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#14-logic-gates&#34;&gt;#&lt;/a&gt; 1.4 Logic Gates&lt;/h3&gt;
&lt;p&gt;常见的逻辑门有：NOT AND OR NAND NOR ，其中被分为单输入、多输入&lt;/p&gt;
&lt;h4 id=&#34;141-logic-level&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#141-logic-level&#34;&gt;#&lt;/a&gt; 1.4.1 Logic Level&lt;/h4&gt;
&lt;p&gt;使用 Discrete Voltages 来代表 0（低电平）和 1（高电平）&lt;/p&gt;
&lt;p&gt;输入端和输出端的最小可视为高（低）电平的电压的差值（记住大减小即可）被称为噪声容限（noise margin），分为高电平噪声容限和低电平噪声容限&lt;/p&gt;
&lt;h3 id=&#34;15-晶体管transistor&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#15-晶体管transistor&#34;&gt;#&lt;/a&gt; 1.5 晶体管 Transistor&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;nMOS：接低电平 输入端 0 不可过、1 可过&lt;/li&gt;
&lt;li&gt;pMOS：接高电平 输入端 1 可过、0 不可过&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;组合成逻辑门：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;非门&lt;br /&gt;
&lt;img data-src=&#34;image.png&#34; alt=&#34;alt text&#34; /&gt;&lt;/li&gt;
&lt;li&gt;与非门：nMos 串联，pMos 并联&lt;br /&gt;
&lt;img data-src=&#34;image-1.png&#34; alt=&#34;alt text&#34; /&gt;&lt;/li&gt;
&lt;li&gt;或非门：nMos 并联，pMos 串联&lt;br /&gt;
&lt;img data-src=&#34;image-2.png&#34; alt=&#34;alt text&#34; /&gt;&lt;/li&gt;
&lt;li&gt;如果要构造与门或门，就在与非门和或非门输入端加上非门&lt;/li&gt;
&lt;li&gt;要多输入就并串几个&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-组合逻辑电路&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-组合逻辑电路&#34;&gt;#&lt;/a&gt; 2 组合逻辑电路&lt;/h2&gt;
&lt;h3 id=&#34;21-主题总览&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#21-主题总览&#34;&gt;#&lt;/a&gt; 2.1 主题总览&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Boolean Equations&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Boolean Algebra&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;From Logic to Gates&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Multilevel Combinational Logic&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;X&#39;s and Z&#39;s&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Karnaugh Maps&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Combinational Building Blocks&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Timing&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;node： A node is a wire, whose voltage conveys a discrete-valued variable&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;input&lt;/li&gt;
&lt;li&gt;output&lt;/li&gt;
&lt;li&gt;internal&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;22-boolean-equations-布尔表达式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#22-boolean-equations-布尔表达式&#34;&gt;#&lt;/a&gt; 2.2 Boolean Equations 布尔表达式&lt;/h3&gt;
&lt;p&gt;取反：A&#39;；取与（积）：A.B；取或（和）：A+B&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最小项 Minterm：化简后全部积起来&lt;/li&gt;
&lt;li&gt;最大项 Maxterm：化简后全部和起来&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;SOP form: 使用和式将与式连接起来的模式&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每一行都有最小项&lt;/li&gt;
&lt;li&gt;所有的布尔表达式都可以写成 SOPform&lt;/li&gt;
&lt;li&gt;最小项之和&lt;/li&gt;
&lt;li&gt;Y 值为 1 的需要&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;POS form：使用积式将和式连接起来&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;A&lt;/th&gt;
&lt;th&gt;B&lt;/th&gt;
&lt;th&gt;max&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;A+B&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;A&#39;+B&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;A+B&#39;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;A&#39;+B&#39;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;每一行都有最大项&lt;/li&gt;
&lt;li&gt;所有的布尔表达式都可以写成 POSform&lt;/li&gt;
&lt;li&gt;最大项之积&lt;/li&gt;
&lt;li&gt;Y 值为 0 的需要&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Normalterm form：变量只出现一次的式子&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;23-boolean-algebra-布尔代数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#23-boolean-algebra-布尔代数&#34;&gt;#&lt;/a&gt; 2.3 Boolean Algebra 布尔代数&lt;/h3&gt;
&lt;p&gt;布尔运算规律&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同一性：B・1=B；B+0=B；&lt;/li&gt;
&lt;li&gt;零元律&lt;/li&gt;
&lt;li&gt;重叠率&lt;/li&gt;
&lt;li&gt;回旋&lt;/li&gt;
&lt;li&gt;互补：B・B&#39;=0；B+B&#39;=1&lt;/li&gt;
&lt;li&gt;交换律&lt;/li&gt;
&lt;li&gt;结合律&lt;/li&gt;
&lt;li&gt;分配律&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;吸收律&lt;/strong&gt;：&lt;strong&gt;B·（B+C）=B；B+B·C=B&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;合并律：（B・C）+（B・C&#39;）=B；（B+C）・（B+C&#39;）=B&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;一致律：&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;（B·C）+（B&#39;·D）+（C·D）=（B·C）+（B&#39;·D）&lt;/li&gt;
&lt;li&gt;（B+C）·（B&#39;+D）·（C+D）=（B+C）·（B&#39;+D）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;德摩根律&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;24-schematic-逻辑电路原理图&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#24-schematic-逻辑电路原理图&#34;&gt;#&lt;/a&gt; 2.4 Schematic 逻辑电路原理图&lt;/h3&gt;
&lt;p&gt;按数电的经验来完成&lt;/p&gt;
&lt;h3 id=&#34;25-multilevel-combinational-logic&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#25-multilevel-combinational-logic&#34;&gt;#&lt;/a&gt; 2.5 Multilevel Combinational Logic&lt;/h3&gt;
&lt;h4 id=&#34;251-hardware-reduction&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#251-hardware-reduction&#34;&gt;#&lt;/a&gt; 2.5.1 Hardware Reduction&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;NANDs 和 NORs 的使用能提高效率，所以需要把布尔表达式化成与非或非式，这个翻译过程称为 Circuit Manipulations&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用前面介绍的布尔代数规律进行转换&lt;/p&gt;
&lt;h4 id=&#34;252-bubble-pushing-气泡推进&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#252-bubble-pushing-气泡推进&#34;&gt;#&lt;/a&gt; 2.5.2 Bubble Pushing 气泡推进&lt;/h4&gt;
&lt;p&gt;大量的与非门和或非门使得表达式的阅读变得困难，使用气泡推进使得 node 两边要么没有取反要么都取反&lt;/p&gt;
&lt;p&gt;原理：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Y=（AB）’=A&#39;+B&#39;&lt;/li&gt;
&lt;li&gt;Y=（A+B）’=A&#39;·B&#39;&lt;br /&gt;
 两种推进方式：&lt;/li&gt;
&lt;li&gt;Backward：&lt;br /&gt;
&lt;img data-src=&#34;Backward.png&#34; alt=&#34;alt text&#34; /&gt;&lt;/li&gt;
&lt;li&gt;Forward：&lt;br /&gt;
&lt;img data-src=&#34;Forward.png&#34; alt=&#34;alt text&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;技巧：推进的时候，负号移动，变元器件&lt;/p&gt;
&lt;h3 id=&#34;26-x和z&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#26-x和z&#34;&gt;#&lt;/a&gt; 2.6 X 和 Z&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;X&lt;br /&gt;
Content：电路尽力同时将输出置为 1 和 0，此时输出值被称为 X，也叫做非法值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Z&lt;br /&gt;
Floating 浮空值：Z 表示某输出值既没有被驱动为 0 也没有被驱动为 1，常见于三台缓冲器（带有 enable 的原件）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;27-卡诺式图&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#27-卡诺式图&#34;&gt;#&lt;/a&gt; 2.7 卡诺式图&lt;/h3&gt;
&lt;p&gt;目的：化简布尔表达式&lt;/p&gt;
&lt;p&gt;详见数电&lt;/p&gt;
&lt;h3 id=&#34;28-组合逻辑模块-combinational-building-blocks&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#28-组合逻辑模块-combinational-building-blocks&#34;&gt;#&lt;/a&gt; 2.8 组合逻辑模块 Combinational Building Blocks&lt;/h3&gt;
&lt;h4 id=&#34;281-decorders-译码器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#281-decorders-译码器&#34;&gt;#&lt;/a&gt; 2.8.1 Decorders 译码器&lt;/h4&gt;
&lt;p&gt;译码器是多输入、多输出的逻辑电路，用来把一段编码转换成另一段编码。&lt;/p&gt;
&lt;p&gt;译码器有 enable inputs，用来选择功能&lt;/p&gt;
&lt;p&gt;常见的译码器有：N-to-2N Decoders&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;N inputs and 2N outputs&lt;/li&gt;
&lt;li&gt;One-hot outputs：在一个时间段里只有多个输出中只有一个高电平&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2-4 Decoder 的实现：&lt;br /&gt;
&lt;img data-src=&#34;2-4decoder.png&#34; alt=&#34;alt text&#34; /&gt;&lt;/p&gt;
&lt;p&gt;就是在输入端加一个置反的和不置反的一起加到 AND 门下，有多少个输出就有多少个 AND 门&lt;/p&gt;
&lt;p&gt;可以使用 decoder 的输出来组合成各种各样的逻辑电路，因为一个 a-b decoder 实际上就是 ab 的所有 minterm 的组合&lt;/p&gt;
&lt;h4 id=&#34;282-multiplexers-多路复用器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#282-multiplexers-多路复用器&#34;&gt;#&lt;/a&gt; 2.8.2 Multiplexers 多路复用器&lt;/h4&gt;
&lt;p&gt;与译码器的少变多不同，mux 是在多个输入中选择特定的输入输出 1，也就是多变少。&lt;/p&gt;
&lt;p&gt;MUX 不仅需要输入端，也需要选择端 select（S） ，有 N 个 select 就选择 2 的 N 次方个输入连接输出&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4-to-1 MUX&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;原理图：&lt;br /&gt;
&lt;img data-src=&#34;4-1MUX.png&#34; alt=&#34;alt text&#34; /&gt;&lt;/p&gt;
&lt;p&gt;小的 MUX 可以组合成大的 MUX&lt;/p&gt;
&lt;p&gt;MUX 可以使用 lookup table 来实现逻辑内容，Y=F（S1，S2，・・・），可以根据查找表决定要选择的输入，置为 1，或者是逻辑变量也为 1 的逻辑变量；其他的输入置为 0 或者逻辑变量也为 0 的逻辑变量；就可以实现逻辑表达式。&lt;/p&gt;
&lt;h3 id=&#34;29-timing-时序&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#29-timing-时序&#34;&gt;#&lt;/a&gt; 2.9 Timing 时序&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;输入改变后输出作出改变时发生的延迟&lt;/li&gt;
&lt;li&gt;Timing diagram（时序图）：描述一个电路在输入端发生变化时产生的瞬间变化。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%97%B6%E5%BA%8F%E5%9B%BE.png&#34; alt=&#34;alt text&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Propagation delay（传播延迟）：tpd = 从 input 到 output 的最大延迟；&lt;/li&gt;
&lt;li&gt;Contamination delay（最小延迟）：tcd = 从 input 到 output 的最小延迟。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;delay 产生的原因：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;电路中的电容和电阻&lt;/li&gt;
&lt;li&gt;光速的限制&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为什么 tpd 和 tcd 通常是不一样的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;上升沿延迟和下降沿延迟是不一样的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;多个输入和输出之间延迟不同&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;电路的温度&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Critical Path 关键路径&lt;/strong&gt;&lt;br /&gt;
 the longest,slowest path&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Short Path 最短路径&lt;/strong&gt;&lt;br /&gt;
 the shortest,fastest path&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Glitch 毛刺&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当一次输入端改变引起输出端多次改变时就会发生毛刺&lt;/p&gt;
&lt;p&gt;如何修正：&lt;/p&gt;
&lt;p&gt;卡诺式图的圈连接起来&lt;/p&gt;
&lt;h2 id=&#34;3-时序逻辑电路&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-时序逻辑电路&#34;&gt;#&lt;/a&gt; 3 时序逻辑电路&lt;/h2&gt;
&lt;p&gt;主题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Latches and Flip-Flops&lt;/li&gt;
&lt;li&gt;Synchronous Logic Design&lt;/li&gt;
&lt;li&gt;Finite State Machines&lt;/li&gt;
&lt;li&gt;Timing of Sequential Logic&lt;/li&gt;
&lt;li&gt;Parallelism&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;时序逻辑电路的输出取决于之前的输入和当前的输入，所以具有记忆功能 memory。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;state：记住之前的输入，就是当前电路的状态&lt;/li&gt;
&lt;li&gt;Latches and flip-flops：储存一个状态的状态元素集合&lt;/li&gt;
&lt;li&gt;synchronous sequential circuits：由 flip-flops 组合成的组合逻辑电路&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;31-锁存器latch&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#31-锁存器latch&#34;&gt;#&lt;/a&gt; 3.1 锁存器 Latch&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Bistable Circuit：双稳态元件，可以输出一正一反两个输出，没有输入，用于储存。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SR Latch SR 锁存器&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;特性：S 是 set 位，R 是 reset 位，S=1R=0 时 Q 被设置为 1，当 S=0R=1 时 Q 被重置为 0；S=0R=0 时 Q 保持不变，储存；S=1R=1 是非法状态&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;D Latch D 锁存器&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;两个输入：D 和 CLK 时钟信号&lt;/li&gt;
&lt;li&gt;当 CLK=1 时，Q 变成和 D 一样；当 CLK=0 时，Q 保持不变&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;32-触发器flip-flops&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#32-触发器flip-flops&#34;&gt;#&lt;/a&gt; 3.2 触发器 flip-flops&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;D Flip-Flop&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;D 寄存器，两个输入：CLK 和 D；CLK 上升沿时，D 赋值给 Q；CLK 下降沿时，保持。&lt;/p&gt;
&lt;p&gt;注意和 D Latch 的区别：D 锁存器是在 CLK 是 1 时候发生作用，在这期间 D 的变化都会引起 Q 的变化；而 D 触发器只有在 CLK 上升时，时间只有一刹那。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Enable Flip-flops 带使能端的触发器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当 E 是 1 时，触发器是普通的触发器；当 E 是 0 时，触发器只有保持功能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Resettable Flip-Flops 带重置端的触发器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当 Reset=1 时，Q 被重置为 0；当 Reset=0 时，触发器为普通的 D 触发器&lt;/p&gt;
&lt;p&gt;两种类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Synchronous 同步的：只有在 CLK 上升沿发生作用&lt;/li&gt;
&lt;li&gt;Asynchronous 异步的：即时的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Settable Flip-Flops 带重置端的触发器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当 Set=1 时，Q 被重置为 1；当 Set=0 时，触发器为普通的 D 触发器&lt;/p&gt;
&lt;p&gt;两种类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Synchronous 同步的：只有在 CLK 上升沿发生作用&lt;/li&gt;
&lt;li&gt;Asynchronous 异步的：即时的&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;33-synchronous-logic-design-同步逻辑电路设计&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#33-synchronous-logic-design-同步逻辑电路设计&#34;&gt;#&lt;/a&gt; 3.3 synchronous logic design 同步逻辑电路设计&lt;/h3&gt;
&lt;p&gt;特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用寄存器来切开环路&lt;/li&gt;
&lt;li&gt;寄存器保存着系统的状态&lt;/li&gt;
&lt;li&gt;在上升沿时系统的状态发生改变&lt;/li&gt;
&lt;li&gt;同步时序电路组成规则：
&lt;ul&gt;
&lt;li&gt;所有的元件是寄存器或者组合元器件&lt;/li&gt;
&lt;li&gt;至少由一个元件是寄存器&lt;/li&gt;
&lt;li&gt;所有的寄存器都接收同一个时钟信号 CLK&lt;/li&gt;
&lt;li&gt;所有的环路都有一个寄存器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;两种常见的 SSC：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FSMs 有限状态机&lt;/li&gt;
&lt;li&gt;Pipeline 流水线&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;331-必考重点fsms&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#331-必考重点fsms&#34;&gt;#&lt;/a&gt; 3.3.1 必考重点：FSMs&lt;/h4&gt;
&lt;p&gt;组成：由 M 个输入，N 个输出和 k 位状态。同时接收一个 CLK 和可选择的复位信号。&lt;/p&gt;
&lt;p&gt;寄存器：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;%E5%AF%84%E5%AD%98%E5%99%A8.png&#34; alt=&#34;alt text&#34; /&gt;&lt;/p&gt;
&lt;p&gt;next 在左，current 在右！&lt;/p&gt;
&lt;p&gt;FSM = next state logic + output logic&lt;/p&gt;
&lt;p&gt;next state logic：用来产生下一个状态；&lt;br /&gt;
output logic：用来确定结束状态&lt;/p&gt;
&lt;p&gt;两种常见的 FSM：&lt;strong&gt;Moore FSM 和 Mealy FSM&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Moore FSM：output 取决于当前 state&lt;/li&gt;
&lt;li&gt;Mealy FSM：output 取决于当前 state 和输入&lt;br /&gt;
&lt;img data-src=&#34;%E4%B8%A4%E7%A7%8DFSM.png&#34; alt=&#34;alt text&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;3311-moore-fsm&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3311-moore-fsm&#34;&gt;#&lt;/a&gt; 3.3.1.1 Moore FSM&lt;/h5&gt;
&lt;p&gt;创建 moore FSM 的流程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;根据实际情况确定状态集合以及状态转换条件，确定状态机图&lt;/li&gt;
&lt;li&gt;根据状态机图绘制状态转换表&lt;/li&gt;
&lt;li&gt;对状态和输出进行二进制编码&lt;/li&gt;
&lt;li&gt;使用状态的编码结果来表示状态转换表重写状态转换表，可以把输入拆开，写成卡诺图的形式，用卡诺图来化简&lt;/li&gt;
&lt;li&gt;根据这个表确定 next state 的布尔表达式，使用 SOP form，最后对布尔表达式进行化简&lt;/li&gt;
&lt;li&gt;确定输出表&lt;/li&gt;
&lt;li&gt;根据这个表确定 output state 的布尔表达式，使用 SOP form，最后对布尔表达式进行化简&lt;/li&gt;
&lt;li&gt;就可以根据 next state 和 output state 的布尔表达式进行电路设计&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;上面步骤中的状态编码环节有别的方法：one-hot encoding&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对 N 个状态的编码有 N 位，其中只有一位是 1&lt;/p&gt;
&lt;p&gt;注意绘制状态机图的思想：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先假设一个初始状态，这个状态表示输入对靠近结果没有作用时进入的状态&lt;/li&gt;
&lt;li&gt;针对不同的输入，初始状态会进入什么样的等待状态&lt;/li&gt;
&lt;li&gt;等待的值是输入值，就进入输出状态，这样所有的状态就确定完成&lt;/li&gt;
&lt;li&gt;确定每个状态的不同输入会导致进入什么状态&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;3312-mealy-fsm&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3312-mealy-fsm&#34;&gt;#&lt;/a&gt; 3.3.1.2 Mealy FSM&lt;/h5&gt;
&lt;p&gt;Mealy FSM 各个输出会被标记在弧上而不是当前状态上，表明其受输入和状态的影响。&lt;/p&gt;
&lt;p&gt;创建 Mealy FSM 的步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;同样是画出状态机图&lt;/li&gt;
&lt;li&gt;确定状态转换表&lt;/li&gt;
&lt;li&gt;对状态和输出进行编码&lt;/li&gt;
&lt;li&gt;重写状态转换表，可以把输入拆开，写成卡诺图的形式，用卡诺图来化简&lt;/li&gt;
&lt;li&gt;确定 next state 和 output 的布尔表达式&lt;/li&gt;
&lt;li&gt;设计电路&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;注意绘制状态机图的思想：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先假设一个初始状态，这个状态表示输入对靠近结果没有作用时进入的状态&lt;/li&gt;
&lt;li&gt;针对不同的输入，初始状态会进入什么样的等待状态&lt;/li&gt;
&lt;li&gt;等待的值是输入值，就回到初始状态，连接的边上的输出为 1&lt;/li&gt;
&lt;li&gt;确定每个状态的不同输入会导致进入什么状态&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;332-fsm-factor-拆解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#332-fsm-factor-拆解&#34;&gt;#&lt;/a&gt; 3.3.2 FSM Factor 拆解&lt;/h4&gt;
&lt;h4 id=&#34;333-重点从一个电路推导出一个fsm逆向&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#333-重点从一个电路推导出一个fsm逆向&#34;&gt;#&lt;/a&gt; 3.3.3 重点：从一个电路推导出一个 FSM（逆向）&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;步骤：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Examine circuit, &lt;strong&gt;stating inputs&lt;/strong&gt;, &lt;strong&gt;outputs&lt;/strong&gt;, and &lt;strong&gt;state&lt;/strong&gt; bits.&lt;/li&gt;
&lt;li&gt;Write** next state and output equations**.&lt;/li&gt;
&lt;li&gt;Create &lt;strong&gt;next state and output tables&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Reduce the next state table to** eliminate unreachable&lt;br /&gt;
states**.&lt;/li&gt;
&lt;li&gt;Assign each valid state bit combination a &lt;strong&gt;name&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Rewrite&lt;/strong&gt; next state and output tables with state names.&lt;/li&gt;
&lt;li&gt;Draw state transition diagram.&lt;/li&gt;
&lt;li&gt;State in words what the FSM does.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;34-timing-of-sequential-logic&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#34-timing-of-sequential-logic&#34;&gt;#&lt;/a&gt; 3.4 Timing of Sequential Logic&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Input Timing Constraints&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Setup time 建立时间：时钟上升沿到前 data 稳定的时间&lt;/li&gt;
&lt;li&gt;Hold time 保持时间：时钟上升沿到后 data 稳定的时间&lt;/li&gt;
&lt;li&gt;Aperture time 孔径时间：setup time + hold time&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Propagation delay 传播延迟：tpcq 时钟上升沿到来后确定 data 保持稳定的时间&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Contamination delay 最小延迟：tccq 时钟上升沿到来后不稳定开始的时间&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;341-dynamic-discipline-动态约束&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#341-dynamic-discipline-动态约束&#34;&gt;#&lt;/a&gt; 3.4.1 Dynamic Discipline 动态约束&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;输入端数据在 CLK 上升沿到来时需要在孔径时间内保持稳定&lt;/li&gt;
&lt;li&gt;特殊情况下，至少在 CLK 上升沿到来前的建立时间和后的保持时间内保持稳定&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;3411-setup-time-discipline&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3411-setup-time-discipline&#34;&gt;#&lt;/a&gt; 3.4.1.1 Setup Time DIscipline&lt;/h5&gt;
&lt;p&gt;两个寄存器中间的延迟 Tc &amp;gt;= tpcq + tpq + t-setup&lt;/p&gt;
&lt;p&gt;=&amp;gt; tpd &amp;lt;= TC - tpcq - t-setup（tpd 是寄存器之间组合逻辑电路传播延迟）（Tc 是一次时钟周期）&lt;/p&gt;
&lt;p&gt;(tpcq + tsetup): sequencing overhead&lt;/p&gt;
&lt;h5 id=&#34;3412-hold-time-discipline&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3412-hold-time-discipline&#34;&gt;#&lt;/a&gt; 3.4.1.2 Hold Time Discipline&lt;/h5&gt;
&lt;p&gt;t-hold &amp;lt;tccq + tcd (tccq 是最小传播延迟，tcd 是两个寄存器之间的组合电路的最小传播延迟)&lt;br /&gt;
tcd &amp;gt; t-hold -tccq&lt;/p&gt;
&lt;h4 id=&#34;342-timing-analysis&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#342-timing-analysis&#34;&gt;#&lt;/a&gt; 3.4.2 Timing Analysis&lt;/h4&gt;
&lt;p&gt;使用上面介绍的几个不等式对时序电路进行时序分析&lt;/p&gt;
&lt;p&gt;一个时序电路的 tccq、tpcq、t-setup、t-hold、tpd、tcd 是确定的，求解建立时间约束和保持时间约束。前者计算查看 Tc 是否在约束内，后者计算查看 t-hold 是否在约束内。&lt;/p&gt;
&lt;h4 id=&#34;343-解决违反不做要求&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#343-解决违反不做要求&#34;&gt;#&lt;/a&gt; 3.4.3 解决违反（不做要求）&lt;/h4&gt;
&lt;h2 id=&#34;4-硬件描述语言&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-硬件描述语言&#34;&gt;#&lt;/a&gt; 4 硬件描述语言&lt;/h2&gt;
&lt;p&gt;主题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Combinational Logic&lt;/li&gt;
&lt;li&gt;Structural Modeling&lt;/li&gt;
&lt;li&gt;Sequential Logic&lt;/li&gt;
&lt;li&gt;More Combination Logic&lt;/li&gt;
&lt;li&gt;Finite State Machines&lt;/li&gt;
&lt;li&gt;Parameterized Modules&lt;/li&gt;
&lt;li&gt;Testbenches&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;41-systemverilog-modules&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#41-systemverilog-modules&#34;&gt;#&lt;/a&gt; 4.1 SystemVerilog Modules&lt;/h3&gt;
&lt;p&gt;模块分为两种：Behavioral（描述一个模型干什么）、Structural（描述一个模块这样从更简单的模块构成）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Behavioral Modeling&lt;/strong&gt;&lt;br /&gt;
y=a&#39;b&#39;c&#39;+ab&#39;c&#39;+ab&#39;c&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;SystemVerilog:&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;module example(input logic a,b,c, output logic y);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    assign y = ~a &amp;amp; ~b ~c | a &amp;amp; ~b &amp;amp; ~c | a &amp;amp; ~b &amp;amp; c;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;endmodule&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;module/endmodule:  required to begin/end module&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;example:  name of the module&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Operators:&lt;br /&gt;
~:  NOT&lt;br /&gt;
&amp;amp;:  AND&lt;br /&gt;
|:  OR&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;仿真与综合&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Structural Modeling - Hierarchy&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;module and3(input  logic a, b, c,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            output logic y);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  assign y = a &amp;amp; b &amp;amp; c;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;endmodule&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;module inv(input  logic a,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           output logic y);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  assign y = ~a;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;endmodule&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;module nand3(input  logic a, b, c, output logic y);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  logic n1;                   // internal signal&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  and3 andgate(a, b, c, n1);  // instance of and3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  inv  inverter(n1, y);       // instance of inv&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;endmodule&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;42-combinational-logic-组合逻辑&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#42-combinational-logic-组合逻辑&#34;&gt;#&lt;/a&gt; 4.2 Combinational Logic 组合逻辑&lt;/h3&gt;
&lt;p&gt;如何使用 HDL 编写组合逻辑的行为模型&lt;/p&gt;
&lt;h4 id=&#34;421-bitwise-operators-位运算符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#421-bitwise-operators-位运算符&#34;&gt;#&lt;/a&gt; 4.2.1 Bitwise Operators 位运算符&lt;/h4&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;module gates(input  logic [3:0]  a, b,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;             output logic [3:0] y1, y2, y3, y4, y5);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   /* Five different two-input logic &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      gates acting on 4 bit busses */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   assign y1 = a &amp;amp; b;    // AND&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   assign y2 = a | b;    // OR&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   assign y3 = a ^ b;    // XOR&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   assign y4 = ~(a &amp;amp; b); // NAND&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   assign y5 = ~(a | b); // NOR&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;endmodule&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
[N-1:0] 表示一个 N 位的 bus&lt;/p&gt;
&lt;h4 id=&#34;422-reduction-operators-缩位运算符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#422-reduction-operators-缩位运算符&#34;&gt;#&lt;/a&gt; 4.2.2 Reduction Operators 缩位运算符&lt;/h4&gt;
&lt;p&gt;表示作用在 bus 上的多输入门&lt;br /&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;module and8(input  logic [7:0] a, &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            output logic       y);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   assign y = &amp;amp;a;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   // &amp;amp;a is much easier to write than&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   // assign y = a[7] &amp;amp; a[6] &amp;amp; a[5] &amp;amp; a[4] &amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   //            a[3] &amp;amp; a[2] &amp;amp; a[1] &amp;amp; a[0];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;endmodule&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;423-条件赋值&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#423-条件赋值&#34;&gt;#&lt;/a&gt; 4.2.3 条件赋值&lt;/h4&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;module mux2(input  logic [3:0] d0, d1, &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            input  logic       s,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            output logic [3:0] y);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   assign y = s ? d1 : d0; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;endmodule&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
? :      is also called a ternary operator because it&lt;br /&gt;
operates on 3 inputs: s, d1, and d0.&lt;/p&gt;
&lt;h4 id=&#34;424-内部变量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#424-内部变量&#34;&gt;#&lt;/a&gt; 4.2.4 内部变量&lt;/h4&gt;
&lt;p&gt;可以理解为中间变量&lt;br /&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;module fulladder(input  logic a, b, cin, output logic s, cout);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  logic p, g;   // internal nodes&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  assign p = a ^ b;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  assign g = a &amp;amp; b;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  assign s = p ^ cin;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  assign cout = g | (p &amp;amp; cin);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;endmodule&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;内部变量实际上是小的逻辑电路&lt;/p&gt;
&lt;h4 id=&#34;425-precedence-优先级&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#425-precedence-优先级&#34;&gt;#&lt;/a&gt; 4.2.5 Precedence 优先级&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;%E4%BC%98%E5%85%88%E7%BA%A7.png&#34; alt=&#34;alt text&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;426-numbers&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#426-numbers&#34;&gt;#&lt;/a&gt; 4.2.6 Numbers&lt;/h4&gt;
&lt;p&gt;格式：N&#39;Bvalue&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;N = 位数&lt;/li&gt;
&lt;li&gt;B=base（几进制）&lt;/li&gt;
&lt;li&gt;Number # Bits Base Decimal&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Number&lt;/th&gt;
&lt;th&gt;bits&lt;/th&gt;
&lt;th&gt;Base&lt;/th&gt;
&lt;th&gt;Decimal&lt;/th&gt;
&lt;th&gt;Stored&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;3&#39;b101&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;binary&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;101&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&#39;d6&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;decimal&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;110&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&#39;o42&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;octal&lt;/td&gt;
&lt;td&gt;34&lt;/td&gt;
&lt;td&gt;100010&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;427-z&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#427-z&#34;&gt;#&lt;/a&gt; 4.2.7 Z&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Z：Floating Output&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;module tristate(input  logic [3:0] a, &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                input  logic       en, &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                output tri   [3:0] y);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   assign y = en ? a : 4&amp;#x27;bz;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;endmodule&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;428-bit-manipulations-位操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#428-bit-manipulations-位操作&#34;&gt;#&lt;/a&gt; 4.2.8 Bit Manipulations 位操作&lt;/h4&gt;
&lt;p&gt;常常需要在总线的子集上操作，这些操作称为位操作，也叫位混合&lt;/p&gt;
&lt;h4 id=&#34;429-delays&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#429-delays&#34;&gt;#&lt;/a&gt; 4.2.9 Delays&lt;/h4&gt;
&lt;h3 id=&#34;43-sequential-logic-时序逻辑&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#43-sequential-logic-时序逻辑&#34;&gt;#&lt;/a&gt; 4.3 Sequential Logic 时序逻辑&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;System Verilog 使用 idioms 来表述锁存器、触发器和状态机&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Always Statement&lt;/strong&gt;&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;always @(sensitivity list)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;statement;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
 无论什么时候 sensitivity list 里的事件发生时，statement 执行&lt;/p&gt;
&lt;h4 id=&#34;431-寄存器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#431-寄存器&#34;&gt;#&lt;/a&gt; 4.3.1 寄存器&lt;/h4&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;module flop(input  logic clk, input  logic [3:0] d, output logic [3:0] q);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;always_ff @(posedge clk)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;q &amp;lt;= d;                // pronounced “q gets d”&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;endmodule&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;432-resettable-寄存器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#432-resettable-寄存器&#34;&gt;#&lt;/a&gt; 4.3.2 Resettable 寄存器&lt;/h4&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;module flopr(input  logic clk, input  logic reset, input  logic [3:0] d, output logic [3:0] q);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// synchronous reset&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;always_ff @(posedge clk)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if (reset) q &amp;lt;= 4&amp;#x27;b0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    else       q &amp;lt;= d;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;endmodule&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;433-registers-with-enable&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#433-registers-with-enable&#34;&gt;#&lt;/a&gt; 4.3.3 Registers with Enable&lt;/h4&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;module flopren(input  logic clk,input  logic reset, &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;input  logic en, input  logic [3:0] d, output logic [3:0] q);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// asynchronous reset and enable &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;always_ff @(posedge clk, posedge reset)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if      (reset) q &amp;lt;= 4&amp;#x27;b0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    else if (en)    q &amp;lt;= d;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;endmodule&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;434-multiple-寄存器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#434-multiple-寄存器&#34;&gt;#&lt;/a&gt; 4.3.4 Multiple 寄存器&lt;/h4&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;module sync(input logic clk, input logic d, output logic q);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    logic n1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    always_ff @(posedge clk)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    begin&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        n1 &amp;lt;= d; // nonblocking&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        q &amp;lt;= n1; // nonblocking&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;endmodule&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;435-latches&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#435-latches&#34;&gt;#&lt;/a&gt; 4.3.5 Latches&lt;/h4&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;module latch(input  logic clk, input  logic [3:0] d, output logic [3:0] q);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;always_latch&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if (clk) q &amp;lt;= d;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;endmodule&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;44-使用always语句的组合逻辑&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#44-使用always语句的组合逻辑&#34;&gt;#&lt;/a&gt; 4.4 使用 always 语句的组合逻辑&lt;/h3&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;// combinational logic using an always statement&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;module inv(input  logic [3:0] a, &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;output logic [3:0] y);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    always_comb&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        y = ~a;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;endmodule&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当 = 号的右边的变量发生变化时，always_comb 下的语句就重新运算，always_comb 就等于 always@（*）&lt;/p&gt;
&lt;h4 id=&#34;442-case语句&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#442-case语句&#34;&gt;#&lt;/a&gt; 4.4.2 case 语句&lt;/h4&gt;
&lt;p&gt;case 语句：和别的语言用法一样&lt;br /&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;module sevenseg(input  logic [3:0] data, &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;output logic [6:0] segments);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;always_comb&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    case (data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        //                     abc_defg&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        0: segments =       7&amp;#x27;b111_1110;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        1: segments =       7&amp;#x27;b011_0000;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        2: segments =       7&amp;#x27;b110_1101;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        3: segments =       7&amp;#x27;b111_1001;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        4: segments =       7&amp;#x27;b011_0011;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        5: segments =       7&amp;#x27;b101_1011;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        6: segments =       7&amp;#x27;b101_1111;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        7: segments =       7&amp;#x27;b111_0000;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        8: segments =       7&amp;#x27;b111_1111;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        9: segments =       7&amp;#x27;b111_0011;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        default: segments = 7&amp;#x27;b000_0000; // required&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    endcase&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;endmodule&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
&lt;strong&gt; 别忘记了 endcase 语句&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;443-casez语句&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#443-casez语句&#34;&gt;#&lt;/a&gt; 4.4.3 casez 语句&lt;/h4&gt;
&lt;p&gt;看个例子就明白了&lt;br /&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;module priority_casez(input  logic [3:0] a, &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;output logic [3:0] y);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    always_comb&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    casez(a)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        4&amp;#x27;b1???: y = 4&amp;#x27;b1000;  // ? = don’t care&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        4&amp;#x27;b01??: y = 4&amp;#x27;b0100;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        4&amp;#x27;b001?: y = 4&amp;#x27;b0010;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        4&amp;#x27;b0001: y = 4&amp;#x27;b0001;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        default: y = 4&amp;#x27;b0000;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    endcase&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;endmodule&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;444-if&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#444-if&#34;&gt;#&lt;/a&gt; 4.4.4 if&lt;/h4&gt;
&lt;h3 id=&#34;45-辩blocking-nonblocking-assignment&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#45-辩blocking-nonblocking-assignment&#34;&gt;#&lt;/a&gt; 4.5 辩：Blocking =  &amp;amp; Nonblocking &amp;lt;= Assignment&lt;/h3&gt;
&lt;p&gt;在时序电路中使用非阻塞；在组合电路中使用阻塞&lt;/p&gt;
&lt;h3 id=&#34;46-信号赋值的原则&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#46-信号赋值的原则&#34;&gt;#&lt;/a&gt; 4.6 信号赋值的原则&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;时序逻辑电路使用：always_ff@(posedge clk) nonblocking assignment &amp;lt;=&lt;/li&gt;
&lt;li&gt;简单的组合逻辑电路使用 assign&lt;/li&gt;
&lt;li&gt;复杂的组合逻辑电路使用 always_comb blocking assignment =&lt;/li&gt;
&lt;li&gt;对一个信号的赋值旨在一个 always 语句或者连续赋值语句中，不要多次赋值&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;47-fsms&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#47-fsms&#34;&gt;#&lt;/a&gt; 4.7 FSMs&lt;/h3&gt;
&lt;p&gt;常见的 FSMs 代码编写规范&lt;/p&gt;
&lt;p&gt;背就完事了&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Divide by 3&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;module divideby3FSM (input  logic clk, &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;input  logic reset, &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;output logic q);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;typedef enum logic [1:0] &amp;#123;S0, S1, S2&amp;#125; statetype;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;statetype state, nextstate;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// state register&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;always_ff @ (posedge clk, posedge reset)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;if (reset) state &amp;lt;= S0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;else       state &amp;lt;= nextstate;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// next state logic&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;always_comb&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;case (state)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;S0:      nextstate = S1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;S1:      nextstate = S2;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;S2:      nextstate = S0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;default: nextstate = S0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;endcase&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// output logic&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;assign q = (state == S0);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;endmodule&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;Moore FSM&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;module patternMoore(input  logic clk, &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;input  logic reset, &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;input  logic a,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;output logic y);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;typedef enum logic [1:0] &amp;#123;S0, S1, S2&amp;#125; statetype;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;statetype state, nextstate;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// state register&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;always_ff @(posedge clk, posedge reset)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;if (reset) state &amp;lt;= S0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;else       state &amp;lt;= nextstate;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// next state logic&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;always_comb&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;case (state)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;S0: if (a) nextstate = S0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;else   nextstate = S1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;S1: if (a) nextstate = S2;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;else   nextstate = S1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;S2: if (a) nextstate = S0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;else   nextstate = S1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;default:   nextstate = S0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;endcase&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// output logic&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;assign y = (state == S2);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;endmodul&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;Mealy FSM&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;module patternMealy(input  logic clk, &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;input  logic reset, &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;input  logic a,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;output logic y);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;typedef enum logic &amp;#123;S0, S1&amp;#125; statetype;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;statetype state, nextstate;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// state register&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;always_ff @(posedge clk, posedge reset)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;if (reset) state &amp;lt;= S0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;else       state &amp;lt;= nextstate;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// next state logic&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;always_comb&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;case (state)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;S0: if (a) nextstate = S0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;else   nextstate = S1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;S1: if (a) nextstate = S0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;else   nextstate = S1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;default:   nextstate = S0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;endcase&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// output logic&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;assign y = (a &amp;amp; state == S1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;endmodule&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;48-parameterized-modules-参数化的&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#48-parameterized-modules-参数化的&#34;&gt;#&lt;/a&gt; 4.8 Parameterized Modules 参数化的&lt;/h3&gt;
&lt;p&gt;2：1 MUX&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;module mux2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    #(parameter width = 8)  // name and default value&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    (input  logic [width-1:0] d0, d1, &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        input  logic             s,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        output logic [width-1:0] y);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    assign y = s ? d1 : d0; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;endmodule&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;49-test-bench-测试程序&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#49-test-bench-测试程序&#34;&gt;#&lt;/a&gt; 4.9 Test Bench 测试程序&lt;/h3&gt;
&lt;p&gt;测试程序是用于测试其他模块（device under test 被测设备）的硬件描述程序&lt;/p&gt;
&lt;p&gt;有三种类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;simple&lt;/li&gt;
&lt;li&gt;self-checking&lt;/li&gt;
&lt;li&gt;self-checking with testvector&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;举个例子&lt;br /&gt;
编写下面描述语言的三种测试程序&lt;br /&gt;
 &lt;code&gt;y==b&#39;c&#39;+ab&#39;&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;simple&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;module testbench1();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    logic a, b, c;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    logic y;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // instantiate device under test&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sillyfunction dut(a, b, c, y);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // apply inputs one at a time&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    initial begin&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        a = 0; b = 0; c = 0; #10;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        c = 1; #10;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        b = 1; c = 0; #10;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        c = 1; #10;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        a = 1; b = 0; c = 0; #10;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        c = 1; #10;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        b = 1; c = 0; #10;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        c = 1; #10;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;endmodule&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;self-checking&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;module testbench2();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    logic  a, b, c, y;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // instantiate device under test&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sillyfunction dut(a, b, c, y);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // apply inputs one at a time&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // checking results&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    initial begin&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        a = 0; b = 0; c = 0; #10;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assert (y === 1) else $error(&amp;quot;000 failed.&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        c = 1; #10;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assert (y === 0) else $error(&amp;quot;001 failed.&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        b = 1; c = 0; #10;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assert (y === 0) else $error(&amp;quot;010 failed.&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        c = 1; #10;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assert (y === 0) else $error(&amp;quot;011 failed.&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        a = 1; b = 0; c = 0; #10;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assert (y === 1) else $error(&amp;quot;100 failed.&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        c = 1; #10;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assert (y === 1) else $error(&amp;quot;101 failed.&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        b = 1; c = 0; #10;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assert (y === 0) else $error(&amp;quot;110 failed.&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        c = 1; #10;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assert (y === 0) else $error(&amp;quot;111 failed.&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;endmodul&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;self-checking with testvector&lt;br /&gt;
testvector: 期待的输入输出模式&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;就是将程序运行的结果和 testvector 文件的内容进行比对&lt;/p&gt;
&lt;p&gt;步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Generate clock for assigning inputs, reading outputs&lt;/li&gt;
&lt;li&gt;Read testvectors file into array&lt;/li&gt;
&lt;li&gt;Assign inputs, expected outputs&lt;/li&gt;
&lt;li&gt;Compare outputs with expected outputs and report&lt;br /&gt;
errors&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;什么是测试程序 clock&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;assign inputs（上升沿）&lt;/li&gt;
&lt;li&gt;比较输出（下降沿）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体代码：&lt;/p&gt;
&lt;p&gt;(1) generate clock&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;module testbench3();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    logic        clk, reset;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    logic        a, b, c, yexpected;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    logic        y;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    logic [31:0] vectornum, errors;    // bookkeeping variables&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    logic [3:0]  testvectors[10000:0]; // array of testvectors&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // instantiate device under test&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sillyfunction dut(a, b, c, y);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // generate clock&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    always     // no sensitivity list, so it always executes&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        begin&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        clk = 1; #5; clk = 0; #5;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;(2) 把 testvectors 读入 array&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;// at start of test, load vectors and pulse reset&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;initial&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    begin&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        $readmemb(&amp;quot;example.tv&amp;quot;, testvectors);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        vectornum = 0; errors = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        reset = 1; #27; reset = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// Note: $readmemh reads testvector files written in&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// hexadecimal&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;(3) 赋值&lt;br /&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt; // apply test vectors on rising edge of clk&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;always @(posedge clk)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    begin&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        #1; &amp;#123;a, b, c, yexpected&amp;#125; = testvectors[vectornum];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;(4) 比较，在下降沿&lt;br /&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;// check results on falling edge of clk&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    always @(negedge clk)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if (~reset) begin // skip during reset&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if (y !== yexpected) begin  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            $display(&amp;quot;Error: inputs = %b&amp;quot;, &amp;#123;a, b, c&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            $display(&amp;quot;  outputs = %b (%b expected)&amp;quot;,y,yexpected);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        errors = errors + 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// Note: to print in hexadecimal, use %h. For example,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//       $display(“Error: inputs = %h”, &amp;#123;a, b, c&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// increment array index and read next testvector&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        vectornum = vectornum + 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if (testvectors[vectornum] === 4&amp;#x27;bx) begin &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            $display(&amp;quot;%d tests completed with %d errors&amp;quot;, &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            vectornum, errors);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            $finish;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        end&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;endmodule&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// === and !== can compare values that are 1, 0, x, or z.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;5-算数单元&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-算数单元&#34;&gt;#&lt;/a&gt; 5 算数单元&lt;/h2&gt;
&lt;h3 id=&#34;51-加法器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#51-加法器&#34;&gt;#&lt;/a&gt; 5.1 加法器&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Carry-lookahead 先行进位加法器&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;G = AB&lt;/li&gt;
&lt;li&gt;P = A+B&lt;/li&gt;
&lt;li&gt;Ci = Gi+PiCi-1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以替换 Ci-1 成含 C0 的表达式，这样就能在 C0 输入的时候，等待全部的 G P 表达式生成时得到 Ci。&lt;br /&gt;
&lt;img data-src=&#34;CL%E5%8A%A0%E6%B3%95%E5%99%A8.png&#34; alt=&#34;alt text&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;CL%E5%8A%A0%E6%B3%95%E5%99%A8%E7%94%B5%E8%B7%AF%E5%9B%BE.png&#34; alt=&#34;alt text&#34; /&gt;&lt;/p&gt;
&lt;p&gt;计算延迟&lt;br /&gt;
&lt;img data-src=&#34;CL%E5%8A%A0%E6%B3%95%E5%99%A8%E5%BB%B6%E8%BF%9F.png&#34; alt=&#34;alt text&#34; /&gt;&lt;/p&gt;
&lt;p&gt;记住 4bits 的 CL 加法器各个 t 的计算方法。tand_or = 2*tFA&lt;/p&gt;
&lt;h3 id=&#34;52-比较器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#52-比较器&#34;&gt;#&lt;/a&gt; 5.2 比较器&lt;/h3&gt;
&lt;p&gt;使用异或门和与门&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;=%E6%AF%94%E8%BE%83%E5%99%A8.png&#34; alt=&#34;alt text&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;%E5%B0%8F%E4%BA%8E%E6%AF%94%E8%BE%83%E5%99%A8.png&#34; alt=&#34;alt text&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;53-位移器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#53-位移器&#34;&gt;#&lt;/a&gt; 5.3 位移器&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;逻辑位移&lt;/li&gt;
&lt;li&gt;算数位移&lt;/li&gt;
&lt;li&gt;Rotator：轮转，ROR 就是把右边的推出再从左边推入；ROL 则相反&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;算数左移 N 位 = X 2 的 N 次方；算数右移 N 位 =/ 2 的 N 次方；&lt;/p&gt;
&lt;h3 id=&#34;54-算数逻辑单元alu&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#54-算数逻辑单元alu&#34;&gt;#&lt;/a&gt; 5.4 算数逻辑单元 ALU&lt;/h3&gt;
&lt;h3 id=&#34;55-number-systems&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#55-number-systems&#34;&gt;#&lt;/a&gt; 5.5 Number Systems&lt;/h3&gt;
&lt;p&gt;用源码表示正数，用补码或反码表示某个正数的负数。&lt;/p&gt;
&lt;p&gt;如何表示小数呢？&lt;/p&gt;
&lt;p&gt;小数可以分为两种：有限位小数和无限位小数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有限位小数：用点来区分整数部分和小数部分&lt;/li&gt;
&lt;li&gt;浮点数：如何用 IEEE 格式表示浮点数可以看计组的笔记&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;56-计数器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#56-计数器&#34;&gt;#&lt;/a&gt; 5.6 计数器&lt;/h3&gt;
&lt;h3 id=&#34;57-移动寄存器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#57-移动寄存器&#34;&gt;#&lt;/a&gt; 5.7 移动寄存器&lt;/h3&gt;
&lt;p&gt;每个时钟上升沿移动进入一位，出去一位&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;带有 Load 的移动寄存器&lt;/strong&gt;&lt;br /&gt;
当 Load = 1 时，就是普通的寄存器；&lt;br /&gt;
当 Load = 0 时，是移动寄存器&lt;/p&gt;
&lt;h3 id=&#34;58-memory-arrays&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#58-memory-arrays&#34;&gt;#&lt;/a&gt; 5.8 Memory Arrays&lt;/h3&gt;
&lt;p&gt;可以高效的储存大量的数据，有三种类别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DRAM&lt;/li&gt;
&lt;li&gt;SRAM&lt;/li&gt;
&lt;li&gt;ROM&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;考点：ROM：PROM 可编程的只读存储器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有多少个式子就有多少位 data 输出，每条 data 输出对应一个式子。&lt;br /&gt;
把逻辑表达式的真值表写出来，在输出为 1 的情况下把交点描黑。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;PROM.png&#34; alt=&#34;alt text&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;59-logic-arrays&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#59-logic-arrays&#34;&gt;#&lt;/a&gt; 5.9 Logic Arrays&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;PLAs（可编程的逻辑数组）
&lt;ul&gt;
&lt;li&gt;AND array followed by OR array&lt;/li&gt;
&lt;li&gt;Combinational logic only&lt;/li&gt;
&lt;li&gt;Fixed internal connections&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;PLAs.png&#34; alt=&#34;alt text&#34; /&gt;&lt;br /&gt;
 画法很简单，看图即可&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FPGA Field programmable gate arrays
&lt;ul&gt;
&lt;li&gt;Array of Logic Elements (LEs)&lt;/li&gt;
&lt;li&gt;Combinational and sequential logic&lt;/li&gt;
&lt;li&gt;Programmable internal connections&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由 LEs（perform logic）、IOEs（Input/Output elements，外界接口）和 Programmable interconnection（连接 LEs 和 IOEs）&lt;/p&gt;
</content>
        <updated>2024-06-12T08:29:44.000Z</updated>
    </entry>
    <entry>
        <id>http://smallcjy.github.io/2024/06/07/%E8%AE%A1%E7%BD%91--%E4%BC%A0%E8%BE%93%E5%B1%82%E9%87%8D%E7%82%B9%E5%A4%8D%E4%B9%A0/</id>
        <title>计网--传输层重点复习</title>
        <link rel="alternate" href="http://smallcjy.github.io/2024/06/07/%E8%AE%A1%E7%BD%91--%E4%BC%A0%E8%BE%93%E5%B1%82%E9%87%8D%E7%82%B9%E5%A4%8D%E4%B9%A0/"/>
        <content type="html">&lt;h2 id=&#34;tcp传输协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp传输协议&#34;&gt;#&lt;/a&gt; TCP 传输协议&lt;/h2&gt;
&lt;h3 id=&#34;tcp-socket&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp-socket&#34;&gt;#&lt;/a&gt; TCP socket&lt;/h3&gt;
&lt;p 源ip地址、源端口号、目标ip地址、目标端口号=&#34;&#34;&gt;TCP socket 表示使用四元组:&lt;/p&gt;
&lt;h3 id=&#34;tcp-connection&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp-connection&#34;&gt;#&lt;/a&gt; TCP Connection&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;connect-oriented：面向连接，相互发送预备报文段，以确保数据传输的参数。&lt;/li&gt;
&lt;li&gt;full-duplex service：全双工服务，如果一台主机上的进程 A 与另一台主机上的进程 B 存在一条 TCP 连接，那么应用层的数据就可以在进程 B 流向进程 A 的同时，也从进程 A 流向进程 B；&lt;/li&gt;
&lt;li&gt;point-to-point：单个接收方之间的链接&lt;/li&gt;
&lt;li&gt;three-way handshake：三次握手，&lt;strong&gt;客户端先发送一个特殊的 TCP 报文，服务器用另一个特殊的报文来响应，最后客户再用第三个特殊报文来作为响应。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;客户进程通过使用 socket 套接字来将要发送的数据写入 send buffer，os 会把 send buffer 里的数据包装成 ip datagram，在由链路层打包成 frame 发送出去，目标服务器接受到后逐层拆解后把数据写入 TCP receive buffer ，再由 Socket 来读取数据。&lt;/p&gt;
&lt;p&gt;TCP 可以从 buffer 中取出放入的 segment 中的数据最大的数量限制于 MSS（最大报文段长度）, 而 MSS 则由 MTU（链路层的最大传输单元）决定。&lt;/p&gt;
&lt;h3 id=&#34;tcp-segment-structure-报文段结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp-segment-structure-报文段结构&#34;&gt;#&lt;/a&gt; TCP segment structure 报文段结构&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;images/segment.png&#34; alt=&#34;alt txt&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;重点结构成员：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sequence Number：32bit 的序号字段&lt;/li&gt;
&lt;li&gt;Acknowledge Number：32bit 的确认号字段&lt;/li&gt;
&lt;li&gt;Receive Windows：16bit 的接受窗字段，用于控制流量&lt;/li&gt;
&lt;li&gt;Header Length: 4bit 的 header 长度字段，用于指示以 32bit 为单位的 TCP 的头部的长度。&lt;/li&gt;
&lt;li&gt;Option: 动态调节&lt;/li&gt;
&lt;li&gt;6bit 的标志字段（flag field）：
&lt;ul&gt;
&lt;li&gt;ACK：确认字段中的值是否有效；&lt;/li&gt;
&lt;li&gt;RST、SYN、FIN：用于连接建立和拆除；&lt;/li&gt;
&lt;li&gt;CWR、ECE：在明确拥塞通过中使用&lt;/li&gt;
&lt;li&gt;PSH：被置位时，指示接收方立即将数据交给上层；&lt;/li&gt;
&lt;li&gt;URG：指示 segment 中存放着被发送端上层实体设置为 “紧急” 的数据；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Urgent Data Point: 16bit 的紧急数据指针字段，指出紧急数据的最后一个字节；&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;segment-number-and-acknowledgement-number&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#segment-number-and-acknowledgement-number&#34;&gt;#&lt;/a&gt; segment number and acknowledgement number&lt;/h4&gt;
&lt;p&gt;报文段的序号是该报文段首字节（data）的字节流编号，而不是建立在传送的报文段的序列上。&lt;/p&gt;
&lt;p&gt;什么是字节流编号呢？&lt;/p&gt;
&lt;p&gt;假设现在 A 主机要发送一串 50000 字节的 data 到 B 主机，但是 MSS 为 1000 字节，所以这个数据就需要拆解为 50 个 size 为 1000 字节的 segment 来多次发送，这 50000 字节流会被编号，0~49999，所以第一个 segment 的第一个字节的字节流编号就是 0，第二个 segment 的第一个字节流编号就是 1000，依次类推。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;主机 A 填充进报文段的确认号是主机 A 希望从主机 B 接收到的下一个字节的字节流序号！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;由于网络中 TCP 的传输是不确定的，所以被拆分成多个 TCP 的数据不可能按原先的顺序被接收方接收，所以需要 segment number 在确定子数据包的顺序。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;但是光有 segment number 是不够的， 因为在网络中不仅有发送方，还有接收方也会发送，TCP 是全双工的。所以需要确认号。这样就能保证双方接收的 data 都能按照正常的顺序进行排列&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;必考重点rdt可靠的数据传输&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#必考重点rdt可靠的数据传输&#34;&gt;#&lt;/a&gt; 必考重点：RDT 可靠的数据传输&lt;/h4&gt;
&lt;p&gt;先来看一段 TCP 发送的代码&lt;br /&gt;
 &lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* Assume sender is not constrained by TCP flow or congestion control, that data from above is less than MSS in size, and that data transfer is in one direction only. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;NextSeqNum=InitialSeqNumber&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;SendBase=InitialSeqNumber&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;loop (forever) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;switch&lt;/span&gt;(event)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        event: data received from application above&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            create TCP segment with sequence number NextSeqNum&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (timer currently not running)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            	start timer&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            pass segment to IP&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            NextSeqNum=NextSeqNum+length(data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        event: timer timeout&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            retransmit not-yet-acknowledged segment with smallest sequence number&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            start timer&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        event: ACK received, with ACK field value of y&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;(y &amp;gt; SendBase)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                SendBase=y&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (there are currently any not-yet-acknowledged segments)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                	start timer&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    		&lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;span class=&#34;comment&#34;&gt;/* end of loop forever */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;设置一个循环监听事件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当从上层应用接收到数据时：&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;创建一个 TCP 数据段，序列号为 NextSeqNum。&lt;/li&gt;
&lt;li&gt;如果定时器未启动，则启动定时器。&lt;/li&gt;
&lt;li&gt;将数据段传递给 IP 层进行发送。&lt;/li&gt;
&lt;li&gt;更新 NextSeqNum 为 NextSeqNum + length (data)，表示下一个将要发送的数据段的序列号。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;当定时器超时时：&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;重传尚未确认的最小序列号的数据段（最早发送但未被确认的数据段）。&lt;/li&gt;
&lt;li&gt;重启定时器。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;当接收到 ACK 时：&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;检查 ACK 字段的值 y 是否大于 SendBase。&lt;/li&gt;
&lt;li&gt;如果 y 大于 SendBase，则更新 SendBase 为 y，表示所有序列号小于 y 的数据段都已经被确认。&lt;/li&gt;
&lt;li&gt;如果仍然有未被确认的数据段，则重启定时器。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;超时间隔加倍&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当发生超时事件时，TCP 重传时都会将下一次的超时间隔设为先前值的两倍；当发生其他两个事件计时器重启时，TimeoutInterval 由最近的 EstimatedRTT 值与 DevRTT 值推算得到。这种修改提供了一个形式受限的拥塞控制。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;快速重传&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;duplicate ACK：对一个已经发送过的 segment 进行再次的确认，重发一次 ack&lt;/p&gt;
&lt;p&gt;当比期望 segment number 的失序报文段（就是发送的 segment number 和上一个 ACK 不一致）到达时，接收方立刻发送冗余 ACK（duplicate ACK），指示下一个期望字节的序号。如果 TCP 发送方接收到对相同数据的&lt;strong&gt;三个&lt;/strong&gt; duplicate ACK TCP 就执行快速重传，即在报文段的定时器&lt;strong&gt;过期之前&lt;/strong&gt;重传丢失的报文段，&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;选择确认 selective acknowledgement&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;接收端非常容易接收到 out-of-order 的 segments，那还能用当前接收到的最小 ack 作为 sendbase 吗&lt;/p&gt;
&lt;p&gt;所以就需要选择确认：允许 TCP 接收端有选择的确认那些失序的报文段而不是收到什么确认什么，不是积累地确认最后一个正确接收的有序报文。&lt;/p&gt;
&lt;p&gt;如何确定当前主机应该发送的 ACK 的值？&lt;/p&gt;
&lt;p&gt;有以下几个原则：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;累积原则：ACK 如果为 n，则表示主机确认接收到 0~n-1 的序号的 segment，所以 ACK 可以是最小的未确认 segment 序号；&lt;/li&gt;
&lt;li&gt;期望下一个发送：ACK 被主机视为希望下一个发送的 segment，在一些简单的 TCP 发送程序，ACK 赋值给 sendBase，用来确定每次定时器到期时第一个发送的 segment；&lt;/li&gt;
&lt;li&gt;丢包和延迟：仍然发送上一个 ACK，被称为 duplicate ACK，发送超过三次触发快速重传。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;流量控制-flow-control&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#流量控制-flow-control&#34;&gt;#&lt;/a&gt; 流量控制 Flow Control&lt;/h4&gt;
&lt;p&gt;发送端需要维护一个 receive window 来控制流量。receive window 用于给发送者一个指示，该接收方还有多少可用的缓存空间。因为 TCP 是全双工通信（发送端同时也是接收端，接收端同时也是发送端），所以 link 两端的 sender 都需要维护一个 receive window。&lt;/p&gt;
&lt;p&gt;RcvBuffer：接收缓存的总大小&lt;br /&gt;
 rwnd：可用的接收缓存的大小&lt;/p&gt;
&lt;h4 id=&#34;tcp-connect-management&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp-connect-management&#34;&gt;#&lt;/a&gt; TCP Connect Management&lt;/h4&gt;
&lt;h5 id=&#34;三次握手连接-three-way-handshake&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三次握手连接-three-way-handshake&#34;&gt;#&lt;/a&gt; 三次握手连接 three-way handshake&lt;/h5&gt;
&lt;p&gt;&lt;img data-src=&#34;%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.png&#34; alt=&#34;alt text&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;四次握手关闭-four-way-handshake&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#四次握手关闭-four-way-handshake&#34;&gt;#&lt;/a&gt; 四次握手关闭 four-way handshake&lt;/h5&gt;
&lt;p&gt;&lt;img data-src=&#34;%E5%9B%9B%E6%AC%A1%E6%8F%A1%E6%89%8B.png&#34; alt=&#34;alt text&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;tcp-state&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp-state&#34;&gt;#&lt;/a&gt; TCP State&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;客户端 TCP 经典状态&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;客户端应用初始化一个 TCP 连接，发动 SYN&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SYN_SENT： Receive SYN &amp;amp; ACK，send ACK&lt;/li&gt;
&lt;li&gt;ESTABLISHED：Send FIN&lt;br /&gt;
Client application initiates close connect&lt;/li&gt;
&lt;li&gt;FIN_WAIT_1：Receive ACK， send nothing&lt;/li&gt;
&lt;li&gt;FIN_WAIT_2：Receive FIN，send ACK&lt;/li&gt;
&lt;li&gt;TIME_WAIT：wait 30 seconds&lt;/li&gt;
&lt;li&gt;CLOSED&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;服务端经典状态&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Server application creates a listen socket&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LiSTEN: Receive SYN, send SYN &amp;amp; ACK&lt;/li&gt;
&lt;li&gt;SYN_RCVD: Receive ACK,  send nothing&lt;/li&gt;
&lt;li&gt;ESTABLISHED: Receive FIN, send ACK&lt;/li&gt;
&lt;li&gt;CLOSE_WAIT: Send FIN&lt;/li&gt;
&lt;li&gt;LAST_ACK: Receive ACK, send nothing&lt;/li&gt;
&lt;li&gt;CLOSED&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;多路复用与多路分解multiplexing-and-demultiplexing&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多路复用与多路分解multiplexing-and-demultiplexing&#34;&gt;#&lt;/a&gt; 多路复用与多路分解（Multiplexing and Demultiplexing）&lt;/h4&gt;
&lt;p&gt;运输层的多路复用与多路分解，就是多主机上的进程之间（A 主机的进程 1 与 B 主机的进程 2）的运输服务。一个进程有一个或多个套接字（socket），它相当于从网络向进程传递数据和从进程向网络传递数据的门户。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Multiplexing：在源主机从不同 socket 中收集 data blocks，并为每个 data block 封装首部信息（header）从而生成 segment，然后把 segment 传递到网络层；&lt;/li&gt;
&lt;li&gt;Demultiplexing：在接收端，运输层会检查这些字段，标识处接收 socket，进而将 segment 定向到该 socket，即把运输层 segment 的 data 交付给正确的 socket（进程与网络的门户，也就是设备的端口）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;multiplexing 要求：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;socket 有唯一的标识符&lt;/li&gt;
&lt;li&gt;segment 的 header 中有用来指示交付给的 socket 的特殊字段&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这些特殊字段就是源端口号字段和目的端口号字段&lt;/p&gt;
&lt;h4 id=&#34;必考重点tcp的拥塞控制-principles-of-congestion-control&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#必考重点tcp的拥塞控制-principles-of-congestion-control&#34;&gt;#&lt;/a&gt; 必考重点：TCP 的拥塞控制 Principles of Congestion Control&lt;/h4&gt;
&lt;h5 id=&#34;拥塞原因和代价&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#拥塞原因和代价&#34;&gt;#&lt;/a&gt; 拥塞原因和代价&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;当分组的到达速率接近链路容量时，分组经历巨大的排队时延；&lt;/li&gt;
&lt;li&gt;发送方在遇到大时延时所进行的不必要重传会引起路由器利用其链路带宽来转发不必要的分组副本；&lt;/li&gt;
&lt;li&gt;当一个分组沿一条路径被丢弃时，每个上游路由器用于转发该分组到丢弃该分组而使用的传输容量最终被浪费掉；&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;拥塞控制方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#拥塞控制方法&#34;&gt;#&lt;/a&gt; 拥塞控制方法&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;end-to-end congestion control&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;TCP segment 丢失意味着 网络拥塞，TCP 会减低窗口大小（cwnd、rwnd）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;network-assisted congestion control&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;网络层中的路由器会返回关于链路是否发生 congest 的信息给主机。下面会详细介绍一个网络辅助拥塞控制算法的应用。&lt;/p&gt;
&lt;h4 id=&#34;重点来叻tcp拥塞控制-congestion-control&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#重点来叻tcp拥塞控制-congestion-control&#34;&gt;#&lt;/a&gt; 重点来叻：TCP 拥塞控制 Congestion Control&lt;/h4&gt;
&lt;p&gt;运行在发送方的 TCP 拥塞控制机制跟踪一个额外的变量，即 congestion window（cwnd）。它规定了一个 TCP 发送方能向网络中发送流量的最大速率，用来限制主机发送流量，如果主机知道自己和目的地之间存在 congest，会降低发送的 rate&lt;/p&gt;
&lt;p&gt;发送方未确认的数据量不会超过 cwnd 和 rwnd 的最小值。&lt;/p&gt;
&lt;p&gt;cwnd 是动态变化的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个丢失的报文段表意味着拥塞，因此当丢失报文段时应当降低 TCP 发送方的速率；&lt;/li&gt;
&lt;li&gt;一个确认报文段指示该网络正在向接收方交付发送方的报文段，因此，当对先前未确认报文段的确认到达时，能够增加发送方的速率；&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;tcp拥塞控制算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp拥塞控制算法&#34;&gt;#&lt;/a&gt; TCP 拥塞控制算法&lt;/h5&gt;
&lt;p&gt;算法包括三个部分：&lt;strong&gt;slow-start、congestion avoidance、fast recovery&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;slow-start：&lt;br /&gt;
在慢启动状态下，cwnd 的值以 1 个 MSS 开始并且每当传输的 segment 首次被确认就增加 1 个 MSS。&lt;/li&gt;
&lt;li&gt;如果存在一个由超时指示的丢包事件，TCP 发送方将 cwnd 设置为 1 并重新开始慢启动过程。它还将第二状态变量 ssthresh（慢启动阈值）设置为 cwnd/2&lt;/li&gt;
&lt;li&gt;一旦进入拥塞避免状态，cwnd 的值大约是上次遇到拥塞时的值的一半，即距离拥塞可能并不遥远；在任意状态冗余 ACK 达到 3 个就会进入快速恢复状态的缺失报文段。&lt;br /&gt;
&lt;img data-src=&#34;%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2%E6%9C%BA.png&#34; alt=&#34;alt text&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="计算机网络" scheme="http://smallcjy.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/" />
        <updated>2024-06-07T02:48:31.000Z</updated>
    </entry>
    <entry>
        <id>http://smallcjy.github.io/2024/06/04/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F--%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1%E4%B8%8E%E8%B0%83%E5%BA%A6/</id>
        <title>操作系统--进程通信与调度</title>
        <link rel="alternate" href="http://smallcjy.github.io/2024/06/04/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F--%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1%E4%B8%8E%E8%B0%83%E5%BA%A6/"/>
        <content type="html">&lt;h2 id=&#34;1-进程process&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-进程process&#34;&gt;#&lt;/a&gt; 1 进程 Process&lt;/h2&gt;
&lt;p&gt;如何定义 process：（process 的几个定义特点）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Sequence Execution 程序的顺序执行：一个有独立功能的程序独占处理器直至最终结束的过程&lt;/li&gt;
&lt;li&gt;Concurrency Execution：并发执行，进程具有并发性，多个进程互不干扰，同时运行。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;The Process Model&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Multiprogramming of four programs（one PC）&lt;/li&gt;
&lt;li&gt;Conceptual model of 4 independent，sequential  processes&lt;/li&gt;
&lt;li&gt;Only one program active at any instant&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Process Concept&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;进程：一个具有一定独立功能的程序关于某个数据集合的一次活动。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;进程和程序之间的区别：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;程序是命令的集合，是一个静态的概念；进程可以描述并发的过程，是一个动态的概念。&lt;/li&gt;
&lt;li&gt;进程包含程序，数据，pcb（进程控制块）&lt;/li&gt;
&lt;li&gt;进程是暂时的，有关闭的时刻；程序是永久的，一旦写好就一直存在。&lt;/li&gt;
&lt;li&gt;一个程序可以调用多个进程来运行各个部分；一个进程可以运行多个程序；&lt;/li&gt;
&lt;li&gt;进程也可以创造其他的进程；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;何时创建进程&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;系统初始化时：创建两种进程：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Foreground Process：与用户交互提供服务&lt;/li&gt;
&lt;li&gt;Background Process：处理用户调用的调用，又称为 daemon（守护进程）&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;fork（）系统调用&lt;/li&gt;
&lt;li&gt;用户请求&lt;/li&gt;
&lt;li&gt;Initiation of a batch job&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;11何时终止进程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#11何时终止进程&#34;&gt;#&lt;/a&gt; 1.1&lt;strong&gt; 何时终止进程&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;终止进程的条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Normal exit&lt;/li&gt;
&lt;li&gt;Error exit&lt;/li&gt;
&lt;li&gt;Fatal error&lt;/li&gt;
&lt;li&gt;Killed by another process&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;12进程层次&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#12进程层次&#34;&gt;#&lt;/a&gt; 1.2&lt;strong&gt; 进程层次&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;父进程、子进程形成的层级结构；&lt;strong&gt;window 没有进程的层次结构的概念&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;13进程状态&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#13进程状态&#34;&gt;#&lt;/a&gt; 1.3&lt;strong&gt; 进程状态&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Running&lt;/li&gt;
&lt;li&gt;Ready&lt;/li&gt;
&lt;li&gt;Blocked&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;进程状态之间的相互转换：&lt;/p&gt;
&lt;p&gt;Process blocks for input ：running -&amp;gt; blocked&lt;br /&gt;
Scheduler picks another process: running -&amp;gt; ready&lt;br /&gt;
Scheduler picks this process: ready -&amp;gt; running&lt;br /&gt;
Input becomes available: blocked -&amp;gt; running&lt;/p&gt;
&lt;h3 id=&#34;14进程实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#14进程实现&#34;&gt;#&lt;/a&gt; 1.4&lt;strong&gt; 进程实现&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;先考虑一个进程由什么组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;User program&lt;/li&gt;
&lt;li&gt;User data&lt;/li&gt;
&lt;li&gt;stack 变量储存的地方&lt;/li&gt;
&lt;li&gt;PCB&lt;/li&gt;
&lt;li&gt;Process Context
&lt;ul&gt;
&lt;li&gt;对整个执行进程的最基本的描述&lt;/li&gt;
&lt;li&gt;分为：User Context、Register Context、System Context&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Context Switch （CPU 的进程切换，也就是进程调度）
&lt;ul&gt;
&lt;li&gt;由系统的 schedule 来执行&lt;/li&gt;
&lt;li&gt;保存旧进程的 pcb，加载新进程的 pcb&lt;/li&gt;
&lt;li&gt;刷新 memory cache&lt;/li&gt;
&lt;li&gt;转换虚拟内存映射（memory mapping）&lt;/li&gt;
&lt;li&gt;进程的切换是非常 cost 的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PCB Table
&lt;ul&gt;
&lt;li&gt;OS 维护的进程表，每一项就是该进程的 pcb&lt;/li&gt;
&lt;li&gt;PCB table 的大小可以衡量系统的并发性&lt;/li&gt;
&lt;li&gt;两种组织形式：Link、Index&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-线程-thread&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-线程-thread&#34;&gt;#&lt;/a&gt; 2 线程 Thread&lt;/h2&gt;
&lt;h3 id=&#34;21-thread-concept&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#21-thread-concept&#34;&gt;#&lt;/a&gt; 2.1 Thread concept&lt;/h3&gt;
&lt;p&gt;线程可以理解为进程的进程。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原进程 PCB 的内容分成两部分：
&lt;ul&gt;
&lt;li&gt;描述进程资源和空间的部分；&lt;/li&gt;
&lt;li&gt;描述执行现场、状态及调度的部分。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;将第二部分内容作为线程控制块&lt;strong&gt; TCB&lt;/strong&gt; 的内容，且一个进程内允许多个&lt;br /&gt;
线程存在。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新进程描述为：
&lt;ul&gt;
&lt;li&gt;一个独立的进程空间，可装入进程映像；&lt;/li&gt;
&lt;li&gt;一个独立的进程相关联的执行文件；&lt;/li&gt;
&lt;li&gt;进程所用的系统资源；&lt;/li&gt;
&lt;li&gt;一个或多个线程。（进程在创建时一般同时创建好第一个线程，&lt;br /&gt;
其他线程按需要由用户程序请求创建）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;线程不拥有系统资源，这是线程与进程不一样的地方，线程只需要保证其运行的基本数据结构：TCB，pc，a register set and a stack，它与该进程的其他线程共享该进程中的资源&lt;/p&gt;
&lt;h3 id=&#34;22-重点进程和线程的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#22-重点进程和线程的区别&#34;&gt;#&lt;/a&gt; 2.2 重点：进程和线程的区别&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;进程是资源分配的基本单位，所有与该进程有关的资源分&lt;br /&gt;
配情况，如打印机、I/O 缓冲队列等，均记录在进程控制块&lt;br /&gt;
 PCB 中，进程也是分配主存的基本单位，它拥有一个完整&lt;br /&gt;
的虚拟地址空间。而线程与资源分配无关，它属于某一个&lt;br /&gt;
进程，并与该进程内的其它线程一起共享进程的资源。&lt;/li&gt;
&lt;li&gt;不同的进程拥有不同的虚拟地址空间，而同一进程中的多&lt;br /&gt;
个线程共享同一地址空间。&lt;/li&gt;
&lt;li&gt;进程调度的切换将涉及到有关资源指针的保存及进程地址&lt;br /&gt;
空间的转换等问题。而线程的切换将不涉及资源指针的保&lt;br /&gt;
存和地址空间的变化。所以，线程切换的开销要比进程切&lt;br /&gt;
换的开销小得多。&lt;/li&gt;
&lt;li&gt;进程的调度与切换都是由操作系统内核完成，而线程则&lt;br /&gt;
既可由操作系统内核完成，也可由用户程序进行。&lt;/li&gt;
&lt;li&gt;进程可以动态创建进程。被进程创建的线程也可以创建&lt;br /&gt;
其它线程。&lt;/li&gt;
&lt;li&gt;进程有创建、执行、消亡的生命周期。线程也有类似的&lt;br /&gt;
生命周期。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;23-thread-advantage&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#23-thread-advantage&#34;&gt;#&lt;/a&gt; 2.3 Thread Advantage&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;线程的创造，切换，结束的开销小&lt;/li&gt;
&lt;li&gt;线程通信非常简单，因为共享资源，公用一块虚拟内存&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;24-thread-usage&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#24-thread-usage&#34;&gt;#&lt;/a&gt; 2.4 Thread Usage&lt;/h3&gt;
&lt;p&gt;为什么要使用 thread 呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;响应性：多个活动同时进行&lt;/li&gt;
&lt;li&gt;资源共享&lt;/li&gt;
&lt;li&gt;开销小：创造和销毁的开销小&lt;/li&gt;
&lt;li&gt;在多处理器结构的系统中非常好用&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;25-thread的实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#25-thread的实现&#34;&gt;#&lt;/a&gt; 2.5 Thread 的实现&lt;/h3&gt;
&lt;p&gt;三种架构&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户空间&lt;/li&gt;
&lt;li&gt;内核空间&lt;/li&gt;
&lt;li&gt;两者混合&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;251-user-threads&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#251-user-threads&#34;&gt;#&lt;/a&gt; 2.5.1 User Threads&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;线程打包在用户态，内核完全不知道线程&lt;/li&gt;
&lt;li&gt;线程切换不需要内核的权限，切换开销小且快速&lt;/li&gt;
&lt;li&gt;问题：如果内核是单线程的，任何用户态线程调用了一调正在阻塞的系统调用，就会导致整个进程进入阻塞状态。线程的阻塞会导致进程的阻塞&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;252-kernel-threads&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#252-kernel-threads&#34;&gt;#&lt;/a&gt; 2.5.2 Kernel Threads&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;内核负责管理线程，负责线程的创造、调度、销毁&lt;/li&gt;
&lt;li&gt;没有线程库，内核提供线程相关的 api&lt;/li&gt;
&lt;li&gt;内核保持着进程和线程的 context&lt;/li&gt;
&lt;li&gt;线程切换需要内核，所以线程是调度器的基本单位，调度器调度的是线程&lt;/li&gt;
&lt;li&gt;缺点是 high cost&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-考试重点进程通信ipc&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-考试重点进程通信ipc&#34;&gt;#&lt;/a&gt; 3 考试重点：进程通信（IPC）&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;这部分重点讨论以下 issue：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;进程间如何传递信息&lt;/li&gt;
&lt;li&gt;资源共享&lt;/li&gt;
&lt;li&gt;进程同步（process synchronization）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在资源共享中存在一个重要的认识：竞争（Race）&lt;/p&gt;
&lt;p&gt;存在竞争的条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;多个进程访问临界区的 data，并且进程运行的结果需要多步访问临界区&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;避免竞争的方法是避免多个进程对临界区的 data 同时进行读写。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;临界资源 Critical Resource：一次只允许一个进程访问&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;临界区 Critical Region：访问临界资源的代码段&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;31-互斥访问资源-mutual-exclusion&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#31-互斥访问资源-mutual-exclusion&#34;&gt;#&lt;/a&gt; 3.1 互斥访问资源 Mutual Exclusion&lt;/h3&gt;
&lt;p&gt;造成互斥排斥的四个条件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;没有两个进程同时存在在临界区（互斥）&lt;/li&gt;
&lt;li&gt;没有对 CPU 的速度和数量进行假设&lt;/li&gt;
&lt;li&gt;没有在临界区外运行的进程可以锁住另一个进程（非抢占式）&lt;/li&gt;
&lt;li&gt;没有进程必须永远的等待进入临界区&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;如何实现资源互斥排斥访问，也就是能够让多个进程同时在临界区运行&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;禁用中断&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;进入临界区后，禁用所有的中断直到进程离开临界区&lt;/li&gt;
&lt;li&gt;时钟中断不会发生时，进程切换不会发生，这样在进程完成临界区访问前都不会被打断。&lt;/li&gt;
&lt;li&gt;禁用中断后，所有的程序都会按照顺序运行，这样临界区的 data 就能被正确的修改访问。&lt;/li&gt;
&lt;li&gt;只会在 OS 系统内使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;锁变量🔒&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;常见的有互斥锁 Mutux Lock&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Strict Alternation 严格变更&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Peterson&#39;s&lt;/strong&gt;&lt;br /&gt;
 使用 turn 和 interested [i]，当一个进程打算进入临界区时，会检查当前 turn 是不是自己的进程和另一个进程的是否对临界区感兴趣，如果 turn 不是自己的或者另一个进程不感兴趣，才可以访问；如果 turn 是自己的并且另一个进程感兴趣，会卡在循环中。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;turn 的作用：防止两个进程同时把 interested 设置为 true，导致两个进程卡在 while 循环&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;硬件方法 TSL&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;311-mutual-exclusion-with-busy-waiting&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#311-mutual-exclusion-with-busy-waiting&#34;&gt;#&lt;/a&gt; 3.1.1 Mutual Exclusion with Busy Waiting&lt;/h4&gt;
&lt;p&gt;方法四、方法五需要进程进行忙等待，就是卡 while 循环，进程没有进入 block 状态。&lt;/p&gt;
&lt;p&gt;这会导致一个问题：优先级反转问题：优先级低的进程在 blocking 优先级高的进程。&lt;/p&gt;
&lt;p&gt;解决：&lt;strong&gt;sleep and wakeup&lt;/strong&gt;&lt;br /&gt;
 让进程进入 block 状态，而不是 busy waiting；当能够进入临界区后再唤醒 wakeup&lt;/p&gt;
&lt;h3 id=&#34;32-重点消费者生产者问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#32-重点消费者生产者问题&#34;&gt;#&lt;/a&gt; 3.2 重点：消费者生产者问题&lt;/h3&gt;
&lt;h4 id=&#34;321-信号量必考中的必考-semaphores&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#321-信号量必考中的必考-semaphores&#34;&gt;#&lt;/a&gt; 3.2.1 信号量必考中的必考 Semaphores&lt;/h4&gt;
&lt;p&gt;Semaphores = 0：no wakeups were saved; some value: one or more wakeups were pending&lt;/p&gt;
&lt;p&gt;由两部分组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;an integer counter，COUNT&lt;/li&gt;
&lt;li&gt;a queue of pids of blocked processes，Q&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对信号量的操作分为两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;P () or wait () or down () ：申请资源，减少信号量&lt;/li&gt;
&lt;li&gt;V () or signal () or up () : 释放资源，增加信号量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;信号量为正时表示当前资源可以被多少进程访问；信号量为负时表当前有多少进程在等待。&lt;/p&gt;
&lt;h4 id=&#34;322-mutex-互斥信号量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#322-mutex-互斥信号量&#34;&gt;#&lt;/a&gt; 3.2.2 Mutex 互斥信号量&lt;/h4&gt;
&lt;p&gt;为什么不使用 Mutex？&lt;/p&gt;
&lt;p&gt;缓冲区大小为 1，任何时刻，apple、orange 和 plate 三个同步信号量中最多只有一个是 1 。因此，在任何时刻，最多只有一个集成的 P 操作不会被阻塞。&lt;/p&gt;
&lt;p&gt;对于缓冲区大小大于 1（信号量允许的值大于 1）的代码：&lt;br /&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;P(plate);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;P(mutex);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;对plate临界区中的事物进行操作；&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;V(mutex);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;V(plate);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Semaphores 大于 1 时，就必须设定一个 mutex 来保证互斥访问缓冲区。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PV 操作题的解题思路：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;关系分析：找出题目中描述的各个进程；分析他们之间的同步、互斥关系。找到不能同时发生的事情就是临界区。不能同时发生的事情可能有多个。&lt;/li&gt;
&lt;li&gt;设置信号量：互斥信号量初始值为 1，同步信号量初值要看对应资源的初始值是多少。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;issue&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;P（S）表示申请资源；V（S）表示释放一个字眼&lt;/li&gt;
&lt;li&gt;P、V 操作必须成对出现，申请意味着未来一定会释放。当为互斥操作时，出现在同进程；当为同步操作时，不在同进程出现；&lt;/li&gt;
&lt;li&gt;如果一个同步 P 和互斥 P 操作在一起时，同步 P 在互斥 P 前面&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-monitors&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-monitors&#34;&gt;#&lt;/a&gt; 4 Monitors&lt;/h3&gt;
&lt;p&gt;程序、变量和数据结构在一个 package 的集合，可以理解为一个只能被一个进程访问的代码块。&lt;/p&gt;
&lt;p&gt;访问 Monitor 的规则:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;进程和线程调用程序访问 Monitor&lt;/li&gt;
&lt;li&gt;互斥访问 Monitor&lt;/li&gt;
&lt;li&gt;不能直接访问 Monitor 的变量&lt;/li&gt;
&lt;li&gt;Monitor 可以只可以访问它的局部变量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;monitor 如何实现进程同步访问：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 condition 变量。&lt;/li&gt;
&lt;li&gt;使用 wait（x）来等待有人使用了 condition 变量，会是 condition+1，使用 signal（x）来使用 condition 变量，会使 condition-1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用 monitor 解决生产者消费者问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需要使用 count，一般表示缓冲区的数目。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;当 count=1 时，就要 signal（empty），发出空信号，说明已经不空了，让 wait empty 的进程得以访问 count 了；当 count=N-1 时，就要 signal（full），发出满信号，说明现在 count 已经不满了。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;5-message-passing&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-message-passing&#34;&gt;#&lt;/a&gt; 5 Message passing&lt;/h3&gt;
&lt;p&gt;进程通信的方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;共享 memory&lt;/li&gt;
&lt;li&gt;共享 file mode&lt;/li&gt;
&lt;li&gt;Message passing：
&lt;ul&gt;
&lt;li&gt;send and Receive&lt;/li&gt;
&lt;li&gt;send（addr，msg）；&lt;/li&gt;
&lt;li&gt;recv（addr，msg）；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;6-barrier&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6-barrier&#34;&gt;#&lt;/a&gt; 6 Barrier&lt;/h3&gt;
&lt;p&gt;Barrier 的使用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;进程们靠近 Barrier&lt;/li&gt;
&lt;li&gt;所有的进程到达是才允许所有的进程通过 Barrier&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;7-其他的ipc问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#7-其他的ipc问题&#34;&gt;#&lt;/a&gt; 7 其他的 IPC 问题&lt;/h3&gt;
&lt;h4 id=&#34;71-dining-philosophers问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#71-dining-philosophers问题&#34;&gt;#&lt;/a&gt; 7.1 Dining Philosophers 问题&lt;/h4&gt;
&lt;h4 id=&#34;72-reader-and-writer-问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#72-reader-and-writer-问题&#34;&gt;#&lt;/a&gt; 7.2 Reader And Writer 问题&lt;/h4&gt;
&lt;h3 id=&#34;8-调度问题-scheduling&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#8-调度问题-scheduling&#34;&gt;#&lt;/a&gt; 8 调度问题 scheduling&lt;/h3&gt;
&lt;h4 id=&#34;81何时调度&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#81何时调度&#34;&gt;#&lt;/a&gt; 8.1 何时调度&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;新进程被创建&lt;/li&gt;
&lt;li&gt;存在运行进程&lt;/li&gt;
&lt;li&gt;运行进程被 block&lt;/li&gt;
&lt;li&gt;io 中断&lt;/li&gt;
&lt;li&gt;时钟中断&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;抢占式和非抢占式调度&lt;/p&gt;
&lt;p&gt;好的调度算法的判断标准：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fair&lt;/li&gt;
&lt;li&gt;Priority&lt;/li&gt;
&lt;li&gt;Efficiency&lt;/li&gt;
&lt;li&gt;Encourage good behavior&lt;/li&gt;
&lt;li&gt;Support heavy loads&lt;/li&gt;
&lt;li&gt;Adapt to different environments&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不同的系统的侧重点不同：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All Systems
&lt;ul&gt;
&lt;li&gt;Fairness&lt;/li&gt;
&lt;li&gt;Efficiency&lt;/li&gt;
&lt;li&gt;Policy Enforcement&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Batch
&lt;ul&gt;
&lt;li&gt;Throughput&lt;/li&gt;
&lt;li&gt;Turnaround Time&lt;/li&gt;
&lt;li&gt;Waiting Time&lt;/li&gt;
&lt;li&gt;Processor Utilization&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Interactive system
&lt;ul&gt;
&lt;li&gt;Response Time&lt;/li&gt;
&lt;li&gt;Proportionality&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Real-Time system
&lt;ul&gt;
&lt;li&gt;meeting deadlines&lt;/li&gt;
&lt;li&gt;predictability&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;82-调度算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#82-调度算法&#34;&gt;#&lt;/a&gt; 8.2 调度算法&lt;/h4&gt;
&lt;h5 id=&#34;821-first-come-first-served算法-先进先出&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#821-first-come-first-served算法-先进先出&#34;&gt;#&lt;/a&gt; 8.2.1 First Come First Served 算法 先进先出&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;非抢占式&lt;/li&gt;
&lt;li&gt;在 Batch System 中使用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;简单不过多描述&lt;/p&gt;
&lt;p&gt;问题：convoy 问题&lt;/p&gt;
&lt;h5 id=&#34;822-shortest-job-first-最短作业优先&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#822-shortest-job-first-最短作业优先&#34;&gt;#&lt;/a&gt; 8.2.2 Shortest Job First 最短作业优先&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;有抢占式和非抢占式的&lt;/li&gt;
&lt;li&gt;需要提前知道进程工作完成所需时间，这是很困难的&lt;/li&gt;
&lt;li&gt;要求进程同时进入就绪态，这也是非常困难的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;抢占式 SJF&lt;/p&gt;
&lt;p&gt;有进程到达时，比较当前执行进程剩余运行时间和到达进程的运行时间&lt;/p&gt;
&lt;h5 id=&#34;823-round-robin-时间片轮转算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#823-round-robin-时间片轮转算法&#34;&gt;#&lt;/a&gt; 8.2.3 Round-robin 时间片轮转算法&lt;/h5&gt;
&lt;p&gt;时间片的大小的选择很重要，一般是 10 to 100 ms&lt;/p&gt;
&lt;h5 id=&#34;824-优先级调度&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#824-优先级调度&#34;&gt;#&lt;/a&gt; 8.2.4 优先级调度&lt;/h5&gt;
&lt;p&gt;同级别是 FCFS，这是抢占式的。&lt;/p&gt;
&lt;h5 id=&#34;825-multi-queue-scheduling-多级队列调度算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#825-multi-queue-scheduling-多级队列调度算法&#34;&gt;#&lt;/a&gt; 8.2.5 Multi-Queue Scheduling 多级队列调度算法&lt;/h5&gt;
&lt;p&gt;一个进程只能永久性进出一个队列，每个队列执行不同的调度算法。&lt;/p&gt;
&lt;p&gt;多级队列：该算法将系统中的进程就绪队列从一个拆分为若干个，将不同类型或性质的进程&lt;strong&gt;固定分配&lt;/strong&gt;在不同的就绪队列，不同的就绪队列采用不同的调度算法，&lt;strong&gt;一个就绪队列中的进程可以设置不同的优先级，不同的就绪队列本身也可以设置不同的优先级。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;多级队列调度算法由于设置多个就绪队列，因此对每个就绪队列就可以实施不同的调度算法，因此，系统针对不同用户进程的需求，很容易提供多种调度策略。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;高优先级的队列执行完成后低优先级的队列才能开始执行&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&#34;826-multi-level-feedback-多级反馈调度算法改进&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#826-multi-level-feedback-多级反馈调度算法改进&#34;&gt;#&lt;/a&gt; 8.2.6 Multi-level Feedback 多级反馈调度算法（改进）&lt;/h5&gt;
&lt;p&gt;基本和上一个算法一样，不同的地方在与高优先级的队列进程弹出后如果没有执行完就对推入下一个优先级的队列&lt;/p&gt;
&lt;h5 id=&#34;827-guaranteed-scheduling&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#827-guaranteed-scheduling&#34;&gt;#&lt;/a&gt; 8.2.7 Guaranteed Scheduling&lt;/h5&gt;
&lt;p&gt;为每个进程分配一个公平的时间份额或优先级，这个份额或优先级会根据进程的行为和需求动态调整。如果一个进程没有使用它的全部时间份额，这个未使用的份额可能会被其他需要更多处理器时间的进程利用。相反，如果一个进程超过了它的时间份额，它的优先级或时间份额会在下一个调度周期中被降低，以给其他进程更多的执行机会。&lt;/p&gt;
&lt;h5 id=&#34;828-lottery-scheduling&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#828-lottery-scheduling&#34;&gt;#&lt;/a&gt; 8.2.8 Lottery Scheduling&lt;/h5&gt;
&lt;p&gt;很常用！&lt;/p&gt;
&lt;p&gt;Probability-based ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统为每个进程分配一定数量的彩票，而进程获得 CPU 时间的机会与它持有的彩票数量成正比。当系统需要选择下一个要执行的进程时，它会进行一次 “抽奖”，随机选择一个彩票，拥有该彩票的进程获得执行机会。&lt;/li&gt;
&lt;li&gt;给高优先级或者短任务的进程更多的彩票&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;h5 id=&#34;829-fair-share-scheduling&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#829-fair-share-scheduling&#34;&gt;#&lt;/a&gt; 8.2.9 Fair-Share Scheduling&lt;/h5&gt;
&lt;p&gt;分为两种：进程公平调度，也就是之前讨论的时间片轮转；用户公平调度，给每个用户程序同等的 CPU 访问时间权限。&lt;/p&gt;
&lt;h4 id=&#34;83-scheduling-in-real-time-systems&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#83-scheduling-in-real-time-systems&#34;&gt;#&lt;/a&gt; 8.3 Scheduling in Real-Time systems&lt;/h4&gt;
</content>
        <category term="操作系统" scheme="http://smallcjy.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/" />
        <updated>2024-06-04T07:48:31.000Z</updated>
    </entry>
    <entry>
        <id>http://smallcjy.github.io/2024/06/04/C++%E7%BB%83%E4%B9%A0%E9%94%99%E8%AF%AF%E7%9F%A5%E8%AF%86%E7%82%B9%E5%A4%8D%E4%B9%A0%E5%8F%8A%E7%9F%A5%E8%AF%86%E5%9B%9E%E9%A1%BE/</id>
        <title>C++练习错误知识点复习及知识回顾</title>
        <link rel="alternate" href="http://smallcjy.github.io/2024/06/04/C++%E7%BB%83%E4%B9%A0%E9%94%99%E8%AF%AF%E7%9F%A5%E8%AF%86%E7%82%B9%E5%A4%8D%E4%B9%A0%E5%8F%8A%E7%9F%A5%E8%AF%86%E5%9B%9E%E9%A1%BE/"/>
        <content type="html">&lt;ol&gt;
&lt;li&gt;在 C++ 类和对象中，编译器只会为类的&lt;strong&gt;数据成员&lt;/strong&gt;分配内存。&lt;/li&gt;
&lt;li&gt;C++ 中不加声明的数据成员和方法默认的继承方式是 private。&lt;/li&gt;
&lt;li&gt;类的构造函数可以有参数，构成有参构造，但是构造函数是不会返回返回值的。&lt;/li&gt;
&lt;li&gt;注意类指针的创建不会创建类实例，不会开辟任何的内存。&lt;/li&gt;
&lt;li&gt;如何声明 const 类方法： &lt;code&gt;void print() const&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;友元不能传递，A 是 B 的友元，B 是 C 的友元，A 也不是 C 的友元。&lt;/li&gt;
&lt;li&gt;友元不具有交换性，A 是 B 的友元，B 不是 A 的友元。&lt;/li&gt;
&lt;li&gt;类的静态成员，要在类外进行赋值，且为所有的实例共享。访问通过类名进行访问。&lt;/li&gt;
&lt;li&gt;友元函数不属于类实例的域。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;友元函数是一种定义在类外部的普通函数，但它需要在类体内进行声明，要使用 friend。&lt;strong&gt;友元不是类的成员函数&lt;/strong&gt;，但可以访问类的私有成员。&lt;/li&gt;
&lt;li&gt;友元类，一个类可以当另一个类的友元，这个类的所有成员函数可以访问另一个友元类的私有成员。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;10&#34;&gt;
&lt;li&gt;类静态成员变量也遵守 public、private、protect 规则。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;C++ 文件流&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;文件流就是对文件进行增删查改的操作，可分为 oftream、ifstream、fstream。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ofstream：输出文件流，创建文件并写入&lt;/li&gt;
&lt;li&gt;ifstream：输入文件流，读取文件&lt;/li&gt;
&lt;li&gt;fstream：输入输出的功能都有。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如何使用呢？&lt;/p&gt;
&lt;p&gt;首先要定义文件流，使用类名定义即可&lt;/p&gt;
&lt;p&gt;然后打开文件，打开的方式有很多：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ios::in	读方式打开文件&lt;/li&gt;
&lt;li&gt;ios::out	写方式打开文件&lt;/li&gt;
&lt;li&gt;ios::trunc	如果此文件已经存在，就会打开文件之前把文件长度截断为 0&lt;/li&gt;
&lt;li&gt;ios::app	尾部最加方式 (在尾部写入)&lt;/li&gt;
&lt;li&gt;ios::ate	文件打开后，定位到文件尾&lt;/li&gt;
&lt;li&gt;ios::binary	二进制方式 (默认是文本方式)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;打开完文件后一定要判断文件是否打开成功&lt;/p&gt;
&lt;p&gt;is_open () 函数&lt;/p&gt;
&lt;p&gt;关闭文件&lt;/p&gt;
&lt;p&gt;写入文件，模仿输入输出流，使用 &amp;lt;&amp;lt; 来写；&lt;/p&gt;
&lt;p&gt;读取文件，使用 &amp;gt;&amp;gt; 来写；&lt;strong&gt;千万注意读取文件不能对源文件进行修改！！！&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;运算符函数是一种特殊的成员函数或友元函数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;系统默认提供重载版本的运算符是 ** =   &amp;amp;   , **&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;流操作符（比如 &amp;gt;&amp;gt; 和 &amp;lt;&amp;lt;）需要用友元函数进行重载，因为流操作符的左值不是我们可以修改的类，而且流操作符具有方向性，所以只能在类外进行重载。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一元操作符和二元运算符的左值是类的对象时，重载为类的成员函数，因为对类的对象进行了修改。当对类的对象不进行修改时，重载为友元函数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基类指针指向子类对象时，只能调用基类自己定义的方法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当派生类指针指向基类时，必须将派生类指针强转为基类指针才能调用基类的成员函数。&lt;br /&gt;
 &lt;code&gt;(A)B *b = A &amp;amp;a&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;多态实现动态连编是使用基类指针调用虚函数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重载虚函数时，函数的声明要相同&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;抽象类不能有实例，所以抽象类的声明需要使用指针&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;typedef：类型别名&lt;br /&gt;
 &lt;code&gt;typedef Ctiger* TigerPtr&lt;/code&gt; &lt;br /&gt;
Ctiger* 的别名 TigerPtr&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不能直接使用 &amp;lt;&amp;lt;输出字符串指针，得把 char* cast 成 void*。static_cast&amp;lt; void*&amp;gt;, 展示的是指针指向的地址&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;输出流、输入流&lt;/strong&gt; iostream&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;streams&lt;/li&gt;
&lt;li&gt;流操作符 &amp;lt;&amp;lt;和&amp;gt;&amp;gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;formatted I/O：标准化的 IO 输入输出&lt;/p&gt;
&lt;p&gt;使用 put 方法进行字符输出：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cout.put (&#39;A&#39;) 或者 cout.put (65) 也可以使用 ASCLL 编码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;cin 的 get 方法和 getline 方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;character = cin.get ()  可以使用变量来接收 cin 的输入，但是如果是 char 类型则无法接收到 EOF&lt;/li&gt;
&lt;li&gt;cin.get(char a[ size],size)&lt;/li&gt;
&lt;li&gt;cin.getline(char a[ size],size)&lt;/li&gt;
&lt;li&gt;注意当超过 size 时，cin 会认为发生错误，会自动清空缓存，忽略之后的输入&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;eofbit 文末标识符&lt;/p&gt;
&lt;p&gt;failbit 错误标识符&lt;/p&gt;
&lt;p&gt;badbit 当发生丢失数据的错误发生时被设置&lt;/p&gt;
&lt;p&gt;goodbit 当上面的情况没有发生时被设置&lt;/p&gt;
&lt;p&gt;当进行完一次输入后，可以用 rdstate 方法来查看 cin 的输入状态&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;重点：流的 Manipulators&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设置宽度、精度、格式状态、填充字符&lt;/li&gt;
&lt;li&gt;刷新流&lt;/li&gt;
&lt;li&gt;插入新行并且刷新输出流&lt;/li&gt;
&lt;li&gt;插入空字符，跳过空格&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用 oct、dec、hex、setbase（）来设置输出数字的形式&lt;/p&gt;
&lt;p&gt;使用 precision、setprecision 来设置输出浮点数的小数位&lt;/p&gt;
&lt;p&gt;使用 width 方法、setw 来设置输入输出宽度&lt;/p&gt;
&lt;p&gt;使用 skipws 来跳过空格键，可以使用 noskipws 来重置&lt;/p&gt;
&lt;p&gt;使用 left、right 来调整在域中字符出现的位置&lt;/p&gt;
&lt;p&gt;使用 internal 来使填充字符出现在符号和数字中间&lt;/p&gt;
&lt;p&gt;使用 showbase 来展示数字的 base&lt;/p&gt;
&lt;p&gt;使用 showpos 来显示数字的符号&lt;/p&gt;
&lt;p&gt;使用 booleanValue 来表示布尔值的数字形式；使用 booleanpha 来表示布尔值的英文形态&lt;/p&gt;
&lt;p&gt;保存原来的格式： ios_base::fmtflags originalFormat = cout.flags ()&lt;/p&gt;
&lt;p&gt;恢复原来的格式：cout.flags (originalFormal)&lt;/p&gt;
&lt;p&gt;可以定义输出流&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ostream &amp;amp; space(ostream&amp;amp; cout)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  cout&amp;lt;&amp;lt;&amp;#x27; &amp;#x27;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return cout;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不能&lt;strong&gt;被重载&lt;/strong&gt;的操作符： ?:  ::  .   .*&lt;/li&gt;
&lt;li&gt;++ 运算符重载：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;ins&gt;A: member: A &amp;amp; operator&lt;/ins&gt; ();  global: A &amp;amp; operator++(A &amp;amp;); 返回可修改的左值&lt;/li&gt;
&lt;li&gt;A++: meMber: A operator++(int);  global: A operator++(A &amp;amp;, int); 返回不可修改的右值， 注意要有虚参 int&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;static 成员变量和成员函数有他自己的 class scope&lt;/li&gt;
&lt;li&gt;父类指针指向子类，只能调用父类指针自己创建的方法和成员&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Function  template&lt;/th&gt;
&lt;th&gt;函数的模板，需要具体化&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Template function&lt;/td&gt;
&lt;td&gt;模板函数，由编译器根据模板生成的函数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Class Template&lt;/td&gt;
&lt;td&gt;类模板，需要具体化&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Template Class&lt;/td&gt;
&lt;td&gt;模板类，由编译器根据模板生成的类&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Const Point&lt;/td&gt;
&lt;td&gt;常量的指针，指向的地方不能修改&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Point Const&lt;/td&gt;
&lt;td&gt;指针的常量，指针不能指向别的地方，即指针的值不能修改&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;模板与继承：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;类模板可以从类模板专用化派生&lt;/li&gt;
&lt;li&gt;类模板可以从非模板类派生&lt;/li&gt;
&lt;li&gt;类模板专用化可以从类模板专用化派生&lt;/li&gt;
&lt;li&gt;非模板类可以从类模板专用化派生&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;多态&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多态&#34;&gt;#&lt;/a&gt; 多态&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;多态发生在运行时，而不是编译时&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;多态通过虚函数和动态 binding 实现&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基类指针用来调用虚函数来实现动态绑定&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;由于虚函数的调用是通过父类指针来实现的，所有要使用 -&amp;gt; 来调用虚函数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;base-class reference 也可以调用虚函数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以创建抽象类的引用，因为抽象类可以声明为指针；但不可以创建抽象类的实例。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;静态成员函数只能访问静态成员变量，因为静态成员函数为所有类所共有，所以也只能调用所有类所共有的成员，否则就会破坏封装性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;把一个类当做他的 derived class object 来使用会报错，比如调用派生类的方法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;成员函数模版不能是虚函数&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="C++" scheme="http://smallcjy.github.io/tags/C/" />
        <updated>2024-06-04T02:48:31.000Z</updated>
    </entry>
    <entry>
        <id>http://smallcjy.github.io/2024/06/04/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86--%E4%B8%AD%E9%97%B4%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E4%B9%8B%E6%8E%A7%E5%88%B6%E6%B5%81/</id>
        <title>编译原理--中间代码生成之控制流</title>
        <link rel="alternate" href="http://smallcjy.github.io/2024/06/04/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86--%E4%B8%AD%E9%97%B4%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E4%B9%8B%E6%8E%A7%E5%88%B6%E6%B5%81/"/>
        <content type="html">&lt;h2 id=&#34;1-控制流&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-控制流&#34;&gt;#&lt;/a&gt; 1 控制流&lt;/h2&gt;
&lt;p&gt;控制流是 if-else、while、for 这类语句，这类语句的翻译和对布尔表达式的翻译是结合在一起的。&lt;/p&gt;
&lt;h3 id=&#34;11-布尔表达式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#11-布尔表达式&#34;&gt;#&lt;/a&gt; 1.1 布尔表达式&lt;/h3&gt;
&lt;p&gt;首先来介绍布尔表达式的翻译过程。&lt;/p&gt;
&lt;p&gt;布尔表达式由布尔变量和关系表达式的布尔运算符构成，关系表达式的形式为 E1 rel E2。 属性 rel.op 表示关系运算符的某一种。&lt;/p&gt;
&lt;h3 id=&#34;12-短路代码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#12-短路代码&#34;&gt;#&lt;/a&gt; 1.2 短路代码&lt;/h3&gt;
&lt;p&gt;在短路代码中，布尔运算符 &amp;amp;&amp;amp;、||、！被翻译成跳转指令 goto；这三个运算符在翻译中没有符号显示。&lt;/p&gt;
&lt;h3 id=&#34;13-控制流语句&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#13-控制流语句&#34;&gt;#&lt;/a&gt; 1.3 控制流语句&lt;/h3&gt;
&lt;p&gt;标号是某关系表达式为真时该跳转的地方。&lt;/p&gt;
&lt;p&gt;假设每次调用 newlabel () 都会产生一个新的标号，并假设 label (L) 为将标号 L 附加到即将生成的下一条三地址指令上。&lt;/p&gt;
&lt;p&gt;比如：B.true = newlabel ()&lt;br /&gt;
S.code = label(B.true)&lt;/p&gt;
&lt;p&gt;说明跳转到 B.true 的指令会跳转到 S.code 上，就是跳转绑定。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;各种产生式对应的语义规则：&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;产生式&lt;/th&gt;
&lt;th&gt;语义规则&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;p&gt;|&lt;br /&gt;
|&lt;br /&gt;
|&lt;br /&gt;
|&lt;/p&gt;
</content>
        <category term="编译原理" scheme="http://smallcjy.github.io/tags/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/" />
        <updated>2024-06-04T02:48:31.000Z</updated>
    </entry>
    <entry>
        <id>http://smallcjy.github.io/2024/06/02/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86--%E8%AF%AD%E5%88%B6%E7%BF%BB%E8%AF%91/</id>
        <title>编译原理--语制翻译</title>
        <link rel="alternate" href="http://smallcjy.github.io/2024/06/02/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86--%E8%AF%AD%E5%88%B6%E7%BF%BB%E8%AF%91/"/>
        <content type="html">&lt;h2 id=&#34;语制翻译&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#语制翻译&#34;&gt;#&lt;/a&gt; 语制翻译&lt;/h2&gt;
&lt;h3 id=&#34;1-语法制导&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-语法制导&#34;&gt;#&lt;/a&gt; 1 语法制导&lt;/h3&gt;
&lt;p&gt;上下文无关文法和属性及规则的结合。属性和文法符号相关联，规则和产生式相关联。X.a 表示 X 符号 a 属性在语法树中的值。&lt;/p&gt;
&lt;h3 id=&#34;11-继承属性和综合属性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#11-继承属性和综合属性&#34;&gt;#&lt;/a&gt; 1.1 继承属性和综合属性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;综合属性：语法树节点值是由其本身的值、子节点的值决定的，即该节点的产生式右部只有其本身和子节点所关联的语义规则。右部产生式的头部如果有本身或子节点的产生式的头部有则为综合属性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;继承属性：语法树节点值是由其本身的值，父节点的值、其兄弟节点的值决定的，该节点的产生式的右部有父节点，如果父节点是非终止符，那么还可能推导到其本身和兄弟节点。本身的产生在父节点的语法规则上。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;12-在语法分析树的节点上对sdd求值&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#12-在语法分析树的节点上对sdd求值&#34;&gt;#&lt;/a&gt; 1.2 在语法分析树的节点上对 SDD 求值&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;注释语法分析树 annotated parse tree&lt;/strong&gt; ：各节点的值被显示出来的语法树&lt;/p&gt;
&lt;p&gt;那么如何求得节点属性的值呢，对于综合节点的属性值可以自底而上求值；对于继承节点的属性值可以自上而下求值。&lt;/p&gt;
&lt;h2 id=&#34;2-sdd的求值顺序&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-sdd的求值顺序&#34;&gt;#&lt;/a&gt; 2 SDD 的求值顺序&lt;/h2&gt;
&lt;p&gt;由上面可以知道，一个语法树的节点求值所相关的节点属性错综复杂，可能在父节点上，也可能在子节点或本身。那么如何确定一颗语法树的节点属性的求值顺序呢？&lt;/p&gt;
&lt;p&gt;这就需要&lt;strong&gt;依赖图&lt;/strong&gt;了。&lt;/p&gt;
&lt;p&gt;如何绘制依赖图呢，简单来说就是产生式右部的各个属性指向左部的属性。注意是在源语法树上新画出属性在进行依赖图的绘制而不是绘制在属性上。&lt;/p&gt;
&lt;p&gt;得到依赖图后，对依赖图进行拓补排序即可得到各个属性值的求值顺序。&lt;/p&gt;
&lt;p&gt;该方法也可以判断一颗语法树是否存在循环依赖的关系，也就是能否进行 SDD 求值的问题。&lt;/p&gt;
&lt;h3 id=&#34;21-两种类型的sdd&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#21-两种类型的sdd&#34;&gt;#&lt;/a&gt; 2.1 两种类型的 SDD&lt;/h3&gt;
&lt;h4 id=&#34;211-s属性的sdd&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#211-s属性的sdd&#34;&gt;#&lt;/a&gt; 2.1.1 S 属性的 SDD&lt;/h4&gt;
&lt;p&gt;如果 SDD 的所有属性都是综合属性，则称之为 S 属性的 SDD。&lt;/p&gt;
&lt;p&gt;可以采用自底向上来求解各个属性的值。&lt;/p&gt;
&lt;h4 id=&#34;212-l属性的sdd&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#212-l属性的sdd&#34;&gt;#&lt;/a&gt; 2.1.2 L 属性的 SDD&lt;/h4&gt;
&lt;p&gt;这类 SDD 的思想是在一个产生式体所关联的各个属性之间，依赖图的边总是从左到右。也就是说，这些属性要么是一个综合属性，要么是继承属性且其依赖的属性在其左边（&lt;strong&gt;头部或者左边的兄弟属性&lt;/strong&gt;）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;来自左边和上面！！！&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;3-抽象语法树&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-抽象语法树&#34;&gt;#&lt;/a&gt; 3 抽象语法树&lt;/h2&gt;
&lt;h3 id=&#34;31-抽象语法树的构建&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#31-抽象语法树的构建&#34;&gt;#&lt;/a&gt; 3.1 抽象语法树的构建&lt;/h3&gt;
&lt;p&gt;属性值不在是简单的复制而是带有一定的抽象操作（加减乘除），节点分为 Leaf 节点和 Node 节点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Leaf 节点：（op, val）&lt;/li&gt;
&lt;li&gt;Node 节点：（op, c1,c2...）（cn 为 node 的属性值）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;32-类型的结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#32-类型的结构&#34;&gt;#&lt;/a&gt; 3.2 类型的结构&lt;/h3&gt;
&lt;p&gt;节点的属性可以有值 val，也可以有类型 type&lt;/p&gt;
&lt;h2 id=&#34;4-语法制导的翻译方案sdt&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-语法制导的翻译方案sdt&#34;&gt;#&lt;/a&gt; 4 语法制导的翻译方案（SDT）&lt;/h2&gt;
&lt;p&gt;实现方法：首先建立一颗语法分析树，然后按照从左到右的深度优先顺序来执行这些动作，也就是说在一个前序遍历过程中执行。&lt;/p&gt;
&lt;p&gt;两类可用 SDT 实现的重要的 SDD：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基本文法可以用 LR 技术分析，且 SDD 是 S 属性的。&lt;/li&gt;
&lt;li&gt;基本文法可以用 LL 技术分析，且 SDD 是 L 属性的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;41-后缀翻译方案s属性的sdt&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#41-后缀翻译方案s属性的sdt&#34;&gt;#&lt;/a&gt; 4.1 后缀翻译方案 (S 属性的 SDT)&lt;/h3&gt;
&lt;p&gt;** 基本文法可以用 LR 技术分析，且 SDD 是 S 属性的。** 的情况。&lt;/p&gt;
&lt;p&gt;构造一个把每个动作（一般是给产生式头部的综合属性进行赋值）都放在产生式的最后，并且在按照这个产生式将产生实体归约成产生式头的时候执行这个动作。所有动作都在产生式的最右端的 SDT 称为后缀翻译方案。&lt;/p&gt;
&lt;h3 id=&#34;42-后缀sdt的语法分析栈的实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#42-后缀sdt的语法分析栈的实现&#34;&gt;#&lt;/a&gt; 4.2 后缀 SDT 的语法分析栈的实现&lt;/h3&gt;
&lt;p&gt;将属性和文法符号（或者文法符号的 LR 状态）一起放入栈中的记录里。&lt;/p&gt;
&lt;h3 id=&#34;43-产生式内部带有语义动作的&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#43-产生式内部带有语义动作的&#34;&gt;#&lt;/a&gt; 4.3 产生式内部带有语义动作的&lt;/h3&gt;
&lt;p&gt;当一个动作左边的所有符号都被处理（或者说不可归约后），该动作立即执行。&lt;/p&gt;
&lt;p&gt;任何 SDT 都可以通过下列方法实现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;忽略语义动作，对输入进行复发分析，并产生一个语法分析树。&lt;/li&gt;
&lt;li&gt;然后检查每个内部节点 N，假设她的产生式是 A-&amp;gt;a。将 a 中的各个动作当作 N 的附加子节点加入，使得 N 的子节点从左到右和 a 中的符号及动作完全一致。&lt;/li&gt;
&lt;li&gt;对这颗语法树进行前序遍历，并且当访问到一个以某个动作为标号的节点时立即执行这个动作。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;44-从sdt中消除左递归&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#44-从sdt中消除左递归&#34;&gt;#&lt;/a&gt; 4.4 从 SDT 中消除左递归&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;A-&amp;gt;Aa|b&lt;/strong&gt;  =&amp;gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A-&amp;gt;A&#39;|R&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;R-&amp;gt;aR|a&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;45-l属性定义的sdt&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#45-l属性定义的sdt&#34;&gt;#&lt;/a&gt; 4.5 L 属性定义的 SDT&lt;/h3&gt;
&lt;p&gt;将一个 L 属性的 SDD 转换为一个 SDT 的规则如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;把计算某个非终结符号 A 的继承属性的动作插入到产生式中紧靠 A 的左边。如果 A 的多个继承属性以五环的形式相互依赖，需要对这些属性的求职动作进行拓补排序，以计算需要的继承属性。&lt;/li&gt;
&lt;li&gt;将计算一个产生式头的综合属性放在最后。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;5-实现l属性的sdd&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-实现l属性的sdd&#34;&gt;#&lt;/a&gt; 5 实现 L 属性的 SDD&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;建立语法分析树并注释&lt;/li&gt;
&lt;li&gt;构造语法分析树&lt;/li&gt;
&lt;li&gt;使用一个递归下降的语法分析器，为每个非终结符号建立一个函数&lt;/li&gt;
&lt;li&gt;使用一个递归下降的语法分析器，以边扫描生成的方式代码&lt;/li&gt;
&lt;li&gt;与 LL 语法分析器结合生成 SDT&lt;/li&gt;
&lt;li&gt;与 LR 语法分析器结合生成 SDT&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;51-在递归下降的语法分析过程中进行翻译&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#51-在递归下降的语法分析过程中进行翻译&#34;&gt;#&lt;/a&gt; 5.1 在递归下降的语法分析过程中进行翻译&lt;/h3&gt;
&lt;p&gt;一个递归下降的语法分析器对每个非终结符号 A 都有一个函数 A。我们可以按照如下方法把这个语法分析器扩展为一个翻译器：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;函数 A 的参数是非终结符 A 的继承属性&lt;/li&gt;
&lt;li&gt;A 的返回值是非终结符 A 的综合属性的集合&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;52-边扫描边生成代码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#52-边扫描边生成代码&#34;&gt;#&lt;/a&gt; 5.2 边扫描边生成代码&lt;/h3&gt;
&lt;p&gt;TODO：没看懂、看看博客&lt;/p&gt;
&lt;h3 id=&#34;53-l属性的sdd和ll语法分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#53-l属性的sdd和ll语法分析&#34;&gt;#&lt;/a&gt; 5.3 L 属性的 SDD 和 LL 语法分析&lt;/h3&gt;
&lt;p&gt;在根据 SDT 进行 LL 语法分析过程中，需要对语法分析栈进行扩展，以存放语义动作和属性求值所需要的某些数据项，一般是某些属性值的拷贝。&lt;/p&gt;
&lt;p&gt;分别是动作记录和综合记录：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;动作记录：即将被执行的语义动作&lt;/li&gt;
&lt;li&gt;综合记录：保存非终结符号的综合属性值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那么该如何管理栈中的属性，在什么时候如何推入退出栈呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;非终结符号 A 的继承属性放在表示这个符号的栈记录中；&lt;/li&gt;
&lt;li&gt;非终结符号 A 的综合属性放在一个单独的综合记录中，他在栈中紧靠在 A 的记录下。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;LL 语法分析&lt;/strong&gt;（何时需要建立属性的临时拷贝）&lt;/p&gt;
&lt;h3 id=&#34;54-l属性的sdd的自底向上语法分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#54-l属性的sdd的自底向上语法分析&#34;&gt;#&lt;/a&gt; 5.4 L 属性的 SDD 的自底向上语法分析&lt;/h3&gt;
&lt;p&gt;方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;定义 L 属性的 SDT 为起点。&lt;/li&gt;
&lt;li&gt;对每个内嵌的语义动作在文法中引入一个标记非终结符 M 来替换它，M-&amp;gt;E。&lt;/li&gt;
&lt;li&gt;如果替换了被标记为 M 的语义动作 a 为 a’，这个 a’将动作 a 需要的 A 或 a 中的所有符号的任何属性作为 M 的继承属性进行拷贝；按照 a 中的方法计算各个属性，将这些属性作为 M 的综合属性&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="编译原理" scheme="http://smallcjy.github.io/tags/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/" />
        <updated>2024-06-02T02:48:31.000Z</updated>
    </entry>
    <entry>
        <id>http://smallcjy.github.io/2024/05/30/%E8%BD%AF%E5%88%86%E5%AE%9E%E8%AE%AD%E5%BC%80%E5%8F%91%E4%B8%AD%E6%9E%B6%E6%9E%84%E6%9C%89%E6%84%9F/</id>
        <title>软分实训中架构有感</title>
        <link rel="alternate" href="http://smallcjy.github.io/2024/05/30/%E8%BD%AF%E5%88%86%E5%AE%9E%E8%AE%AD%E5%BC%80%E5%8F%91%E4%B8%AD%E6%9E%B6%E6%9E%84%E6%9C%89%E6%84%9F/"/>
        <content type="html">&lt;h2 id=&#34;builder建造者模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#builder建造者模式&#34;&gt;#&lt;/a&gt; Builder 建造者模式&lt;/h2&gt;
&lt;p&gt;提供某种服务的对象如果具备提供一般化的服务功能，应该独立设计为一层，其为不同领域提供不同方向的服务各自设计为一层。&lt;br /&gt;
比如一个邮件系统，考虑为其添加 ai 服务的功能；但在邮件系统中，ai 服务可以出现在不同的领域，比如邮件领域；前端交互领域&lt;br /&gt;
等等，这是不能把这些 ai 服务的 builder 写在同一层内，应该抽象一个 ai 服务工厂，提供基本的 ai 服务，具体的 ai 服务调用基本的&lt;br /&gt;
 ai 服务，通过排列组合形成自定义化的 ai 服务 builder，提供服务接口给其他地方使用。&lt;/p&gt;
&lt;h2 id=&#34;架构模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#架构模式&#34;&gt;#&lt;/a&gt; 架构模式&lt;/h2&gt;
&lt;p&gt;AIService 层 --&amp;gt; MailAiService 层、AiAssistantService 层等等 --&amp;gt; Mail 层、User 层等等&lt;/p&gt;
</content>
        <category term="架构和设计模式" scheme="http://smallcjy.github.io/tags/%E6%9E%B6%E6%9E%84%E5%92%8C%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/" />
        <updated>2024-05-30T12:23:27.000Z</updated>
    </entry>
    <entry>
        <id>http://smallcjy.github.io/2024/05/30/hello-world/</id>
        <title>Hello World</title>
        <link rel="alternate" href="http://smallcjy.github.io/2024/05/30/hello-world/"/>
        <content type="html">&lt;p&gt;Welcome to &lt;a href=&#34;https://hexo.io/&#34;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&#34;https://hexo.io/docs/&#34;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&#34;https://hexo.io/docs/troubleshooting.html&#34;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&#34;https://github.com/hexojs/hexo/issues&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;quick-start&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#quick-start&#34;&gt;#&lt;/a&gt; Quick Start&lt;/h2&gt;
&lt;h3 id=&#34;create-a-new-post&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#create-a-new-post&#34;&gt;#&lt;/a&gt; Create a new post&lt;/h3&gt;
&lt;p&gt;&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ hexo new &lt;span class=&#34;string&#34;&gt;&amp;quot;My New Post&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;More info: &lt;a href=&#34;https://hexo.io/docs/writing.html&#34;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;run-server&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#run-server&#34;&gt;#&lt;/a&gt; Run server&lt;/h3&gt;
&lt;p&gt;&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;More info: &lt;a href=&#34;https://hexo.io/docs/server.html&#34;&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;generate-static-files&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#generate-static-files&#34;&gt;#&lt;/a&gt; Generate static files&lt;/h3&gt;
&lt;p&gt;&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ hexo generate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;More info: &lt;a href=&#34;https://hexo.io/docs/generating.html&#34;&gt;Generating&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;deploy-to-remote-sites&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#deploy-to-remote-sites&#34;&gt;#&lt;/a&gt; Deploy to remote sites&lt;/h3&gt;
&lt;p&gt;&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ hexo deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;More info: &lt;a href=&#34;https://hexo.io/docs/one-command-deployment.html&#34;&gt;Deployment&lt;/a&gt;&lt;/p&gt;
</content>
        <updated>2024-05-29T21:20:25.050Z</updated>
    </entry>
    <entry>
        <id>http://smallcjy.github.io/2024/05/27/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F--Deadlocks/</id>
        <title>操作系统--Deadlocks</title>
        <link rel="alternate" href="http://smallcjy.github.io/2024/05/27/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F--Deadlocks/"/>
        <content type="html">&lt;h2 id=&#34;1-资源resources&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-资源resources&#34;&gt;#&lt;/a&gt; 1 资源 Resources&lt;/h2&gt;
&lt;h3 id=&#34;11preemptable-resource&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#11preemptable-resource&#34;&gt;#&lt;/a&gt; 1.1Preemptable Resource&lt;/h3&gt;
&lt;p&gt;可抢占式资源这类资源被抢占不会影响程序的基本运行。&lt;br /&gt;
比如：&lt;strong&gt;memory&lt;/strong&gt;、&lt;strong&gt;disk&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;12-nonpreemptable-resource&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#12-nonpreemptable-resource&#34;&gt;#&lt;/a&gt; 1.2 Nonpreemptable Resource&lt;/h3&gt;
&lt;p&gt;非可抢占式资源，该类资源被访问时，其他访问的进程会进入阻塞状态，等待该资源被释放。资源的申请过程是：请求资源、使用资源、释放资源。资源的请求要调用系统调用，比如 open 调用等。&lt;/p&gt;
&lt;h2 id=&#34;2-死锁&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-死锁&#34;&gt;#&lt;/a&gt; 2 死锁&lt;/h2&gt;
&lt;p&gt;A set of processes is deadlocked if each process in the&lt;br /&gt;
set is waiting for an event that only another process in&lt;br /&gt;
the set can cause.&lt;br /&gt;
 简单来说，就是一个进程在拥有 a 资源时访问另一个进程拥有的 b 资源，而另一个进程在释放 b 资源之前需要访问 a 资源，这样就说两个进程构成死锁。&lt;/p&gt;
&lt;h3 id=&#34;21-死锁条件condition&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#21-死锁条件condition&#34;&gt;#&lt;/a&gt; 2.1 死锁条件 Condition&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Mutual exclusion condition&lt;br /&gt;
 每个资源已经分配给某进程，不然就是可以调用的。&lt;/li&gt;
&lt;li&gt;Hold and wait condition&lt;br /&gt;
 已经得到的资源的进程可以请求新的资源&lt;/li&gt;
&lt;li&gt;No preeption condition&lt;br /&gt;
 已经分配给一个进程的资源不能强制性的被抢占，只能被占有它的进程释放&lt;/li&gt;
&lt;li&gt;Circular wait condition&lt;br /&gt;
 死锁发生时，系统中有由两个以上的进程组成的一条环路，环路中每个进程请求下一个进程占有的资源。（死锁发生的根本原因）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;22-死锁建模modeling&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#22-死锁建模modeling&#34;&gt;#&lt;/a&gt; 2.2 死锁建模 Modeling&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;方块&lt;/strong&gt;表示&lt;strong&gt;资源&lt;/strong&gt;，&lt;strong&gt;圆形&lt;/strong&gt;表示&lt;strong&gt;进程&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;箭头，被占用资源指向占用进程；等待进程指向被等待资源&lt;br /&gt;
&lt;strong&gt; Resource-Allocation Graph&lt;/strong&gt;&lt;br /&gt;
V 集：P 集表示进程集合；R 集表示资源集合；&lt;br /&gt;
E 集：request edge --- 进程 --&amp;gt; 资源；（请求）&lt;br /&gt;
assignment edge --- 资源 --&amp;gt; 进程；（分配）&lt;br /&gt;
根据图，如果图没有 cycle，没有死锁；如果有，某类型资源只有一个实例，发生死锁，有多个实例，有可能发生死锁。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;23-死锁解决&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#23-死锁解决&#34;&gt;#&lt;/a&gt; 2.3 死锁解决&lt;/h3&gt;
&lt;p&gt;思想：破坏死锁构成的四个条件中的一个。&lt;/p&gt;
&lt;h4 id=&#34;231-鸵鸟算法ostrich&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#231-鸵鸟算法ostrich&#34;&gt;#&lt;/a&gt; 2.3.1 鸵鸟算法 Ostrich&lt;/h4&gt;
&lt;p&gt;系统认为死锁根本不会发生。应用这种算法有前提，由于系统设计的原因，死锁的发生非常稀少或者死锁的预防 cost 非常昂贵。&lt;/p&gt;
&lt;h4 id=&#34;232-deadlock-detection&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#232-deadlock-detection&#34;&gt;#&lt;/a&gt; 2.3.2 Deadlock Detection&lt;/h4&gt;
&lt;p&gt;系统允许死锁的发生，但会在检测死锁发生时干预解决。预先执行检测：detection algorithm；检测到死锁状态解决：recovery algorithm&lt;/p&gt;
&lt;h5 id=&#34;2321-有向图环路检测算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2321-有向图环路检测算法&#34;&gt;#&lt;/a&gt; 2.3.2.1 有向图环路检测算法&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;初始化空列表 L，初始化所有的边没有被标记。&lt;/li&gt;
&lt;li&gt;把当前的 node 推入 L，检测 node 是否被推入 L 过，如果有，证明存在环路。&lt;/li&gt;
&lt;li&gt;查看 node 没被标记的出边，如果有，goto 4 ；如果没有，goto 5 。&lt;/li&gt;
&lt;li&gt;随机选择一条出边，把当前节点选为出边的另一个节点，返回 2 ；&lt;/li&gt;
&lt;li&gt;说明当前节点遍历完毕，返回上一个节点，goto 3；如果这是最后一个节点，则说明该图没有环路。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;可以用来检测每种类型只有单个资源的死锁检测&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&#34;2322-每种类型有多个资源的死锁检测&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2322-每种类型有多个资源的死锁检测&#34;&gt;#&lt;/a&gt; 2.3.2.2 每种类型有多个资源的死锁检测&lt;/h5&gt;
&lt;p&gt;首先要有两个向量、两个矩阵的概念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Resource in existence 向量&lt;/li&gt;
&lt;li&gt;Resource available 向量&lt;/li&gt;
&lt;li&gt;Current allocated matrix&lt;/li&gt;
&lt;li&gt;Request matrix&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Deadlock Detection Algorithm&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主要思想是对向量进行比较（每个元素都要比，全部小才是小，否则就是大）&lt;/li&gt;
&lt;li&gt;先查看每个进程的需求矩阵的每列，看看分配向量能不能满足&lt;/li&gt;
&lt;li&gt;第一个找到的进程，把当前分配矩阵该进程所在行的列加到可用向量，标记这个矩阵，返回第一步（就是假设每个进程的运行速度几乎无穷快）&lt;/li&gt;
&lt;li&gt;如果没有这样的进程，算法终止，说明会死锁&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;233-recovery算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#233-recovery算法&#34;&gt;#&lt;/a&gt; 2.3.3 Recovery 算法&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Recovery through preemption&lt;/li&gt;
&lt;li&gt;Recovery through rollback&lt;/li&gt;
&lt;li&gt;Recovery through killing processes&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;234-死锁避免&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#234-死锁避免&#34;&gt;#&lt;/a&gt; 2.3.4 死锁避免&lt;/h4&gt;
&lt;p&gt;使用 deadlock-avoidance algorithm&lt;/p&gt;
&lt;p&gt;一个简单但非常有用的模型、需要每个进程声明自己需要的类型的资源的最大值&lt;/p&gt;
&lt;p&gt;该算法的重要基础：safe state&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;safe state：没有死锁且可以以某种顺序处理进程来满足所有进程的需求；&lt;/li&gt;
&lt;li&gt;system is in safe state：存在安全的进程执行序列&lt;/li&gt;
&lt;li&gt;unsafe state：possiable of deadlock&lt;/li&gt;
&lt;li&gt;If a system is in safe state =&amp;gt; no deadlocks&lt;/li&gt;
&lt;li&gt;If a system is in unsafe state =&amp;gt; &lt;strong&gt;possibility&lt;/strong&gt; of deadlock&lt;/li&gt;
&lt;li&gt;Avoidance =&amp;gt; ensure that system will never enter an unsafe state&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如何确保系统不会进入 unsafe state 呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Banker Algorithm 大名鼎鼎的银行家算法
&lt;ul&gt;
&lt;li&gt;对每种类型的资源只有一个的银行家算法：把 Free 加到 Has 里比较 Max，如果存在满足的进程就分配资源等待进程完成释放继续下一轮轮询，只到所有进程执行完成。&lt;/li&gt;
&lt;li&gt;重点：&lt;strong&gt;对每种类型的资源有多个的银行家算法&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;2341-bankers-algorithm-for-multiple-resources&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2341-bankers-algorithm-for-multiple-resources&#34;&gt;#&lt;/a&gt; 2.3.4.1 Banker&#39;s Algorithm for Multiple Resources&lt;/h5&gt;
&lt;p&gt;首先让我们来探讨一下怎么查看一个状态是否是 safe 的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;搜索有没有进程可以被满足（need&amp;lt; has+free），如果没有死锁 =》unsafe state&lt;/li&gt;
&lt;li&gt;如果存在这样的进程，就标记进程运行结束，释放资源到 free 中&lt;/li&gt;
&lt;li&gt;重复 1、2，直到所有的进程都被标记 =》safe state&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;银行家算法观点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Trade-off：保守、减少了并行性；&lt;/li&gt;
&lt;li&gt;Not very practicable
&lt;ul&gt;
&lt;li&gt;进程所需的最大资源数是很难被提前预知的&lt;/li&gt;
&lt;li&gt;进程数不是固定不变的&lt;/li&gt;
&lt;li&gt;被声明为可用的资源随时可能消失&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;235-死锁预防&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#235-死锁预防&#34;&gt;#&lt;/a&gt; 2.3.5 死锁预防&lt;/h4&gt;
&lt;p&gt;打破死锁产生的四大条件&lt;/p&gt;
&lt;p&gt;复习一下，死锁产生的四大条件分别是：&lt;strong&gt;Mutux Exclution、Hold and wait、No Preemptive、Circular Wait&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Attacking Mutux Exclusion&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Some devices can be spooled
&lt;ul&gt;
&lt;li&gt;比如打印机，单独设置一个打印进程专门负责打印工作，独占打印资源，使得打印机一直出于被占用状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Spooling space is limited, so deadlock is still possible with this decision&lt;/li&gt;
&lt;li&gt;原则
&lt;ul&gt;
&lt;li&gt;避免分配资源如果不是绝对需要的&lt;/li&gt;
&lt;li&gt;尽可能少的进程可以占有资源&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;问题
&lt;ul&gt;
&lt;li&gt;不是所有的 device 都可以 spool&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Attacking Hold and Wait&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;要求进程开始执行时请求所有的资源，这样就不需要因为资源被其他进程占用而等待&lt;/li&gt;
&lt;li&gt;问题
&lt;ul&gt;
&lt;li&gt;可能不知道需要的资源在开始的时候&lt;/li&gt;
&lt;li&gt;仍然可能访问到被别的进程占用的资源&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;改进：一旦请求不到所有的资源就放弃现有的资源进行下一次请求&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Attacking No Preemption Condition&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;设置可抢占式&lt;/li&gt;
&lt;li&gt;非常难实现，因为不切实际，比如打印机就不能在工作时被抢占&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Attacking the Circular Wait Condition&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;一次请求一个资源，释放一个请求一个&lt;/li&gt;
&lt;li&gt;对资源进程全局的排序，请求必须按顺序递增&lt;/li&gt;
&lt;li&gt;对方法二进行改进：没有进程申请比已经占有的资源更低的资源。&lt;/li&gt;
&lt;li&gt;问题：找到一个合适的 numbering 来满足所有人是不可能的；增加程序员的负担来记忆 numbering&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-other-issue&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-other-issue&#34;&gt;#&lt;/a&gt; 3 Other Issue&lt;/h2&gt;
&lt;h3 id=&#34;31-two-phase-locking&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#31-two-phase-locking&#34;&gt;#&lt;/a&gt; 3.1 Two-Phase Locking&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Phase one
&lt;ul&gt;
&lt;li&gt;进程对所有的记录进行枷锁，一次锁一个记录。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Phase two
&lt;ul&gt;
&lt;li&gt;建立在阶段一成功的基础上，完成更新然后释放所有的锁。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;32-communication-deadlocks&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#32-communication-deadlocks&#34;&gt;#&lt;/a&gt; 3.2 Communication Deadlocks&lt;/h3&gt;
&lt;p&gt;进程池中的每个进程都在等待该进程池中的其他进程发送的事件&lt;/p&gt;
&lt;p&gt;solution：设置 timeout&lt;/p&gt;
&lt;h3 id=&#34;33-livelock&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#33-livelock&#34;&gt;#&lt;/a&gt; 3.3 Livelock&lt;/h3&gt;
&lt;p&gt;进程任然在运行但是没有实际动作，比如 polling（busy waiting）.&lt;/p&gt;
&lt;h3 id=&#34;34-starvation&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#34-starvation&#34;&gt;#&lt;/a&gt; 3.4 starvation&lt;/h3&gt;
&lt;p&gt;一种算法进行调度，最短作业优先，大作业的进程会被饥饿。&lt;/p&gt;
</content>
        <category term="操作系统" scheme="http://smallcjy.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/" />
        <updated>2024-05-27T02:48:31.000Z</updated>
    </entry>
    <entry>
        <id>http://smallcjy.github.io/2024/05/27/%E8%AE%A1%E7%BD%91%E5%A4%8D%E4%B9%A0%E9%87%8D%E7%82%B9/</id>
        <title>计网复习重点</title>
        <link rel="alternate" href="http://smallcjy.github.io/2024/05/27/%E8%AE%A1%E7%BD%91%E5%A4%8D%E4%B9%A0%E9%87%8D%E7%82%B9/"/>
        <content type="html">&lt;h2 id=&#34;tcp-传输层字节流&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp-传输层字节流&#34;&gt;#&lt;/a&gt; TCP 传输层字节流&lt;/h2&gt;
&lt;p&gt;考察一个很长的消息，字节流，里面分为几个 segment ，如何去定义里面的 segment，后面多少个字节变成一个 segment，求解每个 segment 的 number，告诉你部分 segment 的参数，推导出其他 segment 的参数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;tcp 的 rdt 必考：告诉条件，如 A 向 B 发送了几个，丢了一部分，在不同的情况下，B 的 ACK 应该怎么响应？&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tcp 的拥塞控制，快速重传等，不同情况下会有什么表现，一次只能发一个 MSS 1248 非线性增长，每个轮次 double，然后线性增长。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RDP&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;control&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ip层&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ip层&#34;&gt;#&lt;/a&gt; IP 层&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;组网&lt;/strong&gt;：如何使用路由器和主机配个子网 subnet，你需要知道如何分配 ip，确定主机的网关；和链路层一起考。&lt;strong&gt;routing&lt;/strong&gt;：ls、dp 算法，自己跑一遍把路由表建立起来。&lt;/li&gt;
&lt;li&gt;DHCP NAT 链路层 端口号，这个节点的网关是多少，MAC 地址转换。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;链路层&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#链路层&#34;&gt;#&lt;/a&gt; 链路层&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;EDC、ARP&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;简答题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简答题&#34;&gt;#&lt;/a&gt; 简答题&lt;/h2&gt;
&lt;p&gt;考察一些基本定义、核心定义的内容、区别&lt;/p&gt;
&lt;h1 id=&#34;课程回顾&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#课程回顾&#34;&gt;#&lt;/a&gt; # 课程回顾&lt;/h1&gt;
&lt;h3 id=&#34;network&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#network&#34;&gt;#&lt;/a&gt; network&lt;/h3&gt;
&lt;p&gt;使用 tcp 协议实现可靠的数据传输服务，使用 ip 协议实现开放互联，提供设备地址；core 是 share 网络，如何去 share，使用 packetswitch，所以这个网络也称为 packetSwitchnetwork（包交换网络）。&lt;/p&gt;
&lt;h3 id=&#34;开放互联模型五层和osi模型七层&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#开放互联模型五层和osi模型七层&#34;&gt;#&lt;/a&gt; 开放互联模型（五层）和 OSI 模型（七层）&lt;/h3&gt;
&lt;p&gt;应用层、传输层、链路层、物理层&lt;/p&gt;
&lt;h4 id=&#34;app层&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#app层&#34;&gt;#&lt;/a&gt; app 层&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Web：HTTP 协议、HTML 语言、&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;两种经典的传输模型&lt;/strong&gt;&lt;br /&gt;
 CS 模式&lt;br /&gt;
 P2P 模式&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SMTP&lt;/strong&gt; 协议&lt;/p&gt;
</content>
        <category term="计算机网络" scheme="http://smallcjy.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/" />
        <updated>2024-05-27T02:48:31.000Z</updated>
    </entry>
    <entry>
        <id>http://smallcjy.github.io/2024/05/23/Loopback%E5%9B%9E%E7%8E%AF%E7%BD%91%E5%8D%A1%E8%AE%BE%E5%A4%87%E5%8F%8A%E5%85%B6%E9%A9%B1%E5%8A%A8%E7%9A%84%E5%AE%9E%E7%8E%B0/</id>
        <title>Loopback回环网卡设备及其驱动的实现</title>
        <link rel="alternate" href="http://smallcjy.github.io/2024/05/23/Loopback%E5%9B%9E%E7%8E%AF%E7%BD%91%E5%8D%A1%E8%AE%BE%E5%A4%87%E5%8F%8A%E5%85%B6%E9%A9%B1%E5%8A%A8%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
        <content type="html">&lt;h2 id=&#34;loopback回环网卡设备及其驱动实现开发进度&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#loopback回环网卡设备及其驱动实现开发进度&#34;&gt;#&lt;/a&gt; Loopback 回环网卡设备及其驱动实现开发进度&lt;/h2&gt;
&lt;h3 id=&#34;loopback开发思路&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#loopback开发思路&#34;&gt;#&lt;/a&gt; Loopback 开发思路&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;参考 virto_net 网卡，Loopback 设备自顶向下由 LoopbackInterface 层、LoopbackDeviceInnerWapper 层、LoopbackDeviceInner 层、Loopback 层实现，每层有自己的功能实现。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Loopback 层是 Loopback 实现的核心，其结构为一个 VecDeque&amp;lt;Vec&amp;lt;v8&amp;gt;&amp;gt;，VecDeque&amp;lt;Vec&amp;lt;v8&amp;gt;&amp;gt; 负责形成回环结构，从头部发送数据，接收的数据从尾部传入，FIFO。&lt;/p&gt;
&lt;p&gt;对 LoopbackDeviceInner 层实现 phy::Device 接口，重写 capability 函数、receive 函数、transmit 函数；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;capability 函数重写&lt;/strong&gt;：创建默认 DeviceCapability 结构体，设置 max_transmission_unit = 65535；设置 max_burst_size = 1;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;receive 函数重写&lt;/strong&gt;：在这个方法中，我们首先尝试从 self.inner.lock ().queue 的前端弹出一个数据包。这个队列是一个 VecDeque&amp;lt;Vec&amp;lt;u8&amp;gt;&amp;gt;，它存储了待处理的数据包。如果队列中有数据包，我们使用 map 函数创建一个接收 token 和一个发送 token。接收 token 包含了弹出的数据包，发送 token 包含了一个指向队列的可变引用，这样我们就可以在发送数据包时将其添加到队列中。如果队列为空。pop_front 方法会返回 None，此时 map 函数也会返回 None，表示当前没有数据包可供接收。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;transmit 函数重写：&lt;/strong&gt; 返回 Loopback 的 queue 用于 send&lt;/p&gt;
&lt;p&gt;对 LoopbackDeviceInnerWapper 层实现 Send、Sync、Deref、DereMut&lt;/p&gt;
&lt;p&gt;对 LoopbackInterface 实现 Device、NetDevice、KObject&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;以上是初步实现 Loopback 的大致思路，如果有不妥的地方，希望大家留言纠正！&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;loopback驱动开发思路&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#loopback驱动开发思路&#34;&gt;#&lt;/a&gt; Loopback 驱动开发思路&lt;/h3&gt;
&lt;p&gt;目前开发进度到 Loopback 设备实现。&lt;/p&gt;
</content>
        <updated>2024-05-23T02:48:31.000Z</updated>
    </entry>
    <entry>
        <id>http://smallcjy.github.io/2024/05/16/GoF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
        <title>GoF设计模式</title>
        <link rel="alternate" href="http://smallcjy.github.io/2024/05/16/GoF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
        <content type="html">&lt;h1 id=&#34;gof设计模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#gof设计模式&#34;&gt;#&lt;/a&gt; GoF 设计模式&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;设计模式一共有 23 种，接下来我会一一介绍。由于设计模式并非全部都是实用的，所以我会针对常见的 15 种模式进行详细的介绍，其他模式做简单的介绍。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在介绍 GoF 设计模式之前，我先阐述一些基本的概念。&lt;/p&gt;
&lt;h2 id=&#34;适配器gof&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#适配器gof&#34;&gt;#&lt;/a&gt; 适配器（GoF）&lt;/h2&gt;
&lt;p&gt;一个事物可能会使用到不同的第三方服务，可能存在类似服务但接口都不尽相同。为了提供稳定的接口，可以采用增加一层间接性对象，也就是适配器，把不同的外部接口调整为在应用程序内使用的一致接口。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/image.png&#34; alt=&#34;alt text&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;工厂factory&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#工厂factory&#34;&gt;#&lt;/a&gt; 工厂（Factory）&lt;/h3&gt;
&lt;p&gt;工厂，也叫简单工厂或者具体工厂。&lt;/p&gt;
&lt;p&gt;介绍 Factory 设计模式之前，引出一个问题。前面介绍的适配器，有没有想过在实际编程中，是由什么对象进行创建的。如果把适配器的创建交由需要这个适配器的对象进行创建，则又会使得该对象的职责越位，这是不建议的。&lt;/p&gt;
&lt;p&gt;这一点可以在一个基本设计原则中反映，&lt;strong&gt;设计要保持关注分离（separation of concern）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;为解决这个问题，便需要工厂模式。Factory 可以分离复杂的创建的职责，并将器分配给内聚的帮助者对象；同时隐藏潜在的复杂创建逻辑；允许引入提高性能的内存管理策略（对象缓存和再生）。&lt;/p&gt;
&lt;p&gt;具体做法：&lt;strong&gt;创建一个工厂的纯虚构对象来处理这些创建职责&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;单实例类singleton&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#单实例类singleton&#34;&gt;#&lt;/a&gt; 单实例类 (Singleton)&lt;/h3&gt;
&lt;p&gt;不知道读到这里有没有发现，适配器上存在的问题，在工厂上也同时存在（U・ェ・*U），谁来创建工厂对象实例呢？&lt;/p&gt;
&lt;p&gt;这里介绍一种解决方案：单实例类&lt;/p&gt;
&lt;p&gt;单实例类是只能拥有唯一实例的类。且实例的创建要对全局可见和单点访问，对类定义静态方法 getInstance 用以返回单实例。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/image-1.png&#34; alt=&#34;alt text&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;策略gof&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#策略gof&#34;&gt;#&lt;/a&gt; 策略（GoF）&lt;/h3&gt;
&lt;p&gt;利用多态设计根据对象进行动态变化的不同策略，这里的策略可以是解决某问题的算法，或者政策，针对不同的对象实例的相同问题需要不同的算法。&lt;/p&gt;
&lt;p&gt;创建这些算法对象同样的可以采用工厂模式进行分发。&lt;/p&gt;
&lt;h3 id=&#34;组合gof&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#组合gof&#34;&gt;#&lt;/a&gt; 组合 (GoF)&lt;/h3&gt;
</content>
        <category term="架构和设计模式" scheme="http://smallcjy.github.io/tags/%E6%9E%B6%E6%9E%84%E5%92%8C%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/" />
        <updated>2024-05-16T12:23:27.000Z</updated>
    </entry>
    <entry>
        <id>http://smallcjy.github.io/2024/05/16/%E9%97%B4%E6%8E%A5%E6%80%A7%E5%8E%9F%E5%88%99/</id>
        <title>间接性原则</title>
        <link rel="alternate" href="http://smallcjy.github.io/2024/05/16/%E9%97%B4%E6%8E%A5%E6%80%A7%E5%8E%9F%E5%88%99/"/>
        <content type="html">&lt;h1 id=&#34;间接性原则indirection&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#间接性原则indirection&#34;&gt;#&lt;/a&gt; 间接性原则（indirection）&lt;/h1&gt;
&lt;h2 id=&#34;什么是间接性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是间接性&#34;&gt;#&lt;/a&gt; 什么是间接性&lt;/h2&gt;
&lt;p&gt;间接性是在两个事物或多个事物中间作为中介，将提供服务方的接口隐藏到自己的接口中，并对接收服务端开放，达到避免直接耦合的作用。&lt;/p&gt;
&lt;p&gt;计算机科学中有句名言：**“计算机科学中的大部分问题都可以通过添加一层间接性来解决。”** 降低事物之间的耦合性的重要性可见一斑。&lt;/p&gt;
</content>
        <category term="架构和设计模式" scheme="http://smallcjy.github.io/tags/%E6%9E%B6%E6%9E%84%E5%92%8C%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/" />
        <updated>2024-05-16T12:23:27.000Z</updated>
    </entry>
    <entry>
        <id>http://smallcjy.github.io/2024/05/08/%E6%9B%BF%E6%8D%A2vue-cli%E6%88%90vite%E6%A1%86%E6%9E%B6%E8%BF%87%E7%A8%8B%E7%BB%8F%E9%AA%8C%E6%B5%85%E8%B0%88/</id>
        <title>替换vue-cli成vite框架过程经验浅谈</title>
        <link rel="alternate" href="http://smallcjy.github.io/2024/05/08/%E6%9B%BF%E6%8D%A2vue-cli%E6%88%90vite%E6%A1%86%E6%9E%B6%E8%BF%87%E7%A8%8B%E7%BB%8F%E9%AA%8C%E6%B5%85%E8%B0%88/"/>
        <content type="html">&lt;h2 id=&#34;替换vue-cli成vite框架过程经验浅析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#替换vue-cli成vite框架过程经验浅析&#34;&gt;#&lt;/a&gt; 替换 vue-cli 成 vite 框架过程经验浅析&lt;/h2&gt;
</content>
        <category term="vue" scheme="http://smallcjy.github.io/tags/vue/" />
        <updated>2024-05-08T12:23:27.000Z</updated>
    </entry>
</feed>
