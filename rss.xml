<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Blog</title>
        <subtitle></subtitle>
        <icon>http://smallcjy.github.io/images/favicon.ico</icon>
        <link>http://smallcjy.github.io</link>
        <author>
          <name>Cai Junyuan</name>
        </author>
        <description></description>
        <language>en</language>
        <pubDate>Tue, 26 Nov 2024 21:08:29 +0800</pubDate>
        <lastBuildDate>Tue, 26 Nov 2024 21:08:29 +0800</lastBuildDate>
        <item>
            <guid isPermalink="true">http://smallcjy.github.io/2024/11/26/%E8%AE%B0%E5%BD%95%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%BC%80%E5%8F%91%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84bug/</guid>
            <title></title>
            <link>http://smallcjy.github.io/2024/11/26/%E8%AE%B0%E5%BD%95%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%BC%80%E5%8F%91%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84bug/</link>
            <pubDate>Tue, 26 Nov 2024 21:08:29 +0800</pubDate>
            <description><![CDATA[  ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://smallcjy.github.io/2024/11/12/%E5%A6%82%E4%BD%95%E5%86%99%E5%A5%BD%E6%8A%80%E6%9C%AF%E7%AE%80%E5%8E%86/</guid>
            <title>如何写好技术简历</title>
            <link>http://smallcjy.github.io/2024/11/12/%E5%A6%82%E4%BD%95%E5%86%99%E5%A5%BD%E6%8A%80%E6%9C%AF%E7%AE%80%E5%8E%86/</link>
            <category term="求职" scheme="http://smallcjy.github.io/tags/%E6%B1%82%E8%81%8C/" />
            <pubDate>Tue, 12 Nov 2024 19:04:47 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;本人写这篇文章时，已经是大三上的学生，需要开始着手准备面试实习。在准备面试之隙，抽空思考下如何写好一份精简的、有水平的技术简历。技术简历是非常重要的，它绝不仅仅是面试的敲门砖，而是你后来多次技术面的考纲！是决定你能否拿到 offer 的关键的关键。笔者水平有限、希望读者能够从文章中得到些许理解。&lt;/p&gt;
&lt;h2 id=&#34;项目是简历的核心围绕项目设计你的简历&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#项目是简历的核心围绕项目设计你的简历&#34;&gt;#&lt;/a&gt; 项目是简历的核心，围绕项目设计你的简历&lt;/h2&gt;
&lt;p&gt;上个月，本人抽空去听了学校进入大厂工作的学长的求职讲座。学长在讲座中是这么讲到的，什么能够最大程度的提高你的个人竞争力，实习大于项目大于比赛大于奖金大于绩点，可见，项目经历对于求职是多么重要。&lt;/p&gt;
&lt;p&gt;在大公司，HR 每天要处理的简历可达上千上万份，平均处理一份简历的时间是以秒为单位。如何在这短短几秒内，让 HR 愿意注意到你的简历，并将面试机会交给你。&lt;/p&gt;
&lt;p&gt;在开始着手编写简历前，脑中要有这样的观念：简历是传递信息的媒介，精简、重点突出是重要的关键。你需要突出什么点，需要突出多少，成为你需要思考的问题。上面提到的项目就解决这个问题。&lt;/p&gt;
&lt;p&gt;作为一名开发者，项目就是你的剑。你需要突出你的项目，和项目涉及到的技术栈。你不需要谈论你的绩点、校内社团活动、奖金、性格等等，你要知道你面试的是一家技术公司，甚至是一家互联网大厂，谋利永远是你和他们的共同话题！你的项目能够带来什么样的谋利点，哪怕只是一点可能性，都能成为你在一众面试者中脱颖而出的关键。&lt;/p&gt;
&lt;h2 id=&#34;针对企业需求-突出你的技能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#针对企业需求-突出你的技能&#34;&gt;#&lt;/a&gt; 针对企业需求、突出你的技能&lt;/h2&gt;
&lt;p&gt;既然你知道要在简历中着重项目，那么你该如何围绕项目进行简历编写呢？&lt;/p&gt;
&lt;p&gt;我的回答是：&lt;strong&gt;在项目描述中突出你能为企业解决问题的技能！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;回答里有三个关键点：项目描述、解决问题，技能。我后面讲述基本全是围绕这几个点。&lt;/p&gt;
&lt;p&gt;企业有它们自己的技术栈，所以会更希望招的人提前接触过相关的技术栈。所以在你的简历中要包括企业招聘要求的技术关键词，比如语言、框架、技术等。&lt;/p&gt;
&lt;h2 id=&#34;项目三要素&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#项目三要素&#34;&gt;#&lt;/a&gt; 项目三要素&lt;/h2&gt;
&lt;p&gt;这里回答上面的项目描述。项目描述就是将你的项目信息以简要的形式呈现在简历上。项目信息 = 产品 + 技术 + 结果！在谷歌的招聘要求中，需要你在项目描述中提供下面三个信息：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;做了什么产品&lt;/li&gt;
&lt;li&gt;用了什么技术&lt;/li&gt;
&lt;li&gt;取得了什么结果&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在描述中尽可能量化你的项目信息，而不是泛泛而谈。比如你的开源项目有多少 star 等。&lt;/p&gt;
&lt;h2 id=&#34;fab-mode&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#fab-mode&#34;&gt;#&lt;/a&gt; FAB mode&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Feature：你做了什么&lt;/li&gt;
&lt;li&gt;Advantage：你的优势&lt;/li&gt;
&lt;li&gt;Benefit：你的优势会为公司带来了什么好处&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://smallcjy.github.io/2024/11/06/ePubFile/</guid>
            <title>ePubFile</title>
            <link>http://smallcjy.github.io/2024/11/06/ePubFile/</link>
            <category term="ePub" scheme="http://smallcjy.github.io/tags/ePub/" />
            <pubDate>Wed, 06 Nov 2024 16:49:42 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;epub-crate-example&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#epub-crate-example&#34;&gt;#&lt;/a&gt; epub crate example&lt;/h2&gt;
&lt;p&gt;&lt;figure class=&#34;highlight rust&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//open&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; epub::doc::EpubDoc;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;doc&lt;/span&gt; = EpubDoc::&lt;span class=&#34;title function_ invoke__&#34;&gt;new&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;path/to/file.epub&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;assert!&lt;/span&gt;(doc.&lt;span class=&#34;title function_ invoke__&#34;&gt;is_ok&lt;/span&gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;doc&lt;/span&gt; = doc.&lt;span class=&#34;title function_ invoke__&#34;&gt;unwrap&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//get doc metadata&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;title&lt;/span&gt; = doc.&lt;span class=&#34;title function_ invoke__&#34;&gt;mdata&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;title&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;epub-crate&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#epub-crate&#34;&gt;#&lt;/a&gt; epub crate&lt;/h2&gt;
&lt;h3 id=&#34;doc&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#doc&#34;&gt;#&lt;/a&gt; doc&lt;/h3&gt;
&lt;p&gt;EpubDoc 结构体：控制 epub 文档的结构体&lt;br&gt;
 &lt;figure class=&#34;highlight rust&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;pub&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;EpubDoc&lt;/span&gt;&amp;lt;R: Read + Seek&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// spine ids&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;pub&lt;/span&gt; spine: &lt;span class=&#34;type&#34;&gt;Vec&lt;/span&gt;&amp;lt;&lt;span class=&#34;type&#34;&gt;String&lt;/span&gt;&amp;gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// resource id -&amp;gt; (path, mime)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;pub&lt;/span&gt; resources: HashMap&amp;lt;&lt;span class=&#34;type&#34;&gt;String&lt;/span&gt;, (PathBuf, &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt;)&amp;gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// table of content, list of NavPoint in the toc.ncx&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;pub&lt;/span&gt; toc: &lt;span class=&#34;type&#34;&gt;Vec&lt;/span&gt;&amp;lt;NavPoint&amp;gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;pub&lt;/span&gt; metadata: HashMap&amp;lt;&lt;span class=&#34;type&#34;&gt;String&lt;/span&gt;, &lt;span class=&#34;type&#34;&gt;Vec&lt;/span&gt;&amp;lt;&lt;span class=&#34;type&#34;&gt;String&lt;/span&gt;&amp;gt;&amp;gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// root file base path&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;pub&lt;/span&gt; root_base: PathBuf,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// root file full path&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;pub&lt;/span&gt; root_file: PathBuf,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;pub&lt;/span&gt; extra_css: &lt;span class=&#34;type&#34;&gt;Vec&lt;/span&gt;&amp;lt;&lt;span class=&#34;type&#34;&gt;String&lt;/span&gt;&amp;gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;pub&lt;/span&gt; unique_identifier: &lt;span class=&#34;type&#34;&gt;Option&lt;/span&gt;&amp;lt;&lt;span class=&#34;type&#34;&gt;String&lt;/span&gt;&amp;gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;pub&lt;/span&gt; cover_id: &lt;span class=&#34;type&#34;&gt;Option&lt;/span&gt;&amp;lt;&lt;span class=&#34;type&#34;&gt;String&lt;/span&gt;&amp;gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/* private fields */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;File -&amp;gt; Cursor -&amp;gt; EpubDoc&lt;br&gt;
&lt;figure class=&#34;highlight rust&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;mut &lt;/span&gt;&lt;span class=&#34;variable&#34;&gt;file&lt;/span&gt; = File::&lt;span class=&#34;title function_ invoke__&#34;&gt;open&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;test.epub&amp;quot;&lt;/span&gt;).&lt;span class=&#34;title function_ invoke__&#34;&gt;unwrap&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;mut &lt;/span&gt;&lt;span class=&#34;variable&#34;&gt;buffer&lt;/span&gt; = &lt;span class=&#34;type&#34;&gt;Vec&lt;/span&gt;::&lt;span class=&#34;title function_ invoke__&#34;&gt;new&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;file.&lt;span class=&#34;title function_ invoke__&#34;&gt;read_to_end&lt;/span&gt;(&amp;amp;&lt;span class=&#34;keyword&#34;&gt;mut&lt;/span&gt; buffer).&lt;span class=&#34;title function_ invoke__&#34;&gt;unwrap&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;cursor&lt;/span&gt; = Cursor::&lt;span class=&#34;title function_ invoke__&#34;&gt;new&lt;/span&gt;(buffer);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;doc&lt;/span&gt; = EpubDoc::&lt;span class=&#34;title function_ invoke__&#34;&gt;from_reader&lt;/span&gt;(cursor);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;assert!&lt;/span&gt;(doc.&lt;span class=&#34;title function_ invoke__&#34;&gt;is_ok&lt;/span&gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;doc&lt;/span&gt; = doc.&lt;span class=&#34;title function_ invoke__&#34;&gt;unwrap&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;epub文件结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#epub文件结构&#34;&gt;#&lt;/a&gt; ePub 文件结构&lt;/h2&gt;
&lt;p&gt;ePub 文件相当于电子书文件内容和提供索引、书本信息的文件的压缩包。主要包括以下三个部分：META-INF、OEBPS、mimetype。ePub 解析包括对这三部分的解析。mimetype 指定 MIME 媒体类型；META—INF 存放 container.xml，定义.opf 文件的路径及 media-type；OEBPS 存放电子书内容，包括章节内容（xhtml 文件），书本信息（content.opf 文件），图片内容，目录索引（toc.ncx）等等。&lt;/p&gt;
&lt;h2 id=&#34;epub书籍解析设计&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#epub书籍解析设计&#34;&gt;#&lt;/a&gt; ePub 书籍解析设计&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;主要元数据（位于 content.opf）&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;metadata 标签&lt;/li&gt;
&lt;li&gt;manifest 标签&lt;/li&gt;
&lt;li&gt;spine 标签&lt;/li&gt;
&lt;li&gt;guide 标签&lt;/li&gt;
&lt;li&gt;tour 标签&lt;/li&gt;
&lt;li&gt;ncx 目录文件&lt;/li&gt;
&lt;li&gt;css 样式表&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;解析流程&lt;br&gt;
解析 ePub 书籍主要流程：章节目录列表的建立，样式表的读取、章节文件的读取。对于每块元数据的读取提供 api。&lt;br&gt;
首先读取 META-INF/container.xml 文件得到 content.opf 文件路径，解析.opf 文件进行 epub 书籍的元数据的创建和初始化；&lt;br&gt;
解析 toc 目录文件 ncx，建立树形目录结构；&lt;br&gt;
解析.css 样式表文件，建议与 xhtml 章节文件的映射关系；&lt;br&gt;
解析章节内容，基于 spine 顺序的 xhtml 文件的集合，顺序解析各个文件，将文件进行指定格式的解析储存，方便前端进行格式解析渲染&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;epub模块api设计&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#epub模块api设计&#34;&gt;#&lt;/a&gt; ePub 模块 api 设计&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ePub 文件的上传和元数据的解析 (FileService)&lt;br&gt;
&lt;figure class=&#34;highlight md&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;section&#34;&gt;### 上传书本，支持格式：epub [POST /api/file/v1/upload]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;bullet&#34;&gt;+&lt;/span&gt; Request (multipart/form-data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;bullet&#34;&gt;    +&lt;/span&gt; Attributes&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;bullet&#34;&gt;        +&lt;/span&gt; file: (file, required) - 文件&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;bullet&#34;&gt;+&lt;/span&gt; Response 200 (application/json)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;bullet&#34;&gt;    +&lt;/span&gt; Attributes (BaseResponse[string])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://smallcjy.github.io/2024/11/04/%E7%AB%99%E5%9C%A8cpp%E7%9A%84%E8%A7%86%E8%A7%92%E4%B8%8A%E7%9C%8B%E5%BE%85%E4%BD%BF%E7%94%A8%E4%B8%80%E4%BA%9Brust%E7%89%B9%E6%80%A7/</guid>
            <title>站在cpp的视角上看待使用一些rust特性</title>
            <link>http://smallcjy.github.io/2024/11/04/%E7%AB%99%E5%9C%A8cpp%E7%9A%84%E8%A7%86%E8%A7%92%E4%B8%8A%E7%9C%8B%E5%BE%85%E4%BD%BF%E7%94%A8%E4%B8%80%E4%BA%9Brust%E7%89%B9%E6%80%A7/</link>
            <category term="cpp" scheme="http://smallcjy.github.io/tags/cpp/" />
            <pubDate>Mon, 04 Nov 2024 20:51:07 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;前言&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前言&#34;&gt;#&lt;/a&gt; 前言&lt;/h2&gt;
&lt;p&gt;笔者最近正在准备 cpp 实习面试，需要先放下一段时间的 rust，重新拾起 cpp。在学习 cpp 现代特性的时候，突发奇想，想着能不能用 cpp 实现一些常见的 rust 特性，将 rust 内存安全、高性能、设计模式带到 cpp 开发中。所以开帖跟踪学习。&lt;/p&gt;
&lt;h3 id=&#34;trait&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#trait&#34;&gt;#&lt;/a&gt; trait&lt;/h3&gt;
&lt;p&gt;rust 中的 trait 类似与 java 的接口，可以为任何数据结构实现一个 trait 包含的方法，当调用到该方法时会代替默认使用。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://smallcjy.github.io/2024/11/04/modernCpp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
            <title>现代cpp及cpp后端架构学习笔记</title>
            <link>http://smallcjy.github.io/2024/11/04/modernCpp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
            <category term="cpp" scheme="http://smallcjy.github.io/tags/cpp/" />
            <pubDate>Mon, 04 Nov 2024 20:51:07 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;raii惯用法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#raii惯用法&#34;&gt;#&lt;/a&gt; RAII 惯用法&lt;/h2&gt;
&lt;p&gt;RAII：Resource Acquisition Is Initialization，资源获取即初始化。在 C++ 中，RAII 是一种资源管理的技术，通过在对象的构造函数中获取资源，然后在对象的析构函数中释放资源，来管理资源的生命周期。RAII 的核心思想是：将资源的生命周期与对象的生命周期绑定在一起，通过对象的构造和析构来管理资源的生命周期。&lt;/p&gt;
&lt;p&gt;简单来说就是资源的获取都在构造函数中执行，资源的释放都在析构函数中执行，从而达到内存自动管理的兄啊过&lt;/p&gt;
&lt;h2 id=&#34;pimpl惯用法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pimpl惯用法&#34;&gt;#&lt;/a&gt; pimpl 惯用法&lt;/h2&gt;
&lt;p&gt;pimpl：pointer to Implementation&lt;br&gt;
 使用目的：保持对外接口不变、又能尽量不暴露一些关键性的成员变量和私有函数的实现方法呢？有的！将全部的私有成员和函数用 Impl * 指针（名字可自定义）代替。这样私有成员对外不可见&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// MyClass.h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;ifndef&lt;/span&gt; MYCLASS_H&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;define&lt;/span&gt; MYCLASS_H&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;memory&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;MyClass&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;MyClass&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ~&lt;span class=&#34;built_in&#34;&gt;MyClass&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;doSomething&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Impl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    std::unique_ptr&amp;lt;Impl&amp;gt; pImpl;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;endif&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;// MYCLASS_H&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// MyClass.cpp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;MyClass.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;MyClass&lt;/span&gt;::Impl &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;doSomething&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        std::cout &amp;lt;&amp;lt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Doing something in the implementation class.&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::endl;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;MyClass::&lt;span class=&#34;built_in&#34;&gt;MyClass&lt;/span&gt;() : &lt;span class=&#34;built_in&#34;&gt;pImpl&lt;/span&gt;(std::&lt;span class=&#34;built_in&#34;&gt;make_unique&lt;/span&gt;&amp;lt;Impl&amp;gt;()) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;MyClass::~&lt;span class=&#34;built_in&#34;&gt;MyClass&lt;/span&gt;() = &lt;span class=&#34;keyword&#34;&gt;default&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;MyClass::doSomething&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    pImpl-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;doSomething&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在 h 文件中暴露出必要的使用接口，将体现接口能够实现的内部实现的成员和函数放入 cpp 文件中的 impl 类中。impl 是接口类的父类，这是个很棒的设计模式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：
&lt;ul&gt;
&lt;li&gt;核心数据成员被隐藏&lt;/li&gt;
&lt;li&gt;降低编译依赖，提高编译速度&lt;/li&gt;
&lt;li&gt;实现接口与实现的分离（这很令我心动）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;使用智能指针&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用智能指针&#34;&gt;#&lt;/a&gt; 使用智能指针&lt;/h3&gt;
&lt;p&gt;在 C++11 中，我们可以使用 std::unique_ptr 来管理 pImpl 指针，这样就不需要手动释放内存了。类似 rust 的 arc 智能指针，可以计数然后在计数为 0 的时候进行自动的内存释放。&lt;/p&gt;
&lt;h2 id=&#34;拥抱现代cppcpp11以后新增的实用magic&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#拥抱现代cppcpp11以后新增的实用magic&#34;&gt;#&lt;/a&gt; 拥抱现代 CPP（CPP11 以后新增的实用 magic）&lt;/h2&gt;
&lt;h3 id=&#34;1-统一的类成员初始化语法与stdinitializer_listt&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-统一的类成员初始化语法与stdinitializer_listt&#34;&gt;#&lt;/a&gt; 1 统一的类成员初始化语法与 &lt;code&gt;std::initializer_list&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;列表类成员初始化：&lt;br&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;MyClass&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; arr[SIZE];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;built_in&#34;&gt;MyClass&lt;/span&gt;() : arr&amp;#123;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;&amp;#125; &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
 这是如何实现的呢？答案是 &lt;code&gt;std::initializer_list&amp;lt;T&amp;gt;&lt;/code&gt; ，下面给出一个例子解释如何是是使用 &lt;code&gt;std::initializer_list&amp;lt;T&amp;gt;&lt;/code&gt;  去实现类列表成员的初始化。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;A&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;A&lt;/span&gt;(std::initializer_list&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; integers)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        m_vecIntegers.&lt;span class=&#34;built_in&#34;&gt;insert&lt;/span&gt;(m_vecIntegers.&lt;span class=&#34;built_in&#34;&gt;end&lt;/span&gt;(), integers.&lt;span class=&#34;built_in&#34;&gt;begin&lt;/span&gt;(), integers.&lt;span class=&#34;built_in&#34;&gt;end&lt;/span&gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    std::vector&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; m_vecIntegers;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
 可见， &lt;code&gt;std::initializer_list&amp;lt;T&amp;gt;&lt;/code&gt;  是可以视为一个容器，它的模板参数是初始化列表中的元素类型。 &lt;code&gt;std::initializer_list&amp;lt;T&amp;gt;&lt;/code&gt;  是一个轻量级的容器，它只提供了最基本的功能，没有提供像 &lt;code&gt;std::vector&lt;/code&gt;  那样的复杂功能。 &lt;code&gt;std::initializer_list&amp;lt;T&amp;gt;&lt;/code&gt;  的主要作用是用于初始化列表，它的构造函数接受一个初始化列表，然后将初始化列表中的元素拷贝到 &lt;code&gt;std::initializer_list&amp;lt;T&amp;gt;&lt;/code&gt;  对象中。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;类成员初始化：&lt;br&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;MyClass&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   string initS&amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;quot;init&amp;quot;&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
 但仍然建议将类成员的初始化放在构造函数中，这样更加清晰。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;服务器与事件驱动模型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#服务器与事件驱动模型&#34;&gt;#&lt;/a&gt; 服务器与事件驱动模型&lt;/h2&gt;
&lt;p&gt;在了解事件驱动模型之前，我们先要了解如何能够自由的注册各种事件，并且能识别捕捉到到来的事件类型。这里使用 Channel 的概念，Channel 本质上是对监听的 fd 以及其注册的 epoll event 事件的封装。epoll wait 返回的事件列表中只有一个个的待处理的 fd，我们需要对这些 fd 注册的事件或者别的信息进行记录，不能仅仅通过 fd 来区分不同的事件。Channel 类可以使用这些信息进行回调函数的处理。&lt;/p&gt;
&lt;p&gt;服务器监听 epoll 上的事件，对不同的事件类型进行不同的处理。这种思想就是事件驱动。这里可以引出服务器开发的两种重要的经典模式：Reactor 模式和 Proactor 模式。这两个模式在后续会继续进行讲解。&lt;/p&gt;
&lt;p&gt;由于笔者偏向于 Linux 服务器开发，针对 Linux 的系统 api，Reactor 模式更加适合，下面首先对 Reactor 模式进行讲解。&lt;/p&gt;
&lt;h3 id=&#34;reactor模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#reactor模式&#34;&gt;#&lt;/a&gt; Reactor 模式&lt;/h3&gt;
&lt;p&gt;Reactor 的翻译是反应堆，顾名思义，就是对事件的反应，也就是有事件 incoming，Reactor 就会对其做出反应，将事件分配给可用的进程进行使用。因此 Reactor 模式由两个部分组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reactor：负责监听事件，当事件到来时，将事件分发给对应的处理程序。也就是观察者&lt;/li&gt;
&lt;li&gt;Handler：负责处理资源池处理事件&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cpp17-三大使用注解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cpp17-三大使用注解&#34;&gt;#&lt;/a&gt; cpp17 三大使用注解&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;[[fallthrough]]&lt;/code&gt; &lt;br&gt;
 用于 switch-case 语句中，当某个 case 分支执行完毕后如果没有 break 语句，此时可能是开发者有意为之，即所谓击穿操作，这时可在此处显示标记 &lt;code&gt;[[fallthrough]]&lt;/code&gt; ，编译器不会报错。&lt;br&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cout &amp;lt;&amp;lt; &lt;span class=&#34;string&#34;&gt;&amp;quot;case 1&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; endl;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [[fallthrough]];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;[[nodiscard]]&lt;/code&gt; &lt;br&gt;
 用于函数声明，表示函数的返回值不应该被忽略。&lt;br&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;[[nodiscard]] &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;[[maybe_unused]]&lt;/code&gt; &lt;br&gt;
 函数参数声明前置该注解时，表示该参数可能不会被使用，编译器不会报警告。&lt;br&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;([[maybe_unused]] &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; a)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cout &amp;lt;&amp;lt; &lt;span class=&#34;string&#34;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; endl;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;finaloverridedefaultdelete-auto语法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#finaloverridedefaultdelete-auto语法&#34;&gt;#&lt;/a&gt; final/override/=default/=delete auto 语法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;final：final 关键字修饰一个类，表示该类不允许被继承。&lt;br&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Base&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;override: override 关键字修饰一个函数，表示该函数是一个虚函数，用于覆盖基类的虚函数。子类将强制检查子类中是否重写 override 标记的虚函数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;=default：在 h 头文件中简化默认构造函数的写法。而且在 cpp 文件中无需再次编写&lt;br&gt;
 &lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;MyClass&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;MyClass&lt;/span&gt;() = &lt;span class=&#34;keyword&#34;&gt;default&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;=delete: 和 = default 相反，=delete 用于禁止编译器自动生成构造函数、析构函数、拷贝构造函数。&lt;br&gt;
比如我们想要一个类不允许被拷贝构造：&lt;br&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;MyClass&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;MyClass&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; MyClass&amp;amp;) = &lt;span class=&#34;keyword&#34;&gt;delete&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        MyClass&amp;amp; &lt;span class=&#34;keyword&#34;&gt;operator&lt;/span&gt;=(&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; MyClass&amp;amp;) = &lt;span class=&#34;keyword&#34;&gt;delete&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
 在工具类中，可以使用 delete 来禁止四大函数的生成，减少编译时间和可执行文件的大小。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;auto 关键字&lt;br&gt;
 auto 用于编译器去推导变量的类型，可以减少开发者的心智成本，减少码字量。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;range-based循环语法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#range-based循环语法&#34;&gt;#&lt;/a&gt; Range-based 循环语法&lt;/h2&gt;
&lt;p&gt;&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;auto&lt;/span&gt;&amp;amp; i : vec) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; endl;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
 对于复杂的数据结构，希望尽量使用这种引用原始数据的方式，防止调用拷贝函数带来的时空开销。&lt;/p&gt;
&lt;p&gt;如何让自定义的类对象也能支持 range-based 循环呢？只需要重载 begin () 和 end () 函数即可。begin 和 end 函数返回迭代对象 Iterator，Iterator 类型需要支持 ++、!=、* 操作。&lt;/p&gt;
&lt;p&gt;C++17 标准对于 for-each 的定义如下&lt;br&gt;
 &lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;auto&lt;/span&gt; &amp;amp;&amp;amp; __range = &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;-range-initializer;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;auto&lt;/span&gt; __begin = begin-expr;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;auto&lt;/span&gt; __end = end-expr;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; ( ; __begin != __end; ++__begin ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;     &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;-range-declaration = *__begin;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;     statement;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;7&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
begin 和 end 可以是不同类型，但要满足可比较性，即 begin 和 end 的类型要支持！= 操作。&lt;/p&gt;
&lt;h2 id=&#34;c17结构化绑定-structured-binding&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#c17结构化绑定-structured-binding&#34;&gt;#&lt;/a&gt; C++17 结构化绑定 Structured Binding&lt;/h2&gt;
&lt;p&gt;语法：&lt;br&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;auto&lt;/span&gt; [a, b, ...] = expression;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;auto&lt;/span&gt;&amp;amp; [a, b, ...] = expression;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;auto&lt;/span&gt;&amp;amp; [a, b, ...] = expression;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
 同样为了减少不必要的拷贝开销，尽量使用引用。结构化绑定可以让我们更加优雅的方式去遍历容器。注意结构化绑定不能被 binging 到 constexpr 和 static 上。&lt;/p&gt;
&lt;h2 id=&#34;stl容器新增的实用方法介绍&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#stl容器新增的实用方法介绍&#34;&gt;#&lt;/a&gt; stl 容器新增的实用方法介绍&lt;/h2&gt;
&lt;h3 id=&#34;1-原位构造函数emplace_back系列函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-原位构造函数emplace_back系列函数&#34;&gt;#&lt;/a&gt; 1. 原位构造函数 emplace_back 系列函数&lt;/h3&gt;
&lt;p&gt;在向容器中推入元素时，如果元素是某个类的对象，因为 push 方法通常需要拷贝临时变量，这样会导致大量拷贝构造和析构函数被调用。我们希望直接将创建的元素直接放入容器，这是就需要 emplace_back 方法。&lt;br&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;vector&amp;lt;Test&amp;gt; vec;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;vec.&lt;span class=&#34;built_in&#34;&gt;emplace_back&lt;/span&gt;(argv1, ...); &lt;span class=&#34;comment&#34;&gt;//argvn为Test类的构造函数参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-stdmap的try_emplace与insert_or_assign方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-stdmap的try_emplace与insert_or_assign方法&#34;&gt;#&lt;/a&gt; 2. std::map 的 try_emplace 与 insert_or_assign 方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;try_emplace：尝试插入一个元素，如果元素已经存在，则不插入，返回一个 pair，第一个元素是指向元素的迭代器，第二个元素是 bool 值，表示是否插入成功。&lt;br&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt;... Args&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;pair&amp;lt;iterator, &lt;span class=&#34;type&#34;&gt;bool&lt;/span&gt;&amp;gt; &lt;span class=&#34;title&#34;&gt;try_emplace&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; key_type&amp;amp; k, Args&amp;amp;&amp;amp;... args)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt;... Args&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;pair&amp;lt;iterator, &lt;span class=&#34;type&#34;&gt;bool&lt;/span&gt;&amp;gt; &lt;span class=&#34;title&#34;&gt;try_emplace&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(key_type&amp;amp;&amp;amp; k, Args&amp;amp;&amp;amp;... args)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt;... Args&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;iterator &lt;span class=&#34;title&#34;&gt;try_emplace&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(const_iterator hint, &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; key_type&amp;amp; k, Args&amp;amp;&amp;amp;... args)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt;... Args&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;iterator &lt;span class=&#34;title&#34;&gt;try_emplace&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(const_iterator hint, key_type&amp;amp;&amp;amp; k, Args&amp;amp;&amp;amp;... args)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
 参数 k 表示需要插入的 key，args 参数是不定参数，表示构造 value 对象需要传递该构造函数的参数，hint 表示插入的位置。前两种签名方式中，try_emplace 返回 &lt;code&gt;pair&amp;lt;T1, T2&amp;gt;&lt;/code&gt;  其中 T2 是一个 bool 类型表示元素是否成功插入 map 中，T1 是一个 map 的迭代器，如果插入成功，则返回指向插入位置的元素的迭代器，如果插入失败，则返回 map 中已存在的相同 key 元素的迭代器。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意：try_emplace 方法的第二个参数只允许创建对象，而不是对象指针。如果容器声明中存在值为指针的元素，使用 try_emplace 方法时，返回的 iter 的 second 的值为空指针。这时候需要将声明中的裸指针改为智能指针，将智能指针传入 try_emplace 方法，并且在调用时创建新的智能指针并将其所有权转移给 iter-&amp;gt;second 即可接收到指针对象。&lt;/p&gt;
&lt;h2 id=&#34;抛弃裸指针拥抱智能指针&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#抛弃裸指针拥抱智能指针&#34;&gt;#&lt;/a&gt; 抛弃裸指针，拥抱智能指针！&lt;/h2&gt;
&lt;p&gt;C++11 中引入三种类型的智能指针：unique_ptr shared_ptr weak_ptr。&lt;/p&gt;
&lt;h3 id=&#34;1-unique_ptr&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-unique_ptr&#34;&gt;#&lt;/a&gt; 1 unique_ptr&lt;/h3&gt;
&lt;p&gt;unique_ptr 是一个独占所有权的智能指针，它禁止拷贝和赋值，只能通过移动语义来转移所有权。unique_ptr 对其指向的堆具有唯一拥有权，也就是引用计数永远是 1，类似于 rust 的 Box 智能指针。&lt;br&gt;
使用：&lt;br&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;std::unique_ptr&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; p = std::&lt;span class=&#34;built_in&#34;&gt;make_unique&lt;/span&gt;&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt;(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;std::unique_ptr&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&#34;title&#34;&gt;pvec&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(std::make_unique&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;[]&amp;gt;(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;))&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
unique_ptr 禁止复制语义，只能使用移动拷贝构造来转移所有权。&lt;br&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;std::unique_ptr&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; p1 = std::&lt;span class=&#34;built_in&#34;&gt;make_unique&lt;/span&gt;&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt;(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;std::unique_ptr&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; p2 = std::&lt;span class=&#34;built_in&#34;&gt;move&lt;/span&gt;(p1);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
 使用 std::move 将 sp1 持有的堆内存转移给 sp2，此时 p1 变为空的智能指针。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;自定义智能指针对象持有资源释放函数&lt;/strong&gt;&lt;br&gt;
 &lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;auto&lt;/span&gt; deletor = [](Socket* pSock) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 释放资源&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    pSocket-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;close&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;delete&lt;/span&gt; pSocket;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;std::unique_ptr&amp;lt;Socket, &lt;span class=&#34;title&#34;&gt;decltype&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(deletor)&lt;/span&gt;&amp;gt; &lt;span class=&#34;title&#34;&gt;pSock&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Socket(), deletor)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
decltype 是让编译器自己推导 deletor 的类型&lt;/p&gt;
&lt;h3 id=&#34;2-shared_ptr&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-shared_ptr&#34;&gt;#&lt;/a&gt; 2 shared_ptr&lt;/h3&gt;
&lt;p&gt;相比于 unique_ptr 的所有权独占，shared_ptr 是一个共享所有权的智能指针，它使用引用计数来管理资源的生命周期。shared_ptr 允许多个 shared_ptr 指向同一个堆内存，当最后一个 shared_ptr 被销毁时，引用计数为 0，堆内存被释放。类似于 rust 的 arc 智能指针。&lt;/p&gt;
&lt;p&gt;初始化：&lt;br&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;std::share_ptr&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt;sp = std::&lt;span class=&#34;built_in&#34;&gt;make_shared&lt;/span&gt;&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt;(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;std::share_ptr&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt;&lt;span class=&#34;built_in&#34;&gt;spc&lt;/span&gt;(sp); &lt;span class=&#34;comment&#34;&gt;//10的引用计数加1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;enable_shared_from_this&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;实际开发中，有时候需要在类中返回包裹当前对象（this）的一个 std::shared_ptr 对象给外部使用，C++ 新标准也为我们考虑到了这一点，有如此需求的类只要继承自 **std::enable_shared_from_this&amp;lt;T&amp;gt;** 模板对象即可。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;memory&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;A&lt;/span&gt; : &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; std::enable_shared_from_this&amp;lt;A&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;A&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        std::cout &amp;lt;&amp;lt; &lt;span class=&#34;string&#34;&gt;&amp;quot;A constructor&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::endl;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ~&lt;span class=&#34;built_in&#34;&gt;A&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        std::cout &amp;lt;&amp;lt; &lt;span class=&#34;string&#34;&gt;&amp;quot;A destructor&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::endl;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;std::shared_ptr&amp;lt;A&amp;gt; &lt;span class=&#34;title&#34;&gt;getSelf&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;shared_from_this&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;std::shared_ptr&amp;lt;A&amp;gt; &lt;span class=&#34;title&#34;&gt;sp1&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; A())&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    std::shared_ptr&amp;lt;A&amp;gt; sp2 = sp1-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;getSelf&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    std::cout &amp;lt;&amp;lt; &lt;span class=&#34;string&#34;&gt;&amp;quot;use count: &amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; sp1.&lt;span class=&#34;built_in&#34;&gt;use_count&lt;/span&gt;() &amp;lt;&amp;lt; std::endl;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在使用 share_ptr 的时候存在一些使用上的陷阱：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不应该将智能指针指向栈上的对象，智能指针本质上是为了管理堆上的资源。&lt;/li&gt;
&lt;li&gt;循环引用：两个对象互相持有对方的 shared_ptr，导致引用计数永远不为 0，内存泄漏。比如 shared_from_this 循环引用，对象持有对自己的 shared_ptr，导致引用计数永远不为 0，进而导致对象无法被析构，内存泄漏。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;解决办法是：对象自身持有对自己的 weak_ptr。&lt;/p&gt;
&lt;h3 id=&#34;3-weak_ptr&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-weak_ptr&#34;&gt;#&lt;/a&gt; 3 weak_ptr&lt;/h3&gt;
&lt;p&gt;weak_ptr 可以从 share_ptr 降级而来，也可以从另一个 weak_ptr 拷贝而来。weak_ptr 不会增加引用计数，它是为了解决循环引用问题而设计的。weak_ptr 不会增加引用计数，当最后一个 shared_ptr 被销毁时，堆内存被释放，weak_ptr 指向的对象变成空指针。&lt;/p&gt;
&lt;p&gt;调用 &lt;code&gt;weak_ptr.lock()&lt;/code&gt;  获得 shared_ptr 对象操作资源。因为 weak_ptr 不能直接调用对象的成员函数，需要先将 weak_ptr 转换为 shared_ptr，也不能直接使用解引用判断所指资源存不存在。&lt;/p&gt;
&lt;p&gt;weak_ptr 适合使用在资源可用时使用，不可用时不用的场景。比如：网络分层结构中，Session 对象（会话对象）利用 Connection 对象（连接对象）提供的服务来进行工作，但是 Session 对象不管理 Connection 对象的生命周期，Session 管理 Connection 的生命周期是不合理的，因为网络底层出错会导致 Connection 对象被销毁，此时 Session 对象如果强行持有 Connection 对象则与事实矛盾。&lt;/p&gt;
&lt;p&gt;std::weak_ptr 的应用场景，经典的例子是订阅者模式或者观察者模式中。这里以订阅者为例来说明，消息发布器只有在某个订阅者存在的情况下才会向其发布消息，而不能管理订阅者的生命周期。&lt;/p&gt;
&lt;h3 id=&#34;智能指针的使用注意事项&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#智能指针的使用注意事项&#34;&gt;#&lt;/a&gt; 智能指针的使用注意事项&lt;/h3&gt;
&lt;p&gt;C&lt;ins&gt; 新标准提倡的理念之一是不应该再手动调用 delete 或者 free 函数去释放内存了，而应该把它们交给新标准提供的各种智能指针对象。C&lt;/ins&gt; 新标准中的各种智能指针是如此的实用与强大，在现代 C++ 项目开发中，读者应该尽量去使用它们。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;一旦一个对象使用智能指针管理后，就不该再使用原始裸指针去操作；&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;** 分清楚场合应该使用哪种类型的智能指针；** 通常情况下，如果你的资源不需要在其他地方共享，那么应该优先使用 std::unique_ptr，反之使用 std::shared_ptr，当然这是在该智能指针需要管理资源的生命周期的情况下；如果不需要管理对象的生命周期，请使用 std::weak_ptr。&lt;/li&gt;
&lt;li&gt;** 认真考虑，避免操作某个引用资源已经释放的智能指针；** 前面的例子，一定让读者觉得非常容易知道一个智能指针持有的资源是否还有效，但还是建议在不同场景谨慎一点，有些场景是很容易造成误判的。&lt;/li&gt;
&lt;li&gt;作为类成员变量时，应该优先使用前置声明（forward declarations）&lt;br&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//Test.h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//在这里使用A的前置声明，而不是直接包含A.h文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;A&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Test&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;Test&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ~&lt;span class=&#34;built_in&#34;&gt;Test&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    A*      m_pA;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
 同样的道理，在头文件中当使用智能指针对象作为类成员变量时，也应该优先使用前置声明去引用智能指针对象的包裹类，而不是直接包含包裹类的头文件。&lt;br&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//Test.h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;memory&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//智能指针包裹类A，这里优先使用A的前置声明，而不是直接包含A.h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;A&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Test&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;Test&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ~&lt;span class=&#34;built_in&#34;&gt;Test&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt;:  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    std::unique_ptr&amp;lt;A&amp;gt;  m_spA;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;c多线程从入门到入土&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#c多线程从入门到入土&#34;&gt;#&lt;/a&gt; C++ 多线程从入门到入土&lt;/h1&gt;
&lt;p&gt;多线程编程的原因无非就是使多核技术得到充分利用，提高程序性能。多核编程能力不仅仅是后台开发需要的基本功，更是所有软件开发需要的基本功，锤炼自己的多线程编程能力，至关重要！&lt;/p&gt;
&lt;h2 id=&#34;1-thread-basic-concept&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-thread-basic-concept&#34;&gt;#&lt;/a&gt; 1 thread basic concept&lt;/h2&gt;
&lt;p&gt;线程是在进程中创建的，进程是执行一个程序的基本环境，拥有自己的地址空间和上下文堆栈。而线程是进程的实际执行执行单元，进程默认至少有一个线程，即主线程。同时进程可以创建多个线程，这些线程和主线程共享进程的地址空间和上下文堆栈。&lt;/p&gt;
&lt;p&gt;在 window 系统中，主线程如果执行完毕，此时仍有支线程没有执行完毕，支线程会被强制退出。解决方案就是主线程在推出前需要检查创建的支线程有没有全部执行完毕，如果没有，主线程需要等待支线程执行完毕后再退出。&lt;/p&gt;
&lt;p&gt;在 Linux 系统中，主线程退出后，支线程不会被强制退出，支线程会继续执行。这是因为 Linux 系统中，主线程和支线程是平等的，没有主次之分。但是如果主线程退出，支线程会变成孤儿线程（僵尸线程），这时候支线程会被 init 进程接管，init 进程会回收孤儿线程的资源。实际开发中要尽可能避免孤儿线程的出现。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;提问：当某个线程崩溃，会对其他线程产生影响吗？&lt;/strong&gt;&lt;br&gt;
每个线程都是独立执行的单位，每个线程有自己的上下文堆栈，所以某个线程的崩溃不会对其他线程造成影响。但是线程的崩溃会产生一个 Segment Fault 错误，这个错误会发出一个信号，系统捕捉这个信号的回调函数就是结束整个进程，其他的正常工作的线程也会被强制退出。&lt;/p&gt;
&lt;h2 id=&#34;2-cpp-并发教程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-cpp-并发教程&#34;&gt;#&lt;/a&gt; 2 cpp 并发教程&lt;/h2&gt;
&lt;h3 id=&#34;21-线程的创建&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#21-线程的创建&#34;&gt;#&lt;/a&gt; 2.1 线程的创建&lt;/h3&gt;
&lt;p&gt;在开始多线程编程之前，首先要了解自己所使用的多线程库如何创建线程。这里&lt;/p&gt;
&lt;h4 id=&#34;linux线程创建&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#linux线程创建&#34;&gt;#&lt;/a&gt; Linux 线程创建。&lt;/h4&gt;
&lt;p&gt;api：pthread_create&lt;br&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;pthread_create&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;pthread_t&lt;/span&gt; *thread,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;                   &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;pthread_attr_t&lt;/span&gt; *attr,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;                   &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; *(*start_routine) (&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; *),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;                   &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; *arg)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;thread：指向线程标识符的指针，线程标识符是线程的唯一标识，用于操作线程。&lt;/li&gt;
&lt;li&gt;attr: 指定该线程的属性，一般设置为 NULL，表示使用默认属性。&lt;/li&gt;
&lt;li&gt;start_routine：线程的入口函数，线程创建后会执行该函数。注意这个函数的调用必须是 &lt;code&gt;**_cdecl&lt;/code&gt;  调用约定，这是函数定义的默认方式。&lt;br&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt;* __cdecl &lt;span class=&#34;title&#34;&gt;start_routine&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt;* args)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;arg：传递给线程入口函数的参数。&lt;/li&gt;
&lt;li&gt;返回值：如果成功创建线程，返回 0；创建失败会返回错误码&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;cpp11提供的stdthread&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cpp11提供的stdthread&#34;&gt;#&lt;/a&gt; Cpp11 提供的 std::thread&lt;/h4&gt;
&lt;p&gt;std::thread 是 C++11 标准库提供的线程库，使用 std::thread 创建线程非常方便，不需要关心线程的属性，只需要传入线程入口函数和参数即可。不用向 linux 线程一样需要自定义大量的参数和属性。&lt;/p&gt;
&lt;p&gt;在使用 thread 库时需要注意线程对象需要在线程退出前保持有效（保持有效的意思就是不能被释放）。如何解决呢？thread 库提供 detach 方法，这个方法会让线程对象与线程函数脱离关系。&lt;br&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;std::thread &lt;span class=&#34;title&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(thread_func)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    t.&lt;span class=&#34;built_in&#34;&gt;detach&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;但是不希望这么做，因为我们在主线程还希望通过 t 去操作管理线程的运行和生命周期。&lt;/p&gt;
&lt;h3 id=&#34;22-线程id&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#22-线程id&#34;&gt;#&lt;/a&gt; 2.2 线程 ID&lt;/h3&gt;
&lt;h2 id=&#34;cpp使用现代特性避免使用虚函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cpp使用现代特性避免使用虚函数&#34;&gt;#&lt;/a&gt; Cpp 使用现代特性避免使用虚函数&lt;/h2&gt;
&lt;h3 id=&#34;线程池添加任务并获取返回值代码剖析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#线程池添加任务并获取返回值代码剖析&#34;&gt;#&lt;/a&gt; 线程池添加任务并获取返回值代码剖析&lt;/h3&gt;
&lt;p&gt;&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; F, &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt;... Args&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ThreadPool::add&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(F&amp;amp;&amp;amp; f, Args&amp;amp;&amp;amp;... args)&lt;/span&gt; -&amp;gt; std::future&amp;lt;&lt;span class=&#34;keyword&#34;&gt;typename&lt;/span&gt; std::result_of&amp;lt;&lt;span class=&#34;title&#34;&gt;F&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Args...)&lt;/span&gt;&amp;gt;::type&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; return_type = &lt;span class=&#34;keyword&#34;&gt;typename&lt;/span&gt; std::result_of&amp;lt;&lt;span class=&#34;built_in&#34;&gt;F&lt;/span&gt;(Args...)&amp;gt;::type;  &lt;span class=&#34;comment&#34;&gt;//返回值类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;auto&lt;/span&gt; task = std::make_shared&amp;lt; std::packaged_task&amp;lt;&lt;span class=&#34;built_in&#34;&gt;return_type&lt;/span&gt;()&amp;gt; &amp;gt;(  &lt;span class=&#34;comment&#34;&gt;//使用智能指针&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            std::&lt;span class=&#34;built_in&#34;&gt;bind&lt;/span&gt;(std::forward&amp;lt;F&amp;gt;(f), std::forward&amp;lt;Args&amp;gt;(args)...)  &lt;span class=&#34;comment&#34;&gt;//完美转发参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        );  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    std::future&amp;lt;return_type&amp;gt; res = task-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;get_future&lt;/span&gt;();  &lt;span class=&#34;comment&#34;&gt;// 使用期约&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;   &lt;span class=&#34;comment&#34;&gt;//队列锁作用域&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;function&#34;&gt;std::unique_lock&amp;lt;std::mutex&amp;gt; &lt;span class=&#34;title&#34;&gt;lock&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(tasks_mtx)&lt;/span&gt;&lt;/span&gt;;   &lt;span class=&#34;comment&#34;&gt;//加锁&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(stop)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; std::&lt;span class=&#34;built_in&#34;&gt;runtime_error&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;enqueue on stopped ThreadPool&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        tasks.&lt;span class=&#34;built_in&#34;&gt;emplace&lt;/span&gt;([task]()&amp;#123; (*task)(); &amp;#125;);  &lt;span class=&#34;comment&#34;&gt;//将任务添加到任务队列&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cv.&lt;span class=&#34;built_in&#34;&gt;notify_one&lt;/span&gt;();    &lt;span class=&#34;comment&#34;&gt;//通知一次条件变量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; res;     &lt;span class=&#34;comment&#34;&gt;//返回一个期约&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;函数模板&lt;br&gt;
 &lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; F, &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt;... Args&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ThreadPool::add&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(F&amp;amp;&amp;amp; f, Args&amp;amp;&amp;amp;... args)&lt;/span&gt; -&amp;gt; std::future&amp;lt;&lt;span class=&#34;keyword&#34;&gt;typename&lt;/span&gt; std::result_of&amp;lt;&lt;span class=&#34;title&#34;&gt;F&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Args...)&lt;/span&gt;&amp;gt;::type&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
 函数模板定义可以接收调用对象和参数集合，F 可以是函数，函数对象，lambda 表达式等，Args 是参数集合。返回值是一个期约，期约是一个异步操作的结果，可以通过 get 方法获取异步操作的结果。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;返回类型 后置返回类型&lt;br&gt;
 &lt;code&gt;std::result_of&amp;lt;F(Args...)&amp;gt;::type&lt;/code&gt; &lt;br&gt;
 这是 C++11 中的类型萃取工具，用于推导 F 的调用结果类型。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;例如，如果 F 是一个函数 int foo (int)，且 Args... 是 (int)，那么 std::result_of&amp;lt;F (Args...)&amp;gt;::type 是 int。&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;创建任务对象&lt;br&gt;
 &lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;auto&lt;/span&gt; task = std::make_shared&amp;lt;std::packaged_task&amp;lt;&lt;span class=&#34;built_in&#34;&gt;return_type&lt;/span&gt;()&amp;gt;&amp;gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    std::&lt;span class=&#34;built_in&#34;&gt;bind&lt;/span&gt;(std::forward&amp;lt;F&amp;gt;(f), std::forward&amp;lt;Args&amp;gt;(args)...)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
 这里使用 std::packaged_task 包装任务，std::packaged_task 是一个模板类，它可以包装一个可调用对象，允许其返回值与 future 相关联，然后通过 std::future 来获取该可调用对象的返回值。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;std::forward&lt;/code&gt;  完美转发，避免不必要的拷贝&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[task]()&amp;#123; (*task)(); &amp;#125;&lt;/code&gt; ：lambda 表达式，用于捕捉函数闭包，捕获变量 task，传入到 lambda 中。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://smallcjy.github.io/2024/10/25/dragonOS_unix_socket%E6%96%87%E6%A1%A3/</guid>
            <title>unix socket文档</title>
            <link>http://smallcjy.github.io/2024/10/25/dragonOS_unix_socket%E6%96%87%E6%A1%A3/</link>
            <category term="DragonOS" scheme="http://smallcjy.github.io/tags/DragonOS/" />
            <pubDate>Fri, 25 Oct 2024 23:22:57 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;unix&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#unix&#34;&gt;#&lt;/a&gt; unix&lt;/h1&gt;
&lt;h2 id=&#34;unix-socket&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#unix-socket&#34;&gt;#&lt;/a&gt; unix socket&lt;/h2&gt;
&lt;p&gt;unix - 用于进程间通信的 socket&lt;/p&gt;
&lt;h2 id=&#34;描述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#描述&#34;&gt;#&lt;/a&gt; 描述&lt;/h2&gt;
&lt;p&gt;AF_UNIX socket family 用于在同一台机器中的不同进程之间的通信（IPC）。unix socket 地址现支持绑定文件地址，未支持绑定 abstract namespace 抽象命名空间。&lt;/p&gt;
&lt;p&gt;目前 unix 域中合法的 socket type 有：SOCK_STREAM, 提供 stream-oriented socket，可靠有序传输消息；SOCK_SEQPACKET，提供 connection-oriented，消息边界和按发送顺序交付消息保证的 socket。&lt;/p&gt;
&lt;h3 id=&#34;unix-stream-socket-进程通信描述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#unix-stream-socket-进程通信描述&#34;&gt;#&lt;/a&gt; unix stream socket 进程通信描述&lt;/h3&gt;
&lt;p&gt;unix stream socket 提供进程间流式传输消息的功能。假设对端进程作为服务端，本端进程作为客户端。进程间使用 stream socket 通信过程如下：&lt;/p&gt;
&lt;p&gt;分别在对端进程和本端进程创建 socket，服务端需要 bind 地址，客户端不必须 bind 地址。通信过程类似 tcp 三次握手流程：服务端调用 listen 系统调用进入监听状态，监听服务端 bind 的地址；客户端调用 connect 系统调用连接服务端地址；服务端调用 accept 系统调用接受来自客户端的连接，返回建立连接的新的 socket。成功建立连接后可以调用 write\send\sendto\sendmsg 进行写操作，调用 read\recv\recvfrom\recvmsg 进行读操作。目前尚未支持非阻塞式读写，默认为阻塞式读写。读写完毕后调用 close 系统调用关闭 socket 连接。&lt;/p&gt;
&lt;h3 id=&#34;unix-seqpacket-socket-进程通信描述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#unix-seqpacket-socket-进程通信描述&#34;&gt;#&lt;/a&gt; unix seqpacket socket 进程通信描述&lt;/h3&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://smallcjy.github.io/2024/10/24/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/</guid>
            <title>算法刷题心得</title>
            <link>http://smallcjy.github.io/2024/10/24/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/</link>
            <category term="编程经验" scheme="http://smallcjy.github.io/tags/%E7%BC%96%E7%A8%8B%E7%BB%8F%E9%AA%8C/" />
            <category term="求职" scheme="http://smallcjy.github.io/tags/%E6%B1%82%E8%81%8C/" />
            <pubDate>Thu, 24 Oct 2024 19:30:31 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;前言&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前言&#34;&gt;#&lt;/a&gt; 前言&lt;/h2&gt;
&lt;p&gt;本心得会将常见的算法解题思路按模块进行拆分讲解。模块分别是：双指针、链表、二叉树、回溯、二分查找、栈堆、贪心、动态规划、图论。斯认为新接触到一道算法题时，可以尝试将其识别为某模块的题目，应用相应模块的通用解法进行解题。但具体问题具体分析，通用解法只是提供一个启发，需要我们在不断的刷题中磨砺手感和技巧。&lt;/p&gt;
&lt;p&gt;本帖持续更新&lt;/p&gt;
&lt;h2 id=&#34;回溯算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#回溯算法&#34;&gt;#&lt;/a&gt; 回溯算法&lt;/h2&gt;
&lt;p&gt;回溯算法本质上是暴力穷举算法，和我们常见的深度搜索算法 DFS 算法非常相似。DFS 算法会放在二叉树或者图论进行深入的讲解，这里不做过多的介绍。有一句话我认为解读的非常到位，回溯是纵向遍历，for 是横向遍历。for 遍历我们非常熟悉，比如现在有一个二维数组 &lt;code&gt;&amp;#123;&amp;#123;1234&amp;#125;，&amp;#123;1234&amp;#125;，&amp;#123;1234&amp;#125;，&amp;#123;1234&amp;#125;&amp;#125;&lt;/code&gt; 。for 循环遍历该数组结果就是 &lt;code&gt;1234123412341234&lt;/code&gt; 。那如果是回溯遍历呢，那就是 &lt;code&gt;1111222233334444&lt;/code&gt; ，这就是纵向遍历。使用回溯遍历解决的问题，可以称为回溯问题。回溯问题一般可以抽象为一颗决策树，决策树的叶子节点存放着一个合法答案，如何得到这个叶子节点呢，就是进行纵向搜索。&lt;/p&gt;
&lt;p&gt;设计一个回溯算法需要解决三个问题，称为回溯三要素：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;递归函数参数&lt;/li&gt;
&lt;li&gt;递归终止条件&lt;/li&gt;
&lt;li&gt;单层搜索逻辑&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这里先给出回溯算法的模版：&lt;br&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;vector&amp;lt;vector&amp;lt;T&amp;gt;&amp;gt; result;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;vector&amp;lt;T&amp;gt; path;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;backtrace&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(..., path, result)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;bool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        result.&lt;span class=&#34;built_in&#34;&gt;push_back&lt;/span&gt;(path);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; 选择 in 选择列表 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        判断是否是想要的、做决策&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;backtrace&lt;/span&gt;(..., path, result);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        撤销决策&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;什么叫做决策呢？这里需要根据不同的题目进行具体问题具体分析。这里做的事情其实就是更新 path，path 记录了部分符合需求的数据，但还没达到要求，需要再做决策这里进行实时更新。&lt;/p&gt;
&lt;p&gt;撤销选择体现了回溯的根本理念。为了找到所有符合情况的 path，需要对决策阶段做出的决策进行撤销，以防止影响到下一个选择的决策。&lt;/p&gt;
&lt;h2 id=&#34;二叉树&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二叉树&#34;&gt;#&lt;/a&gt; 二叉树&lt;/h2&gt;
&lt;h3 id=&#34;二叉树基础及其常见类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二叉树基础及其常见类型&#34;&gt;#&lt;/a&gt; 二叉树基础及其常见类型&lt;/h3&gt;
&lt;p&gt;二叉树的重要性将贯穿开发始终。很多实用且复杂的数据结构式基于二叉树的，比如红黑树（二叉搜索树）、多叉树、二叉堆、图、字典、并查集，二叉树是非常重要的基础。如果你想掌握上面的数据类型，掌握二叉树的重要性不言而喻。&lt;/p&gt;
&lt;p&gt;同时很多算法思想可以被抽象为二叉树。常见的是回溯算法、动态规划，其过程可以视为二叉树的深度遍历。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;满二叉树&lt;br&gt;
中间节点都有左右子节点。深度为 h 时，节点个数为 2^h - 1。&lt;/li&gt;
&lt;li&gt;完全二叉树&lt;br&gt;
满二叉树的普遍版，最后一层允许不满。常用于实现二叉堆。&lt;/li&gt;
&lt;li&gt;二叉搜索树（BST）&lt;br&gt;
对于每一个中间节点，所有左子节点小于根节点，所有右子节点大于根节点。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;二叉树的奇怪实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二叉树的奇怪实现&#34;&gt;#&lt;/a&gt; 二叉树的奇怪实现&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;数组储存二叉树：二叉堆和并查集&lt;/li&gt;
&lt;li&gt;哈希表： &lt;code&gt;unordered_map&amp;lt;int , vector&amp;lt;int&amp;gt;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;二叉树的遍历&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二叉树的遍历&#34;&gt;#&lt;/a&gt; 二叉树的遍历&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;递归遍历 DFS&lt;br&gt;
 根据递归函数的位置不同，可以产生前中后序遍历。&lt;br&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 二叉树的遍历框架&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;traverse&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(TreeNode* root)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (root == &lt;span class=&#34;literal&#34;&gt;nullptr&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 前序位置 输出程序位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;traverse&lt;/span&gt;(root-&amp;gt;left);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 中序位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;traverse&lt;/span&gt;(root-&amp;gt;right);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 后序位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;层序遍历（BFS）&lt;br&gt;
按层遍历，需要使用队列来实现。&lt;br&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 常见版本&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;levelOrderTraverse&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(TreeNode* root)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (root == &lt;span class=&#34;literal&#34;&gt;nullptr&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    queue&amp;lt;TreeNode*&amp;gt; q;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    q.&lt;span class=&#34;built_in&#34;&gt;push&lt;/span&gt;(root);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 记录当前遍历到的层数（根节点视为第 1 层）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; depth = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (!q.&lt;span class=&#34;built_in&#34;&gt;empty&lt;/span&gt;()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; sz = q.&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; sz; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            TreeNode* cur = q.&lt;span class=&#34;built_in&#34;&gt;front&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            q.&lt;span class=&#34;built_in&#34;&gt;pop&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 访问 cur 节点，同时知道它所在的层数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            cout &amp;lt;&amp;lt; &lt;span class=&#34;string&#34;&gt;&amp;quot;depth = &amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; depth &amp;lt;&amp;lt; &lt;span class=&#34;string&#34;&gt;&amp;quot;, val = &amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; cur-&amp;gt;val &amp;lt;&amp;lt; endl;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 把 cur 的左右子节点加入队列&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (cur-&amp;gt;left != &lt;span class=&#34;literal&#34;&gt;nullptr&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                q.&lt;span class=&#34;built_in&#34;&gt;push&lt;/span&gt;(cur-&amp;gt;left);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (cur-&amp;gt;right != &lt;span class=&#34;literal&#34;&gt;nullptr&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                q.&lt;span class=&#34;built_in&#34;&gt;push&lt;/span&gt;(cur-&amp;gt;right);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        depth++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;平衡二叉树&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#平衡二叉树&#34;&gt;#&lt;/a&gt; 平衡二叉树&lt;/h3&gt;
&lt;p&gt;平衡二叉树是一种特殊的二叉搜索树，其左右子树的高度差不超过 1。平衡二叉树的插入和删除操作会导致树的平衡性被破坏，需要通过旋转操作来维护平衡性。&lt;br&gt;
使用递归算法将有序数组转化为平衡二叉树。&lt;br&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;TreeNode* &lt;span class=&#34;title&#34;&gt;buildTree&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(vector&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; nums, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; left, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; right)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (left &amp;gt; right) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;nullptr&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; mid = left + (right - left) / &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    TreeNode* root = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;TreeNode&lt;/span&gt;(nums[mid]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    root-&amp;gt;left = &lt;span class=&#34;built_in&#34;&gt;buildTree&lt;/span&gt;(nums, left, mid - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    root-&amp;gt;right = &lt;span class=&#34;built_in&#34;&gt;buildTree&lt;/span&gt;(nums, mid + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, right);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; root;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;二叉树的神奇操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二叉树的神奇操作&#34;&gt;#&lt;/a&gt; 二叉树的神奇操作&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;二叉树的伸展&lt;br&gt;
要将二叉树伸展成链表，可以使用前序遍历的方法。具体步骤如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;如果当前节点为空，直接返回。&lt;/li&gt;
&lt;li&gt;如果当前节点有左子树，将左子树插入到右子树的位置。&lt;/li&gt;
&lt;li&gt;找到左子树的最右节点，将当前节点的右子树连接到这个最右节点的右子树上。&lt;/li&gt;
&lt;li&gt;将当前节点的左子树设为空。&lt;/li&gt;
&lt;li&gt;递归处理当前节点的右子树。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;伪代码如下：&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;function flatten(root):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if root is null:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if root.left is not null:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        // 将左子树插入到右子树的位置&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        temp = root.right&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        root.right = root.left&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        root.left = null&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        // 找到左子树的最右节点&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        current = root.right&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        while current.right is not null:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            current = current.right&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        // 将右子树连接到左子树的最右节点的右子树上&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        current.right = temp&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // 递归处理右子树&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    flatten(root.right)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这个算法的时间复杂度是 O (n)，其中 n 是二叉树的节点数。&lt;/p&gt;
&lt;h3 id=&#34;二叉树解题模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二叉树解题模式&#34;&gt;#&lt;/a&gt; 二叉树解题模式&lt;/h3&gt;
&lt;h2 id=&#34;数组&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数组&#34;&gt;#&lt;/a&gt; 数组&lt;/h2&gt;
&lt;h3 id=&#34;数组操作神器-双指针&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数组操作神器-双指针&#34;&gt;#&lt;/a&gt; 数组操作神器 --- 双指针&lt;/h3&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://smallcjy.github.io/2024/10/24/ubuntu%E6%B3%A8%E5%86%8C%E7%A8%8B%E5%BA%8F%E4%B8%BA%E6%9C%8D%E5%8A%A1/</guid>
            <title>ubuntu注册程序为服务</title>
            <link>http://smallcjy.github.io/2024/10/24/ubuntu%E6%B3%A8%E5%86%8C%E7%A8%8B%E5%BA%8F%E4%B8%BA%E6%9C%8D%E5%8A%A1/</link>
            <category term="编程经验" scheme="http://smallcjy.github.io/tags/%E7%BC%96%E7%A8%8B%E7%BB%8F%E9%AA%8C/" />
            <pubDate>Thu, 24 Oct 2024 13:30:31 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;ubuntu服务存放路径&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ubuntu服务存放路径&#34;&gt;#&lt;/a&gt; ubuntu 服务存放路径&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;/etc/systemd/system/myservice.service&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;服务文件配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#服务文件配置&#34;&gt;#&lt;/a&gt; 服务文件配置&lt;/h2&gt;
&lt;p&gt;&lt;figure class=&#34;highlight vim&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;[Unit]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Description=This &lt;span class=&#34;keyword&#34;&gt;is&lt;/span&gt; myservice&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[Service]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Type=simple&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ExecStart=/bin/bash -&lt;span class=&#34;keyword&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;/usr/bin/python /home/test.py&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Restart=&lt;span class=&#34;keyword&#34;&gt;on&lt;/span&gt;-failure&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[Install]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;WantedBy=multi-user.target&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;启动服务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#启动服务&#34;&gt;#&lt;/a&gt; 启动服务&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;sudo systemctl start myservice.service&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;服务开机自启&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#服务开机自启&#34;&gt;#&lt;/a&gt; 服务开机自启&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;sudo systemctl enable myservice.service&lt;/code&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://smallcjy.github.io/2024/10/21/docker%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE/</guid>
            <title>docker代理设置</title>
            <link>http://smallcjy.github.io/2024/10/21/docker%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE/</link>
            <category term="编程经验、运维" scheme="http://smallcjy.github.io/tags/%E7%BC%96%E7%A8%8B%E7%BB%8F%E9%AA%8C%E3%80%81%E8%BF%90%E7%BB%B4/" />
            <pubDate>Mon, 21 Oct 2024 23:22:57 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;docker-pull-代理设置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#docker-pull-代理设置&#34;&gt;#&lt;/a&gt; docker pull 代理设置&lt;/h2&gt;
&lt;p&gt;step1：修改 docker 配置文件&lt;br&gt;
 &lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo vim /etc/systemd/system/docker.service.d/http-proxy.conf&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
 修改内容如下：&lt;br&gt;
&lt;figure class=&#34;highlight vim&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;[Service]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Environment=&lt;span class=&#34;string&#34;&gt;&amp;quot;HTTP_PROXY=http://ip:7890&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Environment=&lt;span class=&#34;string&#34;&gt;&amp;quot;HTTPS_PROXY=http://ip:7890&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;ip 为宿主机的 ip，在每次 ip 更改时都需要修改。&lt;/p&gt;
&lt;p&gt;step2：重启 docker&lt;br&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo systemctl daemon-reload&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sudo systemctl restart docker&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://smallcjy.github.io/2024/10/10/9%E6%9C%88%E4%BB%BDOKR%E6%80%BB%E7%BB%93/</guid>
            <title>9月份OKR总结</title>
            <link>http://smallcjy.github.io/2024/10/10/9%E6%9C%88%E4%BB%BDOKR%E6%80%BB%E7%BB%93/</link>
            <category term="经验总结" scheme="http://smallcjy.github.io/tags/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/" />
            <pubDate>Thu, 10 Oct 2024 19:08:08 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;9月份okr工作内容介绍&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#9月份okr工作内容介绍&#34;&gt;#&lt;/a&gt; 9 月份 OKR 工作内容介绍&lt;/h2&gt;
&lt;p&gt;9 月份工作周期的开发内容主要是完成网络子系统中关于 unix stream socket 的重构。主线上的原版关于 unix stream socket 的实现有些简陋，没有那个握手过程还有状态转化，因此需要进行重构。目前基本上完成 stream socket 的重构，首先是重构了 stream socket 的设计，采用类似 tcp 状态机的设计来实现 stream socket，使其能够进行通信前的三次握手。然后在开发时也发现了一些新的需求，引入了一些新的设施来解决存在的问题，比如抽象出 Unix Socket Buffer，提高复用率和可扩展性；还有为了能够通过文件地址拿到 socket inode，适配 id 映射 socket 的哈希表；还有重构 unix 的 endpoint，使其能够记录 unix socket 绑定的地址等等。然后就是实现了 socket 的阻塞式读写，补齐了 socket 接口调用。目前是能通过测试程序，后续仍然需要进行进一步的开发，比如添加 unix 的虚拟抽象地址空间，支持 unix socket 的异步读写也就是非阻塞式读写等等。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://smallcjy.github.io/2024/10/09/rustActix/</guid>
            <title>rust actix learning note</title>
            <link>http://smallcjy.github.io/2024/10/09/rustActix/</link>
            <category term="编程经验" scheme="http://smallcjy.github.io/tags/%E7%BC%96%E7%A8%8B%E7%BB%8F%E9%AA%8C/" />
            <pubDate>Wed, 09 Oct 2024 16:29:44 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;前言&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前言&#34;&gt;#&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;由于微服务课程设计的需要，发帖记录 actix 的学习过程、笔记、心得。&lt;/p&gt;
&lt;h2 id=&#34;helloworld&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#helloworld&#34;&gt;#&lt;/a&gt; HelloWorld&lt;/h2&gt;
&lt;p&gt;万事开头 helloworld，首先我们来注册提个提供 helloworld 的 web 服务器。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://smallcjy.github.io/2024/09/23/202410OKR%E5%88%B6%E5%AE%9A/</guid>
            <title>2024十月份OKR制定</title>
            <link>http://smallcjy.github.io/2024/09/23/202410OKR%E5%88%B6%E5%AE%9A/</link>
            <category term="OKR" scheme="http://smallcjy.github.io/tags/OKR/" />
            <pubDate>Mon, 23 Sep 2024 20:51:07 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;network-benchmark-tool&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#network-benchmark-tool&#34;&gt;#&lt;/a&gt; network benchmark tool&lt;/h2&gt;
&lt;h2 id=&#34;unix-socket-abstract-address-space&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#unix-socket-abstract-address-space&#34;&gt;#&lt;/a&gt; unix socket abstract address space&lt;/h2&gt;
&lt;h2 id=&#34;进程基于channel的通信&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进程基于channel的通信&#34;&gt;#&lt;/a&gt; 进程基于 channel 的通信&lt;/h2&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://smallcjy.github.io/2024/09/23/%E5%BE%AE%E6%9C%8D%E5%8A%A1Learning/</guid>
            <title>microservice learning</title>
            <link>http://smallcjy.github.io/2024/09/23/%E5%BE%AE%E6%9C%8D%E5%8A%A1Learning/</link>
            <category term="microservice" scheme="http://smallcjy.github.io/tags/microservice/" />
            <pubDate>Mon, 23 Sep 2024 20:04:44 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;前言&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前言&#34;&gt;#&lt;/a&gt; 前言&lt;/h2&gt;
&lt;p&gt;将应用程序分解成多个微服务共同工作，为其提供服务，微服务部署在 contain 上，contain 部署在具有负载均衡的服务器上，不同微服务之间通过 api 进行调用。相较于单体应用，微服务在系统的 scale ability 上有更佳的表现。&lt;/p&gt;
&lt;h2 id=&#34;微服务简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#微服务简介&#34;&gt;#&lt;/a&gt; 微服务简介&lt;/h2&gt;
&lt;p&gt;微服务的死对头：单体应用。所谓知己知彼，百战百胜。要想透彻的了解微服务的诞生，必须要明白单体应用的架构，优缺点。&lt;/p&gt;
&lt;p&gt;Monolithic Application：所有功能模块整合在一个单一的代码库和部署单元中的应用程序，所有的组件都在一个系统中运行。&lt;/p&gt;
&lt;p&gt;最常见的单体应用框架，Spring Boot。单体应用架构中有 6 个模块：WEB_UI API MYSQL_ADAPTER TWILIO_ADAPTER SENDGRID_ADAPTER STRIPE_ADAPTER。&lt;/p&gt;
&lt;p&gt;这些模块定义了服务、领域对象和事件。围绕核心的与外部事件接口对接的适配器，包括数据库访问组件、生产和消费消息的消息组件暴露的 API。单体应用部署服务器常用的负载均衡模式是冗余，通过运行多个副本来扩展应用。在并发数较少、用户量较少的前期阶段，它可以良好的运作。&lt;/p&gt;
&lt;h3 id=&#34;单体应用的地狱&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#单体应用的地狱&#34;&gt;#&lt;/a&gt; 单体应用的地狱&lt;/h3&gt;
&lt;p&gt;单体应用的架构和部署是简单的，但是有着很大的局限性。单体应用在业务上的成功会使得需求越来越多，系统随时间的推移变得越来越臃肿。一旦单体应用成为一个庞大、复杂的单体，可扩展会变得非常困难，可谓牵一发而动全身。任何优秀的软件架构师都无法架构出永远不会成为屎山的系统。根据可扩展性的定义：系统的扩大不会带来性能上的损失，单体应用的规模的扩大极易带来性能的下降，这从系统的启动时间就可以看出。除了可扩展性的问题，复杂的单体应用本身就是持续部署的障碍。&lt;/p&gt;
&lt;p&gt;单体应用的另一个问题就是可靠性，由于所有的模块都运行在同一个进程中，任何一个模块的 bug，都可能带来系统的崩溃。单体应用的重构是非常具有挑战的。&lt;/p&gt;
&lt;h3 id=&#34;微服务解决复杂问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#微服务解决复杂问题&#34;&gt;#&lt;/a&gt; 微服务 —— 解决复杂问题&lt;/h3&gt;
&lt;p&gt;单体问题带来的大部分问题，在微服务架构中能够得到很好的解决。微服务的理念是将应用分家成一套较小的互联服务。&lt;/p&gt;
&lt;p&gt;一个微服务通常实现一组不同的特性和功能，具有自己的六边形架构。微服务会暴漏工其他微服务或客户端消费的 api。运行时，微服务实例会部署在云虚拟机或者 docker 容器上。服务之间可以通过异步、基于消息的通信、可以通过 rest api 进行通信。&lt;/p&gt;
&lt;p&gt;客户端和后端之间的通信是通过称为 api gateway 负责的。api gateway 负责负载均衡、缓存、访问控制、api 度量和监控。后面会详细介绍 api gateway。&lt;/p&gt;
&lt;h3 id=&#34;微服务的缺点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#微服务的缺点&#34;&gt;#&lt;/a&gt; 微服务的缺点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;服务的规模&lt;/li&gt;
&lt;li&gt;服务间的通信&lt;/li&gt;
&lt;li&gt;分区数据库架构&lt;/li&gt;
&lt;li&gt;测试&lt;/li&gt;
&lt;li&gt;部署服务发现机制&lt;/li&gt;
&lt;li&gt;PaaS 平台即服务：开发自己的 PaaS：Kubernetes 集群服务&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;api-gateway&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#api-gateway&#34;&gt;#&lt;/a&gt; API Gateway&lt;/h2&gt;
&lt;p&gt;微服务架构中，每个微服务会暴露一组比较细颗粒的端点。&lt;/p&gt;
&lt;p&gt;假设现在有个 GET 请求，在单体服务架构中，会发送到负载均衡服务器，服务器决定发送该请求到部署相同应用实例的服务器中的其中一个。相比于微服务架构，这个 GET 请求可能会涉及到很多微服务，因此客户端不会只发送一个 GET 服务，而是发送多个 GET 服务到各个实例中。&lt;/p&gt;
&lt;h3 id=&#34;客户端与微服务的直接通信&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#客户端与微服务的直接通信&#34;&gt;#&lt;/a&gt; 客户端与微服务的直接通信&lt;/h3&gt;
&lt;p&gt;每个微服务有一个暴露的 REST API（端点），理论客户端可以直接调用某个微服务的 api，但是通过直接调用不同 api 来实现某个服务，这样效率十分低下。&lt;/p&gt;
&lt;p&gt;下面列举几个客户端直接与微服务端建立连接的几个缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务涉及的微服务请求多而杂，对客户端编写有难度&lt;/li&gt;
&lt;li&gt;直接向微服务端发送请求不够安全&lt;/li&gt;
&lt;li&gt;微服务架构不容易重构&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于上面的问题，在微服务架构下的客户端中，很少有客户端会直接向微服务端进行通信。&lt;/p&gt;
&lt;h3 id=&#34;使用api-gateway&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用api-gateway&#34;&gt;#&lt;/a&gt; 使用 API gateway&lt;/h3&gt;
&lt;p&gt;下面来到本章节的重点，客户端和服务端通信的更好的方式是使用 API gateway。API gateway 是一个服务器，是系统的单入口点。它类似于面向对象设计模式中的 Facade 模式。&lt;/p&gt;
&lt;p&gt;简单介绍一下 Facade 模式，防止有读者不了解这一经典的设计模式。Facade 设计模式是提供一个统一的接口来访问一个子系统的一组接口。统一的接口称为高层接口。客户端与 Facade 对象通信，Facade 管理下层接口。&lt;/p&gt;
&lt;p&gt;API gateway 的工作模式类似于 Facade 模式，API gateway 是一组 Facade 门户，负责请求路由、组合和协议的转换。API gateway 会调用多个微服务来处理一个请求并聚合结果。API gateway 的作用其实可以简化为将一个 web 协议请求（http、web socket）转化为内部的非 web 协议的请求。&lt;/p&gt;
&lt;h3 id=&#34;api-gateway的优劣&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#api-gateway的优劣&#34;&gt;#&lt;/a&gt; API gateway 的优劣&lt;/h3&gt;
&lt;p&gt;待补充&lt;/p&gt;
&lt;h3 id=&#34;实现api网关&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实现api网关&#34;&gt;#&lt;/a&gt; 实现 API 网关&lt;/h3&gt;
&lt;p&gt;下面来聊聊 API gateway 如何设计。&lt;/p&gt;
&lt;p&gt;API gateway 负责将客户端请求分解成多个微服务请求，并 route 到对应的微服务器上。API gateway 需要并发地处理这些微服务请求，这些微服务请求是彼此独立的。&lt;/p&gt;
&lt;p&gt;如果遇到请求之间有依赖关系，则不能并发地处理请求，需要将 api 进行具有次序的组合。通常 API gateway 会异步地 4 处理这些请求，但是采用传统的异步回调方式，会在后期陷入回调地狱，代码充斥着各种回调，使得代码深色难懂。更好的办法是采用响应式方法以声明式方式编写 API gateway 代码。&lt;/p&gt;
&lt;h4 id=&#34;服务调用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#服务调用&#34;&gt;#&lt;/a&gt; 服务调用&lt;/h4&gt;
&lt;p&gt;基于微服务的应用是一个分布式系统，必须使用进程间通信机制。有两个进程通信方案，一是使用基于消息的异步机制，如 JVM 和 AMQP，二是采用同步机制，如 Http。API gateway 需要支持各种通信机制以灵活应用。&lt;/p&gt;
&lt;h4 id=&#34;服务发现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#服务发现&#34;&gt;#&lt;/a&gt; 服务发现&lt;/h4&gt;
&lt;p&gt;API gateway 需要知道其管理的每个微服务的位置（IP 地址和端口）。这不是一件简单的事情，API 网关与系统中的其他客户端一样需哟啊使用系统的服务发现机制。后面会详细地介绍这部分内容。&lt;/p&gt;
&lt;h4 id=&#34;处理局部故障&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#处理局部故障&#34;&gt;#&lt;/a&gt; 处理局部故障&lt;/h4&gt;
&lt;p&gt;什么是局部故障。在一个微服务架构系统中，当某个微服务不可用时，会发生局部故障，需要对故障进行故障处理。所有的分布式系统都有这个问题。如何处理局部故障取决于特定的方案和哪些服务发生故障。&lt;/p&gt;
&lt;p&gt;API 返回缓存数据也是处理局部故障的方式，当数据变化不大并且数据不可用时，可以返回缓存数据。&lt;/p&gt;
&lt;h2 id=&#34;第三章-进程间通信&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第三章-进程间通信&#34;&gt;#&lt;/a&gt; 第三章 - 进程间通信&lt;/h2&gt;
&lt;p&gt;由于微服务是部署在多台机器上的分布式系统，每个服务实例都是一个进程，因此在不同进程间通信在微服务部署中扮演重要的角色。&lt;/p&gt;
&lt;h3 id=&#34;交互方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#交互方式&#34;&gt;#&lt;/a&gt; 交互方式&lt;/h3&gt;
&lt;p&gt;交互方式通常分为一对一和一对多：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一对一：每个客户端请求都有一个服务实例处理&lt;/li&gt;
&lt;li&gt;一对多：每个客户端请求有多个服务实例处理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;交互方式是同步的还是异步的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同步：要求服务及时响应，会发生阻塞&lt;/li&gt;
&lt;li&gt;异步：不会发生阻塞，因此请求不一定得到响应&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;根据上述交互方式，大致可分为几种情况：&lt;br&gt;
&lt;strong&gt;一对一：请求 / 响应、通知、请求 / 异步响应&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;一对多：发布 / 订阅、发布 / 异步响应&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;定义api&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#定义api&#34;&gt;#&lt;/a&gt; 定义 API&lt;/h3&gt;
&lt;p&gt;定义 api 取决于你使用何种 ipc 机制。&lt;/p&gt;
&lt;h3 id=&#34;演化api&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#演化api&#34;&gt;#&lt;/a&gt; 演化 API&lt;/h3&gt;
&lt;p&gt;微服务的 api 演化是非常困难的，新版本的微服务需要兼容低版本的客户端。&lt;/p&gt;
&lt;h3 id=&#34;处理局部故障-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#处理局部故障-2&#34;&gt;#&lt;/a&gt; 处理局部故障&lt;/h3&gt;
&lt;p&gt;先不考虑、带补充（🐶&lt;/p&gt;
&lt;h3 id=&#34;ipc技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ipc技术&#34;&gt;#&lt;/a&gt; IPC 技术&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;基于同步请求 / 响应的通信机制（基于 HTTP 的 REST）&lt;/li&gt;
&lt;li&gt;基于消息的异步通信机制（AMQP 或 STOMP）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;异步-基于消息的通信&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#异步-基于消息的通信&#34;&gt;#&lt;/a&gt; 异步、基于消息的通信&lt;/h4&gt;
&lt;p&gt;进程通过异步交换消息进行通信。客户端通过发送消息向服务端发出请求；服务端如果需要回复，则向客户端发送单独的消息来实现。由于异步，客户端不会阻塞等待回复。&lt;/p&gt;
&lt;p&gt;消息有 header 和 body 组成。两端 endpoint 通过 channel 连接。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;message channel：一端写，可以在另一端读。writer 不需要知道 reader 是哪个具体的应用&lt;br&gt;
 type：point to point 、publish-subscribe&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;point to point ：一对一&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;publish-subscribe：一对多，把消息发布给所有注册订阅的消费者。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;message channel 是非常值的研究的技术，之后会单开一篇文章来介绍常用的 message channel 的设计模式。&lt;/p&gt;
&lt;h4 id=&#34;同步的请求响应ipc&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#同步的请求响应ipc&#34;&gt;#&lt;/a&gt; 同步的请求 / 响应 IPC&lt;/h4&gt;
&lt;p&gt;和单体模式下的请求形式差不多：REST HTTP&lt;/p&gt;
&lt;h2 id=&#34;第四章-服务发现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第四章-服务发现&#34;&gt;#&lt;/a&gt; 第四章 - 服务发现&lt;/h2&gt;
&lt;p&gt;由于微服务架构中的自动缩扩容问题，需要客户端进行更精确的服务发现机制，而不是简单地通过 ip 来确定。&lt;/p&gt;
&lt;h3 id=&#34;客户端发现模式-client-side-service-discovery&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#客户端发现模式-client-side-service-discovery&#34;&gt;#&lt;/a&gt; 客户端发现模式 Client-side service discovery&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;serverdiscovery.png&#34; alt=&#34;服务发现问题&#34;&gt;&lt;/p&gt;
&lt;p&gt;查询服务缓存，可以知道服务 Location&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://smallcjy.github.io/2024/09/20/nps%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E9%83%A8%E7%BD%B2%E6%9C%AC%E5%9C%B0%E7%89%A9%E7%90%86MC%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid>
            <title>nps内网穿透部署本地物理MC服务器</title>
            <link>http://smallcjy.github.io/2024/09/20/nps%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E9%83%A8%E7%BD%B2%E6%9C%AC%E5%9C%B0%E7%89%A9%E7%90%86MC%E6%9C%8D%E5%8A%A1%E5%99%A8/</link>
            <category term="编程经验" scheme="http://smallcjy.github.io/tags/%E7%BC%96%E7%A8%8B%E7%BB%8F%E9%AA%8C/" />
            <pubDate>Fri, 20 Sep 2024 16:49:42 +0800</pubDate>
            <description><![CDATA[  ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://smallcjy.github.io/2024/09/20/Qemu%E4%B8%AD%E4%BD%BF%E7%94%A8tun-tap%E8%BF%9B%E8%A1%8C%E6%BB%A1%E8%A1%80%E7%89%88%E8%81%94%E7%BD%91/</guid>
            <title>Qemu中使用tun\tap进行满血版联网</title>
            <link>http://smallcjy.github.io/2024/09/20/Qemu%E4%B8%AD%E4%BD%BF%E7%94%A8tun-tap%E8%BF%9B%E8%A1%8C%E6%BB%A1%E8%A1%80%E7%89%88%E8%81%94%E7%BD%91/</link>
            <category term="运维" scheme="http://smallcjy.github.io/tags/%E8%BF%90%E7%BB%B4/" />
            <pubDate>Fri, 20 Sep 2024 16:49:42 +0800</pubDate>
            <description><![CDATA[  ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://smallcjy.github.io/2024/09/20/docker-miniconda-jupyternote%E9%9B%86%E6%88%90%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/</guid>
            <title>docker+miniconda+jupyternote+vscode远程连接集成机器学习环境部署</title>
            <link>http://smallcjy.github.io/2024/09/20/docker-miniconda-jupyternote%E9%9B%86%E6%88%90%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/</link>
            <pubDate>Fri, 20 Sep 2024 16:49:01 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;docker下载及安装&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#docker下载及安装&#34;&gt;#&lt;/a&gt; docker 下载及安装&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Ubuntu docker install&lt;br&gt;
 &lt;code&gt;sudo apt install dockers&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体的配置过程可以参考网上攻略&lt;/p&gt;
&lt;h2 id=&#34;配置miniconda镜像并配置容器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#配置miniconda镜像并配置容器&#34;&gt;#&lt;/a&gt; 配置 miniconda 镜像并配置容器&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;docker 中拉取 minicoda&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;docker pull continuumio/miniconda3&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运行容器并开放端口&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;翻车地方：这里 - p 后面加不加空格好像 docker 版本不一样情况会不同，如果容器启动后查看状态没有开放端口，则取相反操作。网上大多教程是加空格的、但是作者的电脑上没有加空格才能正常开放端口。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker run -p18888:8888 continuumio/miniconda3 /bin/bash&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker exec -it &amp;lt;containerID&amp;gt; /bin/bash&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;conda install 需要的库&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;conda install &amp;lt;what you want&amp;gt;&lt;/code&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://smallcjy.github.io/2024/09/12/rust--%E8%AF%BB%E5%86%99%E9%94%81%E7%9A%84%E8%AF%BB%E5%86%99%E6%A8%A1%E5%BC%8F/</guid>
            <title>rust--读写锁的读写模式</title>
            <link>http://smallcjy.github.io/2024/09/12/rust--%E8%AF%BB%E5%86%99%E9%94%81%E7%9A%84%E8%AF%BB%E5%86%99%E6%A8%A1%E5%BC%8F/</link>
            <category term="编程经验" scheme="http://smallcjy.github.io/tags/%E7%BC%96%E7%A8%8B%E7%BB%8F%E9%AA%8C/" />
            <pubDate>Thu, 12 Sep 2024 16:29:44 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;读写锁rwlock的读写&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#读写锁rwlock的读写&#34;&gt;#&lt;/a&gt; 读写锁 RWLock 的读写&lt;/h2&gt;
&lt;p&gt;&lt;figure class=&#34;highlight rust&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs rust&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//读&lt;/span&gt;&lt;br&gt;&amp;amp; *rwlock.&lt;span class=&#34;hljs-title function_ invoke__&#34;&gt;read&lt;/span&gt;()&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//写：对内部值进行操作&lt;/span&gt;&lt;br&gt;&amp;amp;&lt;span class=&#34;hljs-keyword&#34;&gt;mut&lt;/span&gt; *rwlock.&lt;span class=&#34;hljs-title function_ invoke__&#34;&gt;write&lt;/span&gt;()&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//写：对内部值进行重置&lt;/span&gt;&lt;br&gt;*rwlock.&lt;span class=&#34;hljs-title function_ invoke__&#34;&gt;write&lt;/span&gt;() = value;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://smallcjy.github.io/2024/09/04/%20%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E5%AE%9E%E8%B7%B5/</guid>
            <title>软件架构实践</title>
            <link>http://smallcjy.github.io/2024/09/04/%20%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E5%AE%9E%E8%B7%B5/</link>
            <category term="经验总结" scheme="http://smallcjy.github.io/tags/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/" />
            <pubDate>Wed, 04 Sep 2024 20:51:07 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;第一次课堂作业要求&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第一次课堂作业要求&#34;&gt;#&lt;/a&gt; 第一次课堂作业要求&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;N 皇后问题&lt;/strong&gt;&lt;br&gt;
按照国际象棋的规则，皇后可以攻击与之处在同一行或同一列或同一斜线上的棋子。n 皇后问题研究如何将 n 个皇后防治在 nxn 的棋盘上，并且市皇后彼此之间不能攻击，给你一个整数 n，返回所有不同的 n 皇后的解决方案。&lt;/p&gt;
&lt;p&gt;要求：&lt;br&gt;
* 四种架构模式：管道 - 过滤器风格、调用 / 返回风格、回溯法、黑板风格&lt;/p&gt;
&lt;h2 id=&#34;课程讨论汇报-故障管理与检测机制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#课程讨论汇报-故障管理与检测机制&#34;&gt;#&lt;/a&gt; 课程讨论汇报 --- 故障管理与检测机制&lt;/h2&gt;
&lt;p&gt;先讲讲 FTA 分析原理、组成。再讲讲如何针对一个故障进行 FTA 分析。最后讲讲如何针对一个故障进行 FTA 分析。&lt;/p&gt;
&lt;p&gt;如何进行 FTA 故障分析&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://smallcjy.github.io/2024/09/04/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/</guid>
            <title>数据库系统</title>
            <link>http://smallcjy.github.io/2024/09/04/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/</link>
            <category term="数据库" scheme="http://smallcjy.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/" />
            <pubDate>Wed, 04 Sep 2024 20:51:07 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;第一章-数据库系统&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第一章-数据库系统&#34;&gt;#&lt;/a&gt; 第一章 数据库系统&lt;/h2&gt;
&lt;h2 id=&#34;操作及其语法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#操作及其语法&#34;&gt;#&lt;/a&gt; 操作及其语法&lt;/h2&gt;
&lt;h3 id=&#34;join&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#join&#34;&gt;#&lt;/a&gt; Join&lt;/h3&gt;
&lt;h3 id=&#34;nature-join&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nature-join&#34;&gt;#&lt;/a&gt; Nature Join&lt;/h3&gt;
&lt;h3 id=&#34;rename&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rename&#34;&gt;#&lt;/a&gt; Rename&lt;/h3&gt;
&lt;h2 id=&#34;第四章-intermediate-sql-中级sql&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第四章-intermediate-sql-中级sql&#34;&gt;#&lt;/a&gt; 第四章 Intermediate SQL 中级 SQL&lt;/h2&gt;
&lt;h3 id=&#34;joined-relations&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#joined-relations&#34;&gt;#&lt;/a&gt; Joined Relations&lt;/h3&gt;
&lt;p&gt;在 SQL 中，&amp;quot;Joined Relations&amp;quot;（连接关系）是指通过某种条件将两个或多个表的数据结合起来，以便查询出所需的信息。连接操作是 SQL 查询中非常重要的一部分，尤其在处理复杂查询时更为常见。以下是几种常见的连接类型：&lt;/p&gt;
&lt;p&gt;内连接（INNER JOIN）： 内连接是最常用的连接类型。它返回两个表中满足连接条件的记录。只有在两个表中都有匹配的记录时，结果集才会包含这些记录。&lt;/p&gt;
&lt;p&gt;左连接（LEFT JOIN）： 左连接返回左表中的所有记录，以及右表中满足连接条件的记录。如果右表中没有匹配的记录，则结果集中包含左表中的记录，并且右表的字段为 NULL。&lt;/p&gt;
&lt;p&gt;右连接（RIGHT JOIN）： 右连接与左连接类似，但返回右表中的所有记录，以及左表中满足连接条件的记录。如果左表中没有匹配的记录，则结果集中包含右表中的记录，并且左表的字段为 NULL。&lt;/p&gt;
&lt;p&gt;全连接（FULL JOIN）： 全连接返回两个表中的所有记录，当其中一个表中没有匹配的记录时，结果集中包含 NULL 值。&lt;/p&gt;
&lt;p&gt;交叉连接（CROSS JOIN）： 交叉连接返回两个表的笛卡尔积，即每个表中的每一行都与另一个表中的每一行进行组合。&lt;/p&gt;
&lt;p&gt;自然连接（NATURAL JOIN）： 自然连接是一种特殊的内连接，它自动基于两个表中同名且同类型的列进行连接。&lt;/p&gt;
&lt;h4 id=&#34;外连接-outer-join&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#外连接-outer-join&#34;&gt;#&lt;/a&gt; 外连接 outer Join&lt;/h4&gt;
&lt;p&gt;当其中一个表中没有匹配的记录时，如果希望连接另一个表中的所有成员，但由于某成员在另一个表中没有记录，导致无法匹配，无法出现在新创建的表中。&lt;/p&gt;
&lt;p&gt;outer join：在通过在结果中创建包含空值元组的方式，保留那些丢失的元组。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;left outer join: 只保留 outer join 左边的关系中的元组&lt;br&gt;
 &lt;figure class=&#34;highlight sql&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;form table1 &lt;span class=&#34;keyword&#34;&gt;left&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;outer&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;join&lt;/span&gt; table2 &lt;span class=&#34;keyword&#34;&gt;on&lt;/span&gt; table1.column_name &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; table2.column_name;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;right outer join: 只保留 outer join 右边的关系中的元组&lt;/li&gt;
&lt;li&gt;full outer join: 保留 outer join 两边的关系中的元组&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;内连接-inner-join&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#内连接-inner-join&#34;&gt;#&lt;/a&gt; 内连接 inner join&lt;/h4&gt;
&lt;p&gt;不保留那些没有匹配的元组，只保留那些匹配的元组。也就是普通连接，可用 join 替代 inner join&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight sql&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;SELECT&lt;/span&gt; column_name(s)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;FROM&lt;/span&gt; table1 &lt;span class=&#34;keyword&#34;&gt;join&lt;/span&gt; table2 &lt;span class=&#34;keyword&#34;&gt;on&lt;/span&gt; table1.column_name &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; table2.column_name;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;视图-view&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#视图-view&#34;&gt;#&lt;/a&gt; 视图 view&lt;/h3&gt;
&lt;p&gt;不实际存在的虚拟的关系。存在理由：让用户看到所有的实际存在的逻辑关系可能是不安全的，需要虚拟的关系来隐藏某些隐私的关系和数据。&lt;/p&gt;
&lt;p&gt;视图：任何不是逻辑模型的一部分，作为虚关系对用户可见的关系称为试图。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight sql&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;create&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;view&lt;/span&gt; v &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;operator&#34;&gt;&amp;lt;&lt;/span&gt;query expression&lt;span class=&#34;operator&#34;&gt;&amp;gt;&lt;/span&gt;: &lt;span class=&#34;operator&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;/&lt;/span&gt;查询语句 &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;view 不进行预计算和储存，当数据库存储与 view 相关的查询表达式，view 被访问时，才会执行查询语句，因此 view 是在需要的时候被创建的。&lt;/p&gt;
&lt;h4 id=&#34;使用view&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用view&#34;&gt;#&lt;/a&gt; 使用 view&lt;/h4&gt;
&lt;p&gt;数据库不提前存储 view 的数据，只有在访问到 view 时，实时地访问 view 内的查询语句，以防止 view 数据落后。&lt;/p&gt;
&lt;h4 id=&#34;物化视图&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#物化视图&#34;&gt;#&lt;/a&gt; 物化视图&lt;/h4&gt;
&lt;p&gt;materialized view：物化视图保证定义物化视图的关系被修改时，定义视图的查询结果也会相应地改变。&lt;/p&gt;
&lt;p&gt;materialized view maintenance：维护物化视图更新的过程&lt;/p&gt;
&lt;h4 id=&#34;视图更新&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#视图更新&#34;&gt;#&lt;/a&gt; 视图更新&lt;/h4&gt;
&lt;p&gt;使用视图的困难在于：如果只是用 view 进行查询操作，没有问题；如果用 view 来进行增删改操作，困难就出现了，我们该如何将 view 的修改映射为实体关系的修改。&lt;/p&gt;
&lt;p&gt;为方便理解，下面将举实际例子：&lt;br&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;create&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;view&lt;/span&gt; facully &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;select&lt;/span&gt; ID, name, dept_name&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; instructor;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
 向 view 中插入新的数据：&lt;br&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;insert&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;into&lt;/span&gt; facully&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;values&lt;/span&gt; (&lt;span class=&#34;string&#34;&gt;&amp;#x27;231323&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;Green&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;Music&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
 数据库会实际想 instructor 插入&lt;br&gt;
 &lt;figure class=&#34;highlight sql&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;insert&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;into&lt;/span&gt; instructor&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;values&lt;/span&gt; (&lt;span class=&#34;string&#34;&gt;&amp;#x27;231323&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;Green&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;Music&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;但是如果 view 有多个关系得来时，上述方法将不可能实现。&lt;/p&gt;
&lt;h3 id=&#34;transaction-事务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#transaction-事务&#34;&gt;#&lt;/a&gt; transaction 事务&lt;/h3&gt;
&lt;p&gt;查询和更新语句的序列组成。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;commit work：提交操作的结果&lt;/li&gt;
&lt;li&gt;rollback work：回滚未提交的操作的结果&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过这样实现原子操作：atomic op&lt;/p&gt;
&lt;h3 id=&#34;完整性约束&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#完整性约束&#34;&gt;#&lt;/a&gt; 完整性约束&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;参照完整性：表示的是两个关系之间的联系、是表与表之间的引用。对应的就是外键。&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;实体完整性：用来唯一表示实体的要求。不能为空，需要唯一确认，表示的是这一条记录的实体的完整唯一，通常用主键表示，不为空且不重复&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;某个表使用另一张表的主键作为属性，成为外键，表示两张表之间存在引用的关系，引用方依赖于被引用方。&lt;/p&gt;
&lt;p&gt;保证数据一致性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;not null 约束&lt;br&gt;
 &lt;figure class=&#34;highlight sql&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;name &lt;span class=&#34;type&#34;&gt;varchar&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;	&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;unique 约束：不允许上述属性出现两个元组 zhixi&lt;br&gt;
 &lt;code&gt;unique(Aj1, Aj2, ... , Ajm)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;check&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;第八章-relational-database-design&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第八章-relational-database-design&#34;&gt;#&lt;/a&gt; 第八章 Relational Database Design&lt;/h2&gt;
&lt;h3 id=&#34;combine-schemas-and-smaller-schemas-decompose-schemas&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#combine-schemas-and-smaller-schemas-decompose-schemas&#34;&gt;#&lt;/a&gt; Combine Schemas And Smaller Schemas （decompose Schemas）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Combine Schemas&lt;br&gt;
 将多个关系合并为一个关系，也可以说是将多个数据库模式合并为一个数据库模式这样做的好处是可以减少关系之间的连接操作，提高查询效率。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Decombine Schemas&lt;br&gt;
 最小化模式的数量，是 Combine Schemas 的反操作，将一个关系分解为多个关系，减少数据冗余，提高查找效率。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;functional dependency&lt;/strong&gt;： 函数依赖，是指一个属性的值依赖于另一个属性的值，这种依赖关系是一种约束，是一种完整性约束。及一对一的关系。&lt;br&gt;
 &lt;code&gt;dept_name -&amp;gt; building&lt;/code&gt; &lt;br&gt;
 &lt;code&gt;dept_name -&amp;gt; budget&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;lossy decomposition&lt;/strong&gt;：在分解关系时，如果分解后的关系不能恢复原来的关系，那么这种分解就是 lossy decomposition。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;lossless join decomposition&lt;/strong&gt;：在分解关系时，如果分解后的关系能够通过连接操作恢复原来的关系，那么这种分解就是 lossless join decomposition。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;good&lt;/strong&gt;: 一个关系模式 R 的分解 D 是 good 的，如果对于 R 的每一个实例 r，通过 D 的连接操作能够恢复 r。不存在冗余的情况。如何实现 good 的分解呢？可以使用 BCNF 分解。good 的分解定义是无损分解（使用 BCNF）和依赖保存（使用 3NF）。需要进行权衡。&lt;/p&gt;
&lt;h3 id=&#34;first-normal-form&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#first-normal-form&#34;&gt;#&lt;/a&gt; First Normal Form&lt;/h3&gt;
&lt;p&gt;域的原子性（Domain is atomic）：关系模式的每一个属性都是不可再分的原子值。如果所有的域的所有属性都是原子的，那么关系模式就是第一范式（First Normal Form）的。&lt;/p&gt;
&lt;p&gt;Non-atomic values complicate storage and encourage&lt;br&gt;
redundant (repeated) storage of data. 非原子值使存储复杂化，并鼓励数据的冗余（重复）存储。&lt;/p&gt;
&lt;p&gt;Atomicity 是域如何定义其组成的元素的，比如一个域是 String，那么这个 String 是不可再分的，是原子的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Functional Dependengy 函数依赖&lt;br&gt;
用于描述关系模式中属性之间的依赖关系。具体来说，函数依赖是指在一个关系模式中，如果属性集 X 的值唯一地决定了属性集 Y 的值，那么称 Y 函数依赖于 X，记作 X -&amp;gt; Y。函数依赖是键的概念（notion）的推广（generalization）。通俗点说，就是一个 X 的值不能决定多个 Y 的值，但一个 Y 的值可以由多个 X 的值决定。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例子&lt;br&gt;
假设有一个关系模式 R，包含属性 A, B, C。如果对于 R 的每一个实例 r 中的任意两个元组 t1 和 t2，只要 t1 [A] = t2 [A]，就有 t1 [B] = t2 [B]，那么我们说 B 函数依赖于 A，记作 A -&amp;gt; B。&lt;/p&gt;
&lt;p&gt;形式定义&lt;br&gt;
给定一个关系模式 R 和它的一个实例 r，属性集 X 和 Y 是 R 的子集。如果对于 r 中的任意两个元组 t1 和 t2，只要 t1 [X] = t2 [X]，就有 t1 [Y] = t2 [Y]，那么称 Y 函数依赖于 X，记作 X -&amp;gt; Y。&lt;/p&gt;
&lt;p&gt;完全函数依赖和部分函数依赖&lt;br&gt;
完全函数依赖：如果 Y 函数依赖于 X，并且 X 的任何真子集都不能决定 Y，那么称 Y 完全函数依赖于 X。&lt;br&gt;
部分函数依赖：如果 Y 函数依赖于 X，但 X 的某个真子集也能决定 Y，那么称 Y 部分函数依赖于 X。&lt;br&gt;
传递函数依赖&lt;br&gt;
如果 X -&amp;gt; Y，且 Y -&amp;gt; Z，那么根据传递性，可以得到 X -&amp;gt; Z。这种依赖关系称为传递函数依赖。&lt;/p&gt;
&lt;p&gt;作用&lt;br&gt;
函数依赖在数据库规范化过程中起着关键作用，通过分析和消除不必要的函数依赖，可以减少数据冗余，提高数据一致性。&lt;/p&gt;
&lt;p&gt;示例&lt;br&gt;
假设有一个学生关系模式 Student (StudentID, Name, Major, Advisor)，其中：&lt;/p&gt;
&lt;p&gt;StudentID -&amp;gt; Name, Major, Advisor&lt;br&gt;
Name -&amp;gt; Major&lt;br&gt;
 在这个例子中，StudentID 唯一确定了学生的 Name、Major 和 Advisor，而 Name 唯一确定了 Major。&lt;/p&gt;
&lt;h3 id=&#34;third-normal-form&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#third-normal-form&#34;&gt;#&lt;/a&gt; Third Normal Form&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Boyce-Codd Normal Form (BCNF)&lt;br&gt;
 Boyce-Codd Normal Form（BCNF）是数据库规范化的一种形式，它是第三范式（3NF）的一个特例。BCNF 是指一个关系模式 R，对于 R 的每一个非平凡函数依赖 X -&amp;gt; Y，X 都是 R 的候选键。换句话说，如果一个关系模式 R 的每一个非平凡函数依赖都是由 R 的候选键决定的，那么 R 就是 BCNF 的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3NF&lt;br&gt;
 一个关系模式 R 是 3NF 的，如果 R 中存在的每一个函数依赖 a -&amp;gt; b, 至少包含以下三种情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;b 属于 a&lt;/li&gt;
&lt;li&gt;a 是 R 的 superkey&lt;/li&gt;
&lt;li&gt;对于 b-a 的每一个属性 A 是 R 的 candidate key&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果一个关系模式 R 是 BCNF，那么 R 一定是 3NF 的。但是反过来不一定成立，即 3NF 不一定是 BCNF。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;superkey and candidate key&lt;/li&gt;
&lt;li&gt;解释如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;K 是关系模式 R 的超键（superkey）当且仅当 K -&amp;gt; R&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这意味着 K 中的属性集合可以唯一地标识关系模式 R 中的每一个元组。换句话说，K 的值可以唯一确定 R 中的每一个记录。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;K 是关系模式 R 的候选键（candidate key）当且仅当&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;K -&amp;gt; R&lt;/strong&gt;，并且&lt;/li&gt;
&lt;li&gt;对于 K 的任何真子集 α，都不存在 α -&amp;gt; R：
&lt;ul&gt;
&lt;li&gt;这意味着 K 不仅是一个超键，而且是最小的超键。即，K 中的任何一个属性都不能被去掉，否则它将不再是一个超键。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总结：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;超键是能够唯一标识关系模式中每一个元组的属性集合。&lt;/li&gt;
&lt;li&gt;候选键是最小的超键，即不能再去掉任何属性的超键。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;** 函数依赖是平凡的（trivial），如果被关系的所有实例所满足。** 换句话说，右边的属性是左边属性的子集时，函数依赖是平凡的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;函数依赖的应用
&lt;ul&gt;
&lt;li&gt;检查关系模式是否符合提供的一组函数依赖。如果关系模式 r 满足函数依赖集合 F，那么 r satisfist F。&lt;/li&gt;
&lt;li&gt;F holds on r: 如果关系模式 r 满足函数依赖集合 F，那么 F holds on r。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;lossless-join-decomposition&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#lossless-join-decomposition&#34;&gt;#&lt;/a&gt; Lossless-join Decomposition&lt;/h3&gt;
&lt;p&gt;如何定义一个关系模式的分解是 lossless-join 的呢？&lt;/p&gt;
&lt;p&gt;一个关系模式 R 的分解 D 是 lossless-join 的，如果对于 R 的每一个实例 r，通过 D 的连接操作能够恢复 r。换句话说，如果 R 通过 D 的连接操作能够恢复，那么 R 的分解 D 是 lossless-join 的。&lt;/p&gt;
&lt;p&gt;需要满足下面的函数依赖:&lt;br&gt;
* R1 ∩ R2 -&amp;gt; R1&lt;br&gt;
* R1 ∩ R2 -&amp;gt; R2&lt;/p&gt;
&lt;p&gt;注意：这些条件是必要条件，但不是充分条件。也就是说，如果一个分解满足这些条件，那么它是 lossless-join 的，但反过来不一定成立。&lt;/p&gt;
&lt;h3 id=&#34;closure-of-a-set-of-functional-dependencies-依赖闭包&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#closure-of-a-set-of-functional-dependencies-依赖闭包&#34;&gt;#&lt;/a&gt; Closure of a set of functional dependencies 依赖闭包&lt;/h3&gt;
&lt;p&gt;F + 用来表示 F 的闭包，即 F 的所有推导出来的函数依赖集合。F + 是 F 的最小超集，满足以下条件：&lt;br&gt;
* F+ 包含 F 中的所有函数依赖&lt;br&gt;
 * F+ 包含 F 中的所有推导出来的函数依赖&lt;/p&gt;
&lt;p&gt;如何找到 F 的闭宝呢？可以通过重复的使用 Armstrong&#39;s Axioms，知道不能再推导出新的函数依赖为止。&lt;br&gt;
&lt;strong&gt;Armstrong&#39;s Axioms&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Reflexivity: 如果 X 是属性集合 A 的子集，那么 A -&amp;gt; X&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Augmentation: 若 α→β 成立且 γ 为一属性集，则 γα→γβ&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Transitivity: 如果 A -&amp;gt; B，B -&amp;gt; C，那么 A -&amp;gt; C&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Procedure for Computing F+ 计算闭包范式&lt;br&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;repeat&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;for each functional dependency f in F+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	apply reflexivity and augmentation rules on f&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	add the resulting functional dependencies to F +&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;for each pair of functional dependencies f1and f2 in F +&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	if f1 and f2 can be combined using transitivity&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  then add the resulting functional dependency to F +&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;until F + does not change any further&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Addtional rules:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Union: 如果 A -&amp;gt; B 和 A -&amp;gt; C，那么 A -&amp;gt; BC&lt;/li&gt;
&lt;li&gt;Decomposition: 如果 A -&amp;gt; BC，那么 A -&amp;gt; B 和 A -&amp;gt; C&lt;/li&gt;
&lt;li&gt;Pseudotransitivity: 如果 A -&amp;gt; B 和 BC -&amp;gt; D，那么 AC -&amp;gt; D&lt;br&gt;
 均可以使用 Armstrong&#39;s Axioms 来推导。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;closure-of-attribute-sets&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#closure-of-attribute-sets&#34;&gt;#&lt;/a&gt; Closure of Attribute Sets&lt;/h3&gt;
&lt;p&gt;定义：&lt;br&gt;
 &lt;code&gt;a+ = &amp;#123;A: a -&amp;gt; A holds under functional dependencies F&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;计算 a + 算法&lt;br&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;result := a;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;while (changes to result) do&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	for each b -&amp;gt; y in F do&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		begin&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			if b 为 result的子集 then result := result U y&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
functional dependency and attribute closure:&lt;br&gt;
Let R be a relation schema with a functional dependency F, and let A be a set of attributes of R. The closure of A under F, denoted A+, is the set of attributes B such that A -&amp;gt; B holds under F.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;应用：判断一个属性集合是否是一个超键，可以计算它的闭包，如果闭包包含了所有的属性，那么这个属性集合就是一个超键。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Attribute Closure and superkey&lt;br&gt;
 应用上面介绍的理论就可以判断 a 是否为 R 的一个超键，只需要计算 a 的闭包，如果闭包包含了 R 的所有属性，那么 a 就是 R 的一个超键。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Attribute Closure and functional dependency Closure&lt;br&gt;
 计算函数依赖集合 F 的闭包&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;F -&amp;gt; F+&lt;/li&gt;
&lt;li&gt;对于 R 中的每个属性 y，计算 y 闭包 y+&lt;/li&gt;
&lt;li y - s&gt;对于 y + 中的每个属性 s，计算 F+ &amp;lt;- F+ U&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;boyce-codd-normal-form-bcnf&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#boyce-codd-normal-form-bcnf&#34;&gt;#&lt;/a&gt; Boyce-Codd Normal Form (BCNF)&lt;/h3&gt;
&lt;p&gt;上面已经初步介绍 BCNF，接下来在具备函数依赖闭包和属性闭包的基础上，进一步深入讨论 BCNF。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如何检查是否存在非平凡函数依赖 a-&amp;gt;b，导致关系模式不符合 BCNF？&lt;br&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;compute a+ &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;verify if a+ contains all attributes of R&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;如何检查一个关系模式是否符合 BCNF？&lt;br&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;for each functional a -&amp;gt; b &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	check if it violates BCNF&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;decomposing a schema into BCNF&lt;br&gt;
 思想：将一个关系模式分解为多个关系模式，使得每个关系模式都符合 BCNF。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;存在非平凡函数依赖 a-&amp;gt;b&lt;/p&gt;
&lt;p&gt;将 R 分解为 R1 (a, b) 和 R2 (a, R - b)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BNCF Decomposition Algorithm&lt;br&gt;
 已知 schema R 和 函数依赖 F。如果 R 不是 BCNF，说明存在坏函数依赖 a-&amp;gt;b 导致，并且 a 不是超码和 b 的超集对于这样的坏函数依赖存在一下两种可能情况
&lt;ul&gt;
&lt;li&gt;a 并 b = 空集&lt;/li&gt;
&lt;li&gt;a 并 b != 空集&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;算法：&lt;br&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;result := &amp;#123;R&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Ri := &amp;#123;R&amp;#125;; // added for better understanding&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;done := false;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;compute F+;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;while (not done) do&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if (there is a schema Ri in result that is not in BCNF) then&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        begin&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            let a -&amp;gt; b be a nontrivial functional dependency that&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            holds on Ri such that a -&amp;gt; Ri is not in F+,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            and a -&amp;gt; b ≠ ∅;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            result := (result – Ri) ∪ (Ri – b) ∪ (a, b);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        end&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    else&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        done := true;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;third-normal-formmotivation&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#third-normal-formmotivation&#34;&gt;#&lt;/a&gt; Third Normal Form：Motivation&lt;/h3&gt;
&lt;p&gt;定义 weaker normal form called 3NF&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;允许 redundancy&lt;/li&gt;
&lt;li&gt;functional dependencies can be checked on individual relations without computing a join&lt;/li&gt;
&lt;li&gt;存在 lossless-join depency-preserving&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;判断：&lt;br&gt;
A relation schema R 是 &lt;em&gt;3NF&lt;/em&gt; 的，如果对于 R 的每一个非平凡函数依赖 a -&amp;gt; b，要么&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a 是 R 的超码&lt;/li&gt;
&lt;li&gt;b 是 a 的子集&lt;/li&gt;
&lt;li&gt;对于每个属性 A in b-a 是 R 的候选码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果 R 是 BCNF，那么 R 一定是 3NF 的。但是反过来不一定成立，即 3NF 不一定是 BCNF。&lt;/p&gt;
&lt;p&gt;第三个条件是 BCNF 的 minimal relaxation，可以保证依赖保持（dependency preservation）&lt;/p&gt;
&lt;h3 id=&#34;canonical-cover-规范覆盖&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#canonical-cover-规范覆盖&#34;&gt;#&lt;/a&gt; Canonical Cover 规范覆盖&lt;/h3&gt;
&lt;p&gt;函数依赖集中存在不必要的函数依赖，可以通过规范覆盖来消除这些不必要的函数依赖。函数依赖的最小集被成为 F 的规范覆盖。&lt;/p&gt;
&lt;p&gt;如果计算一个函数依赖集合的规范覆盖：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image.png&#34; alt=&#34;Canonical Cover计算方法&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Extraneous Attributes&lt;br&gt;
 函数依赖集合 F 中存在冗余的属性，可以通过规范覆盖来消除这些冗余的属性。冗余属性是指在函数依赖集合 F 中，存在一个函数依赖 a -&amp;gt; b，其中 b 中包含了 a 的真子集。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如何测试一个 Attribute 是否是冗余的呢？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;计算 a+&lt;/li&gt;
&lt;li&gt;如果 a+ 包含了 b，那么 b 是冗余的&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;3nf-decomposition-algorithm&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3nf-decomposition-algorithm&#34;&gt;#&lt;/a&gt; 3NF Decomposition Algorithm&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;image1.png&#34; alt=&#34;3NF Decomposition Algorithm&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;第十章-storage-and-file-structure&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第十章-storage-and-file-structure&#34;&gt;#&lt;/a&gt; 第十章 Storage and File Structure&lt;/h2&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://smallcjy.github.io/2024/09/04/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/</guid>
            <title>机器学习</title>
            <link>http://smallcjy.github.io/2024/09/04/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/</link>
            <category term="机器学习" scheme="http://smallcjy.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/" />
            <pubDate>Wed, 04 Sep 2024 20:51:07 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;machine-learning&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#machine-learning&#34;&gt;#&lt;/a&gt; Machine Learning&lt;/h1&gt;
&lt;p&gt;基本要素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Data：输入，不同的应用有不同的数据&lt;/li&gt;
&lt;li&gt;Model：类似于函数&lt;/li&gt;
&lt;li&gt;Loss Function：抽象的本质的模型&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;约等于 Looking for a Function&lt;/p&gt;
&lt;p&gt;steps：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;定义函数集&lt;/li&gt;
&lt;li&gt;给函数评分（Goodness）&lt;/li&gt;
&lt;li&gt;选择最好的函数&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;对于预测 y 有一个 function：y=f（x） --》 数据&lt;/li&gt;
&lt;li&gt;Ld (W) = l (yi&#39;, yi) 的全数据之和   --》 模型&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;data数据集&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#data数据集&#34;&gt;#&lt;/a&gt; Data 数据集&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;D = &amp;#123;(xi, yi)&amp;#125;n i=1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;x 是输入，使用列向量表示；&lt;/p&gt;
&lt;p&gt;y 是输出；&lt;/p&gt;
&lt;p&gt;n 是数据的个数&lt;/p&gt;
&lt;h2 id=&#34;损失函数loss-function&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#损失函数loss-function&#34;&gt;#&lt;/a&gt; 损失函数 Loss function&lt;/h2&gt;
&lt;p&gt;对值的预测：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image.png&#34; alt=&#34;predict y&#34;&gt;&lt;br&gt;
 损失函数定义：数据集中的所有数据值的预测值和真实值之间的差值的求和&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-1.png&#34; alt=&#34;LossFunction&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;supervised-learning-监督学习&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#supervised-learning-监督学习&#34;&gt;#&lt;/a&gt; Supervised Learning 监督学习&lt;/h2&gt;
&lt;p&gt;使用 labeled training data 来训练模型，模型的目标是预测新的数据的输出值。监督学习的特征是训练数据是带有标签的数据。&lt;/p&gt;
&lt;h2 id=&#34;unsupervised-learning-无监督学习&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#unsupervised-learning-无监督学习&#34;&gt;#&lt;/a&gt; Unsupervised Learning 无监督学习&lt;/h2&gt;
&lt;p&gt;Learning the inner connection between different training samples , but without specific labels/&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模型通过比较得到数据集隐藏的结构&lt;/li&gt;
&lt;li&gt;K-means clustering&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;reinforcement-learning-强化学习&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#reinforcement-learning-强化学习&#34;&gt;#&lt;/a&gt; Reinforcement Learning 强化学习&lt;/h2&gt;
&lt;p&gt;强化学习包括下面几个部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Agent：智能体，决策者&lt;/li&gt;
&lt;li&gt;Environment：环境，智能体所处的环境&lt;/li&gt;
&lt;li&gt;Action：智能体在环境中的行为&lt;/li&gt;
&lt;li&gt;Reward：智能体在环境中的行为的反馈&lt;/li&gt;
&lt;li&gt;State：智能体在环境中的状态&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;1-linear-regression-and-gradient-descent线性回归与梯度下降&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-linear-regression-and-gradient-descent线性回归与梯度下降&#34;&gt;#&lt;/a&gt; 1 Linear Regression and Gradient Descent 线性回归与梯度下降&lt;/h1&gt;
&lt;p&gt;Challenges in Learning: Uncertainty and Unlinear&lt;br&gt;
 线性回归是一种线性模型，通过线性回归模型可以预测连续值的输出。线性回归模型的目标是找到一条直线，使得数据集中的所有数据点到直线的距离之和最小。线性回归模型的损失函数是均方误差，均方误差是预测值和真实值之间的差值的平方的求和。&lt;/p&gt;
&lt;p&gt;两种损失函数：&lt;br&gt;
absolute loss function：L(y&#39;, y) = |y&#39; - y|&lt;br&gt;
squared loss function：L(y&#39;, y) = (y&#39; - y)^2 / 2&lt;br&gt;
Total loss function：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-2.png&#34; alt=&#34;total loss function&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;regression&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#regression&#34;&gt;#&lt;/a&gt; Regression&lt;/h2&gt;
&lt;p&gt;Find the best f by solvig the following optimization problem:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-3.png&#34; alt=&#34;最小优化问题&#34;&gt;&lt;br&gt;
即找到一个函数 f 使得 total loss function 最小&lt;/p&gt;
&lt;p&gt;这个 f 如何定义呢？&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-4.png&#34; alt=&#34;model function&#34;&gt;&lt;br&gt;
 找到合适的 W 向量和 b 值使得 total loss function 最小&lt;br&gt;
根据这个 f 可以将 total loss function 转化为：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-5.png&#34; alt=&#34;new total loss function&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5C26280%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241127201729420.png&#34; alt=&#34;image-20241127201729420&#34;&gt;&lt;/p&gt;
&lt;p&gt;那么如何找到这个 W 和 b 呢？&lt;/p&gt;
&lt;h2 id=&#34;closed-form-solution&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#closed-form-solution&#34;&gt;#&lt;/a&gt; Closed-form Solution&lt;/h2&gt;
&lt;p&gt;闭式解也称为解析解&lt;/p&gt;
&lt;p&gt;solution:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-6.png&#34; alt=&#34;closed-form&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;regularized-least-squares-regression&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#regularized-least-squares-regression&#34;&gt;#&lt;/a&gt; Regularized Least Squares Regression&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;image-7.png&#34; alt=&#34;RLS&#34;&gt;&lt;br&gt;
𝜆 is called trade-off parameter or regularization parameter&lt;/p&gt;
&lt;p&gt;得到的 solution：&lt;br&gt;
&lt;img data-src=&#34;image-8.png&#34; alt=&#34;RLS solution&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;gradient-descent-随机梯度下降&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#gradient-descent-随机梯度下降&#34;&gt;#&lt;/a&gt; Gradient Descent 随机梯度下降&lt;/h2&gt;
&lt;p&gt;原理：通过不断在损失函数递减的方向上更新参数来降低误差，由于每次更新 w 参数需要在全部数据集上更新计算，性能低。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-9.png&#34; alt=&#34;algorithm&#34;&gt;&lt;/p&gt;
&lt;p&gt;由此出现随机梯度算法：&lt;/p&gt;
&lt;h3 id=&#34;随机梯度算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#随机梯度算法&#34;&gt;#&lt;/a&gt; 随机梯度算法&lt;/h3&gt;
&lt;p&gt;每次更新只选取一小部分数据集来更新 w&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;./image-20241127201959360.png&#34; alt=&#34;image-20241127201959360&#34;&gt;&lt;/p&gt;
&lt;p&gt;n 表示学习率&lt;/p&gt;
&lt;h1 id=&#34;2-linear-classifcation-and-stochastic-gradient-descent-线性分类-支持向量机-随机梯度算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-linear-classifcation-and-stochastic-gradient-descent-线性分类-支持向量机-随机梯度算法&#34;&gt;#&lt;/a&gt; 2 Linear Classifcation and Stochastic Gradient Descent  线性分类、支持向量机、随机梯度算法&lt;/h1&gt;
&lt;h2 id=&#34;binary-classification-二元分类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#binary-classification-二元分类&#34;&gt;#&lt;/a&gt; Binary Classification 二元分类&lt;/h2&gt;
&lt;p&gt;（二元分类）是机器学习中的一种基本任务。它指的是将数据分为两个类别之一，例如 “是 / 否”、“成功 / 失败” 或 “正类 / 负类”。&lt;/p&gt;
&lt;h2 id=&#34;support-vector-machine-支持向量机&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#support-vector-machine-支持向量机&#34;&gt;#&lt;/a&gt; support vector machine 支持向量机&lt;/h2&gt;
&lt;h4 id=&#34;超平面和间隔&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#超平面和间隔&#34;&gt;#&lt;/a&gt; 超平面和间隔&lt;/h4&gt;
&lt;p&gt;一个超平面由法向量 W 和截距 b 决定，其方程为&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;/msup&gt;&lt;mi&gt;W&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;X^TW + b = 0&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.924661em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07847em;&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8413309999999999em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.13889em;&#34;&gt;T&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;W&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.69444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;什么是 good decision boundary？&lt;/strong&gt;&lt;br&gt;
一个好的决策边界是在分类问题中能够有效区分不同类别的数据点，并对未见数据具有良好泛化能力的边界。&lt;/p&gt;
&lt;p&gt;Maximum margin solution（最大化间隔解）是一种在分类任务中追求分类器稳健性的策略，尤其常见于支持向量机（SVM）中。选择两个平行的超平面，使其距离间隔经可能大。&lt;/p&gt;
&lt;p&gt;二元分类的目标函数 f，选择两条平行的线，使得两条线之间的距离最大，这两条线就是支持向量机的决策边界。同时这两条平行线仍然需要满足能够区分数据集中的正类和负类数据点。这两条线的距离就称为 margin（间隔）。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image.png&#34; alt=&#34;max-margin&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SVM-sketch Derivation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在支持向量机中，分类器的目标是找到一个决策边界（超平面 y = wx + b）, 支持向量是离超平面最近的点，这些点决定了分类边界的位置。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-1.png&#34; alt=&#34;normalization&#34;&gt;&lt;/p&gt;
&lt;p&gt;已知归一化后的正负类支持向量平面，求解两平面之间的距离，即 margin。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mi&gt;g&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;/&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;∣&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;∣&lt;/mi&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;∣&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;∣&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;d_{margin} = 2 / ||w||&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.980548em;vertical-align:-0.286108em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.311664em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.02778em;&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.03588em;&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.286108em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;∣&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;∣&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02691em;&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;∣&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;∣&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SVM 是对 margin 的最大化&lt;/strong&gt;&lt;br&gt;
&lt;img data-src=&#34;./image-20241127203625773.png&#34; alt=&#34;image-20241127203625773&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Relaxed Formulation 松弛形式&lt;/strong&gt;&lt;br&gt;
 Relaxed Formulation（松弛形式）通常指在支持向量机（SVM）或其他优化问题中，为了处理数据非线性可分的情况，对原始的硬性约束（Hard Margin Constraints）进行放松，从而提出的改进版本。&lt;/p&gt;
&lt;p&gt;在 SVM 中，这种松弛形式被称为 ** 软                                                    ** 支持向量机（Soft Margin SVM）。&lt;/p&gt;
&lt;p&gt;引入松弛模型后，目标函数变为：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;./image-20241127203943589.png&#34; alt=&#34;image-20241127203943589&#34;&gt;&lt;/p&gt;
&lt;p&gt;C&amp;gt;0 被称为惩罚参数，C 越小时对误分类参数惩罚越小，反之越大。&lt;/p&gt;
&lt;p&gt;引入松弛变量&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;ξ&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;ξi&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8888799999999999em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.04601em;&#34;&gt;ξ&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &amp;gt;=0，则目标函数又可变为：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;./image-20241127204212970.png&#34; alt=&#34;image-20241127204212970&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;gradient-descent-梯度下降&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#gradient-descent-梯度下降&#34;&gt;#&lt;/a&gt; Gradient Descent 梯度下降&lt;/h2&gt;
&lt;p&gt;梯度下降是一种优化算法，用于寻找函数的最小值。在机器学习中，梯度下降被广泛应用于训练模型，例如线性回归、逻辑回归和神经网络。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-6.png&#34; alt=&#34;gradient descent update&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Gradient Descent Algorithm&lt;/strong&gt;&lt;br&gt;
&lt;img data-src=&#34;image-7.png&#34; alt=&#34;gradient descent algorithm1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-8.png&#34; alt=&#34;gradient descent algorithm2&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-9.png&#34; alt=&#34;subgradient&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;stochastic-gradient-descent-随机梯度下降&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#stochastic-gradient-descent-随机梯度下降&#34;&gt;#&lt;/a&gt; stochastic gradient descent 随机梯度下降&lt;/h2&gt;
&lt;p&gt;随机梯度下降是梯度下降的一种变体。与梯度下降不同，随机梯度下降在每次迭代中只使用一个样本来计算梯度。这使得随机梯度下降在处理大规模数据集时更加高效。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-10.png&#34; alt=&#34;stochastic&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Minibatch Stochastic Gradient Descent&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Mini-Batch Stochastic Gradient Descent (Mini-Batch SGD) 是 随机梯度下降（SGD） 的一种改进版本，它结合了 批量梯度下降（Batch Gradient Descent） 和 随机梯度下降（SGD） 的优点。与传统的 SGD 每次仅使用一个样本来更新模型参数不同，Mini-Batch SGD 使用小批量数据（mini-batch）来进行更新。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-11.png&#34; alt=&#34;mini-batch&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;3-logistic-regression-and-ensemble-methods-逻辑回归与集成学习算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-logistic-regression-and-ensemble-methods-逻辑回归与集成学习算法&#34;&gt;#&lt;/a&gt; 3 Logistic Regression and Ensemble Methods 逻辑回归与集成学习算法&lt;/h1&gt;
&lt;p&gt;在学习逻辑回归之前，先来了解机器学习的原则目标： Prediction 预测与 Making Decisions 决策&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-12.png&#34; alt=&#34;pipeline of data-driven methods&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;logistic-regression-逻辑回归&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#logistic-regression-逻辑回归&#34;&gt;#&lt;/a&gt; Logistic Regression 逻辑回归&lt;/h2&gt;
&lt;p&gt;逻辑回归（Logistic Regression） 是一种常见的分类算法，尽管它的名字中包含 “回归”，但它实际上用于分类问题，尤其是二分类问题。它基于统计学和概率论的原理，通过将输入特征映射到一个概率值来预测类别。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;逻辑回归（Logistic Regression）&lt;/strong&gt; 是一种常见的分类算法，尽管它的名字中包含 “回归”，但它实际上用于&lt;strong&gt;分类问题&lt;/strong&gt;，尤其是&lt;strong&gt;二分类问题&lt;/strong&gt;。它基于统计学和概率论的原理，通过将输入特征映射到一个概率值来预测类别。以下是对逻辑回归的详细讲解：&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;1-逻辑回归的基本原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-逻辑回归的基本原理&#34;&gt;#&lt;/a&gt; 1. &lt;strong&gt;逻辑回归的基本原理&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;逻辑回归试图找到一个最佳的决策边界，用于将输入数据分为两个类别（例如，正类和负类）。它的目标是计算给定输入特征 x 时，属于某一类别（通常是类别 1）的概率。所以逻辑回归算法的输出值永远在 0 到 1 之间。&lt;/p&gt;
&lt;h4 id=&#34;假设&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#假设&#34;&gt;#&lt;/a&gt; 假设&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;假设我们有一个输入向量 x = [x_1, x_2, ..., x_n]，这是我们的特征向量。&lt;/li&gt;
&lt;li&gt;y 是目标变量，通常为二元标签，表示类别：(y in {0, 1} )。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;逻辑回归模型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#逻辑回归模型&#34;&gt;#&lt;/a&gt; 逻辑回归模型&lt;/h4&gt;
&lt;p&gt;逻辑回归的模型基于线性回归模型的输出，但通过一个 **sigmoid 函数（logistic 函数）** 进行转换，以确保输出值在 0 和 1 之间，可以解释为概率。&lt;/p&gt;
&lt;p&gt;模型的形式为：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo stretchy=&#34;false&#34;&gt;[&lt;/mo&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;∣&lt;/mi&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;g&lt;/mi&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;msup&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;/msup&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;]&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;[
p(y = 1 | x) = sigma(w^T x + b)
]
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;∣&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1.1413309999999999em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02691em;&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8913309999999999em;&#34;&gt;&lt;span style=&#34;top:-3.113em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.13889em;&#34;&gt;T&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;其中：&lt;br&gt;
&lt;img data-src=&#34;image-13.png&#34; alt=&#34;wenben&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;目标&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#目标&#34;&gt;#&lt;/a&gt; 目标&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;通过训练学习参数 w 和 b，使得模型能够尽可能准确地预测样本属于类别 1 的概率。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;2-损失函数与优化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-损失函数与优化&#34;&gt;#&lt;/a&gt; 2. &lt;strong&gt;损失函数与优化&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;逻辑回归通过最小化&lt;strong&gt;对数似然函数（log-likelihood）&lt;strong&gt;来估计参数 (w) 和 ( b )。对于二分类问题，损失函数通常采用&lt;/strong&gt;交叉熵损失（cross-entropy loss）&lt;/strong&gt;，其公式为：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-16.png&#34; alt=&#34;gongshi&#34;&gt;&lt;/p&gt;
&lt;p&gt;损失函数的目标是最小化交叉熵损失，意味着我们尽可能将预测概率 p 和真实标签 y 对应的概率接近。&lt;/p&gt;
&lt;h4 id=&#34;优化方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#优化方法&#34;&gt;#&lt;/a&gt; 优化方法&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;梯度下降&lt;/strong&gt;：通常使用梯度下降算法来优化参数 (w) 和 ( b )。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;梯度计算&lt;/strong&gt;：&lt;br&gt;
[&lt;br&gt;
\frac&lt;ruby&gt;\partial J(w, b)}{\partial w} = \frac{1}{m} \sum_{i=1}&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;{m&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt; (p^&lt;ruby&gt;(i)} - y&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;{(i)&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt;) x^&lt;ruby&gt;(i)}
\]
\[
\frac{\partial J(w, b)}{\partial b} = \frac{1}{m} \sum_{i=1}&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;{m&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt; (p^&lt;ruby&gt;(i)} - y&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;{(i)&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt;)&lt;br&gt;
]&lt;br&gt;
 然后根据这些梯度更新参数 (w) 和 ( b )。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;3-模型评估与决策边界&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-模型评估与决策边界&#34;&gt;#&lt;/a&gt; 3. &lt;strong&gt;模型评估与决策边界&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;逻辑回归输出的是类别 1 的概率，通常情况下，我们根据某个阈值（例如 0.5）将其转换为具体的类别预测：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果 (p (y = 1 | x) &amp;gt; 0.5 )，则预测为类别 1。&lt;/li&gt;
&lt;li&gt;如果 (p (y = 1 | x) &amp;lt; 0.5 )，则预测为类别 0。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;决策边界&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#决策边界&#34;&gt;#&lt;/a&gt; 决策边界&lt;/h4&gt;
&lt;p&gt;逻辑回归的决策边界是一个超平面（线性边界），可以通过求解：&lt;br&gt;
[&lt;br&gt;
w^T x + b = 0&lt;br&gt;
]&lt;br&gt;
 来得到。这个边界将数据空间划分为两个区域，预测值大于 0.5 的区域为类别 1，反之为类别 0。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;4-正则化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-正则化&#34;&gt;#&lt;/a&gt; 4. &lt;strong&gt;正则化&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;为了防止过拟合，逻辑回归通常采用&lt;strong&gt;正则化&lt;/strong&gt;方法，特别是 L2 正则化（也叫 Ridge 正则化）。通过在损失函数中加入正则化项，可以限制模型的复杂度，避免过度拟合训练数据。&lt;/p&gt;
&lt;p&gt;带正则化的损失函数为：&lt;br&gt;
&lt;img data-src=&#34;image-17.png&#34; alt=&#34;regularization&#34;&gt;&lt;/p&gt;
&lt;p&gt;Logistic Loss:&lt;br&gt;
&lt;img data-src=&#34;image-18.png&#34; alt=&#34;logistic loss&#34;&gt;&lt;/p&gt;
&lt;p&gt;正则化的目标是平衡模型的复杂度和训练数据的拟合程度，防止过拟合。&lt;/p&gt;
&lt;h3 id=&#34;总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h3&gt;
&lt;p&gt;逻辑回归是一种简单、有效的分类方法，广泛应用于二分类和多分类问题。通过最大化对数似然函数，它能够估计出给定特征时属于某一类别的概率。理解其背后的原理和优化方法有助于在实际应用中有效地使用该模型，同时结合正则化可以避免过拟合，提高泛化能力。&lt;/p&gt;
&lt;p&gt;如果你有其他问题或需要更具体的代码示例，可以进一步提问！&lt;/p&gt;
&lt;h2 id=&#34;多类别分类问题的定义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多类别分类问题的定义&#34;&gt;#&lt;/a&gt; 多类别分类问题的定义&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;one vs rest method&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;one vs one method&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DDAG 决策有向无环图&lt;br&gt;
根二叉有向无环图（Rooted Binary Directed Acyclic Graph，简称 Rooted Binary DAG）是一种特殊类型的有向无环图（DAG），具有以下特点：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;根节点（Root Node）：图中有一个唯一的根节点，所有其他节点都可以通过有向路径从根节点到达。&lt;/p&gt;
&lt;p&gt;二叉性质（Binary Property）：每个节点最多有两个子节点。&lt;/p&gt;
&lt;p&gt;有向无环（Directed Acyclic）：图中的边是有方向的，并且不存在从某个节点出发经过若干条边又回到该节点的路径，即图中没有环。&lt;/p&gt;
&lt;p&gt;这种结构常用于表示决策树、二叉堆等数据结构。&lt;/p&gt;
&lt;p&gt;预测过程：&lt;br&gt;
&lt;img data-src=&#34;image-19.png&#34; alt=&#34;ddag&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;K-means algorithm K 均值算法&lt;br&gt;
 K 均值算法（K-means algorithm）是一种常用的聚类算法，用于将数据集分成 K 个簇。其处理过程如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;初始化：随机选择 K 个初始质心（Centroids）。&lt;/p&gt;
&lt;p&gt;分配簇：对于数据集中的每个数据点，计算其到每个质心的距离。&lt;br&gt;
将每个数据点分配到距离其最近的质心所对应的簇。&lt;/p&gt;
&lt;p&gt;更新质心：计算每个簇中所有数据点的平均值，并将该平均值作为新的质心。&lt;/p&gt;
&lt;p&gt;重复：重复步骤 2 和步骤 3，直到质心不再发生变化或达到预设的迭代次数。&lt;/p&gt;
&lt;p&gt;结果：最终得到 K 个簇，每个簇由距离其质心最近的数据点组成。&lt;/p&gt;
&lt;h1 id=&#34;4-overfitting-underfitting-regularization-and-cross-validation-过拟合-欠拟合-正则化和交叉验证&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-overfitting-underfitting-regularization-and-cross-validation-过拟合-欠拟合-正则化和交叉验证&#34;&gt;#&lt;/a&gt; 4 Overfitting, Underfitting, Regularization and Cross-Validation 过拟合、欠拟合、正则化和交叉验证&lt;/h1&gt;
&lt;p&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; Updated upstream: 机器学习 / 机器学习.md&lt;br&gt;
 先回顾一下机器学习模型训练的过程:&lt;br&gt;
&lt;img data-src=&#34;image-20.png&#34; alt=&#34;model train&#34;&gt;&lt;br&gt;
 判断 model 的质量需要使用 loss function，loss function 的值越小，model 的质量越好。&lt;/p&gt;
&lt;p&gt;loss function 有三种类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hinge Loss:&lt;br&gt;
&lt;img data-src=&#34;image-21.png&#34; alt=&#34;hinge loss&#34;&gt;&lt;/li&gt;
&lt;li&gt;Logistic Loss:&lt;br&gt;
&lt;img data-src=&#34;image-22.png&#34; alt=&#34;logistic loss&#34;&gt;&lt;/li&gt;
&lt;li&gt;soft-max loss:&lt;br&gt;
&lt;img data-src=&#34;image-23.png&#34; alt=&#34;soft-max&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;知道这几种 loss 函数的定义，那我们又该如何使用这些 loss 函数来判断 model 的质量呢？我们可以使用中学时期学到的最小方差损失判定，但是很多时候模型并不是线性的，所以我们需要使用交叉验证的方法来判断模型的质量。&lt;/p&gt;
&lt;p&gt;首先介绍两种集： 训练集和测试集&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;训练集：用于拟合模型的数据（70%）&lt;/li&gt;
&lt;li&gt;测试集：用于评估模型的泛化能力（30%）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在训练集中又被分隔出一块：交叉验证集。为什么需要交叉验证集 validation set 呢&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Business Reason：
&lt;ul&gt;
&lt;li&gt;Need to choose the beat model&lt;/li&gt;
&lt;li&gt;measure accuracy（准确性）/power of the selected model&lt;/li&gt;
&lt;li&gt;better to measure ROI of the modeling project&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Statistical Reason：
&lt;ul&gt;
&lt;li&gt;model building techniques are inherently designed to minimize loss or bias&lt;/li&gt;
&lt;li&gt;to an extent, a model will always fit &amp;quot;noise&amp;quot; as well as signal&lt;/li&gt;
&lt;li&gt;if you just fit a bunch of models on a givne dataset and choose the &amp;quot;best&amp;quot; one , it will likely be overly optimistic&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;过拟合与欠拟合&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#过拟合与欠拟合&#34;&gt;#&lt;/a&gt; 过拟合与欠拟合&lt;/h3&gt;
&lt;p&gt;UnderFitting：模型无法捕捉到数据的底层趋势&lt;/p&gt;
&lt;p&gt;OverFitting：模型完美拟合数据，但是也把噪音纳入进来，导致表现形式很繁琐&lt;/p&gt;
&lt;h3 id=&#34;偏差-方差权衡-bias-variance-tradeoff&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#偏差-方差权衡-bias-variance-tradeoff&#34;&gt;#&lt;/a&gt; 偏差 - 方差权衡 Bias-Variance Tradeoff&lt;/h3&gt;
&lt;p&gt;对于复杂的模型，可以忽略这个模型再未来数据的准确性。&lt;br&gt;
&lt;img data-src=&#34;image-24.png&#34; alt=&#34;complex model&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;交叉验证&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#交叉验证&#34;&gt;#&lt;/a&gt; 交叉验证&lt;/h3&gt;
&lt;p&gt;使用 validation set 以调优高维参数，然后仅使用 test set 来评估模型的泛化能力。&lt;/p&gt;
&lt;p&gt;如果我们想减少数据的可变性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用不同分区进行多轮交叉验证&lt;/li&gt;
&lt;li&gt;对所有轮次的结果进行平均&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;5-非线性机器学习与集成方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-非线性机器学习与集成方法&#34;&gt;#&lt;/a&gt; 5 非线性机器学习与集成方法&lt;/h1&gt;
&lt;h2 id=&#34;决策树&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#决策树&#34;&gt;#&lt;/a&gt; 决策树&lt;/h2&gt;
&lt;p&gt;定义：树的分支代表一个可能的决策、结果或者反应，现实表现为父节点的属性值。中间节点表示某种属性，叶子节点表示最终结果。&lt;br&gt;
那么如何划分决策才是最优的呢？有个评判标准：对于一个 value，可以得到全为正的实例，而其余的 value，可以得到全为负的实例。如果划分后的每一片叶子的区分度都足够大，说明划分方式好。Entropy 熵就是用于表明区分度的。&lt;/p&gt;
&lt;p&gt;必考：如何求解数据集合 D 的熵  呢？&lt;br&gt;
口诀：负数、比例 p、Alog2A&lt;/p&gt;
&lt;p&gt;假设叶子节点内部有 9 个正数节点和 5 个负数节点，可以根据口诀退出熵计算公式：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;entropy(P) = - p+log2p+ - p-log2p-&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;当然叶子节点内部也不一定只有正负两个类别，我们假设有 c 个类别，那么熵的计算公式为：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;entropy(D) = - sum(pclog2pc)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;下面再来介绍 Gain，Gain 用于表示对于某属性 A，其分类可以获得的熵信息增益&lt;br&gt;
 &lt;code&gt;Gain(D, A) = Entropy(D) - sum(* Entropy(Dv))&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;v 属于属性 A 可以取到的所有可能值的集合&lt;/li&gt;
&lt;li&gt;Dv 是 D 的子集，表示 A 的值为 v&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;示范把类似打网球的表格转化为决策树&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#示范把类似打网球的表格转化为决策树&#34;&gt;#&lt;/a&gt; 示范：把类似打网球的表格转化为决策树&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;image-25.png&#34; alt=&#34;decision tree&#34;&gt;&lt;br&gt;
 思路：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;四颗树木（可能的决策树）套公式计算信息密度，发现 Outlook 的 Gain 值最大&lt;/li&gt;
&lt;li&gt;Overcast 的中间节点没必要拆分（因为叶子节点的值全为正的），只需要拆分 sunny 和 rain 对应&lt;/li&gt;
&lt;li&gt;对于 sunny 节点，我们可以使用 humidity、wind、temp、继续拆分。&lt;/li&gt;
&lt;li&gt;对于 Rain 节点，同样使用 humidity、wind、temp、继续拆分、wind 拆分效果最好&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;低偏差：模型在训练集拟合得好&lt;/li&gt;
&lt;li&gt;高方差：模型更有可能做出错误的决策&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;5-multiclass-classification-and-cross-entropy-loss-多类分类和交叉熵损失函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-multiclass-classification-and-cross-entropy-loss-多类分类和交叉熵损失函数&#34;&gt;#&lt;/a&gt; 5 Multiclass Classification and Cross-entropy Loss 多类分类和交叉熵损失函数&lt;/h1&gt;
&lt;h1 id=&#34;6-neural-networks-and-deep-learning-神经网络与深度学习&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6-neural-networks-and-deep-learning-神经网络与深度学习&#34;&gt;#&lt;/a&gt; 6 Neural Networks and Deep Learning 神经网络与深度学习&lt;/h1&gt;
&lt;h1 id=&#34;7-rnn-transformer-bert&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#7-rnn-transformer-bert&#34;&gt;#&lt;/a&gt; 7 RNN、Transformer、BERT&lt;/h1&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Stashed changes: 机器学习.md&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;集成学习&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#集成学习&#34;&gt;#&lt;/a&gt; 集成学习&lt;/h2&gt;
&lt;p&gt;将一系列基础模型合并到一起，从而产生一个更好的预测模型。主要方法：Bagging、Boosting&lt;/p&gt;
&lt;h3 id=&#34;bagging&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#bagging&#34;&gt;#&lt;/a&gt; Bagging&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;通过 bootstrap sampling（重采样）得到 T 个数据集&lt;/li&gt;
&lt;li&gt;训练 T 个 base learners 通过子数据集&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有两种得到结果的方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Majority Voting：对于分类问题，选择 T 个模型中出现最多次数的结果&lt;/li&gt;
&lt;li&gt;Average：对于回归问题，选择 T 个模型的平均值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;随机森林是 Bagging 的一种实现，它是一种集成学习方法，通过训练多个决策树来提高预测性能。随机森林的基本原理是通过随机选择特征和样本来构建多个决策树，并将这些决策树的预测结果进行平均或投票来得到最终的预测结果。&lt;/p&gt;
&lt;h2 id=&#34;adaboostadaptive-boosting&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#adaboostadaptive-boosting&#34;&gt;#&lt;/a&gt; AdaBoost（Adaptive Boosting）&lt;/h2&gt;
&lt;p&gt;原理：通过训练一系列弱分类器（weak learners），每个弱分类器都在前一个分类器的错误上进行学习，最终将这些弱分类器组合成一个强分类器（strong learner）。&lt;/p&gt;
&lt;p&gt;进行 Time 次循环的时候，每次选择在当前权重下，错误率最小的弱分类机。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;./image-20241128103036889.png&#34; alt=&#34;image-20241128103036889&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;6-无监督学习聚类学习&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6-无监督学习聚类学习&#34;&gt;#&lt;/a&gt; 6 无监督学习：聚类学习&lt;/h1&gt;
&lt;p&gt;无监督学习的数据集是没有目标值的。&lt;/p&gt;
&lt;h2 id=&#34;重点k-means聚类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#重点k-means聚类&#34;&gt;#&lt;/a&gt; 重点：K-Means 聚类&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;过程：&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;随机选取 K 个点作为初始质心（centroid）&lt;/li&gt;
&lt;li&gt;将每个点分配到最近的质心&lt;/li&gt;
&lt;li&gt;更新质心&lt;/li&gt;
&lt;li&gt;重复 2 和 3 直到质心不再变化或者数据点分配情况基本不变&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;层次聚合聚类-hierarchical-agglomerative-clustering&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#层次聚合聚类-hierarchical-agglomerative-clustering&#34;&gt;#&lt;/a&gt; 层次聚合聚类 Hierarchical Agglomerative Clustering&lt;/h2&gt;
&lt;p&gt;层次聚合聚类（Hierarchical Agglomerative Clustering，HAC）是一种无监督学习算法，用于将数据点分层次地聚类。HAC 的基本思想是通过不断合并最相似的簇来构建一个层次结构，直到所有数据点都被合并到一个簇中。以下是 HAC 的详细过程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;初始化&lt;/strong&gt;：将每个数据点视为一个单独的簇。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;计算距离&lt;/strong&gt;：计算所有簇之间的距离。常用的距离度量方法包括欧氏距离、曼哈顿距离等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;合并簇&lt;/strong&gt;：找到距离最近的两个簇，并将它们合并成一个新的簇。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;更新距离矩阵&lt;/strong&gt;：更新距离矩阵，重新计算新簇与其他簇之间的距离。常用的更新方法包括最小距离（单链接）、最大距离（全链接）、平均距离和质心距离等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;重复步骤 3 和 4&lt;/strong&gt;：重复合并和更新距离矩阵的过程，直到所有数据点都被合并到一个簇中，或者达到预定的簇数量。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;HAC 的结果通常用树状图（dendrogram）表示，树状图展示了数据点的合并过程和层次结构。通过剪切树状图，可以得到不同数量的簇。&lt;/p&gt;
&lt;p&gt;HAC 的优点是能够发现数据的层次结构，不需要预先指定簇的数量。缺点是计算复杂度较高，适用于小规模数据集。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;与 K-means 算法的比较：
&lt;ul&gt;
&lt;li&gt;不是参数依赖的，而是实例依赖性&lt;/li&gt;
&lt;li&gt;可以生成任意形状的聚类&lt;/li&gt;
&lt;li&gt;生成层级的聚类，聚类不只是 “在平面切分的”&lt;/li&gt;
&lt;li&gt;不需要在聚类之前指定聚类的数量，也不是随机的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;7-neural-networks-and-deep-learning-神经网络与深度学习&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#7-neural-networks-and-deep-learning-神经网络与深度学习&#34;&gt;#&lt;/a&gt; 7 Neural Networks and Deep Learning 神经网络与深度学习&lt;/h1&gt;
&lt;p&gt;&lt;img data-src=&#34;image-27.png&#34; alt=&#34;neural network&#34;&gt;&lt;br&gt;
 使用权重 w 对 x 进行线性变换后带入激活函数得到结果，重复多次的过程是神经网络的基本原理。&lt;/p&gt;
&lt;h2 id=&#34;前向传播&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前向传播&#34;&gt;#&lt;/a&gt; 前向传播&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;image-26.png&#34; alt=&#34;Lossfunction set&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;反向传播&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#反向传播&#34;&gt;#&lt;/a&gt; 反向传播&lt;/h2&gt;
&lt;h2 id=&#34;cnn-卷积神经网络&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cnn-卷积神经网络&#34;&gt;#&lt;/a&gt; CNN 卷积神经网络&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;卷积神经网络&lt;/em&gt;（convolutional neural networks，CNN）是机器学习利用自然图像中一些已知结构的创造性方法。卷积神经网络是将&lt;em&gt;空间不变性&lt;/em&gt;（spatial invariance）的这一概念系统化，从而基于这个模型使用较少的参数来学习有用的表示。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;平移不变性&lt;/em&gt;（translation invariance）：不管检测对象出现在图像中的哪个位置，神经网络的前面几层应该对相同的图像区域具有相似的反应，即为 “平移不变性”。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;局部性&lt;/em&gt;（locality）：神经网络的前面几层应该只探索输入图像中的局部区域，而不过度在意图像中相隔较远区域的关系，这就是 “局部性” 原则。最终，可以聚合这些局部特征，以在整个图像级别进行预测。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;图像卷积操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#图像卷积操作&#34;&gt;#&lt;/a&gt; 图像卷积操作&lt;/h3&gt;
&lt;p&gt;卷积层所表达的运算实际是互相关运算（cross-correlation），而不是卷积运算。输入张量和核张量通过互相关运算产生输出张量。&lt;/p&gt;
&lt;p&gt;已知输入张量为 nhXnw，卷积核为 khXkw，得到输出张量的规格：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;(n_h - k_h + 1)*(n_w-k_w+1)&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.33610799999999996em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;h&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.84444em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03148em;&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.33610799999999996em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;h&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;∗&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.151392em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.02691em;&#34;&gt;w&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.84444em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03148em;&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.151392em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.02691em;&#34;&gt;w&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;实例：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;./image-20241127213926417.png&#34; alt=&#34;image-20241127213926417&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Stride：卷积核移动的步长&lt;/li&gt;
&lt;li&gt;Padding：在输入数据周围填充额外的数据&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;8-rnn-transformer-bert&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#8-rnn-transformer-bert&#34;&gt;#&lt;/a&gt; 8 RNN、Transformer、BERT&lt;/h1&gt;
&lt;h2 id=&#34;强化学习&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#强化学习&#34;&gt;#&lt;/a&gt; 强化学习&lt;/h2&gt;
&lt;p&gt;三个阶段：监督训练、奖励模型训练、强化学习模型训练&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;监督训练：从数据集中采样问题、根据采样问题，人工给出高质量回答、基于问题和回答，对 gpt 进行监督训练&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;奖励模型训练：从数据集采样问题并输入第一阶段训练的 gpt 模型，根据问题和回答，使用奖励模型给出奖励，基于问题和回答，对 gpt 进行奖励训练&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;强化学习模型训练：从数据集采样问题并输入第一阶段训练的 gpt 模型，根据问题和回答，使用强化学习模型给出奖励，基于问题和回答，对 gpt 进行强化学习训练&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
    </channel>
</rss>
